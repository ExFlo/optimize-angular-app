{"version":3,"file":"search.js","sourceRoot":"","sources":["../../../../app/search/search.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAeA;gBAGE,gBAAoB,KAAY;oBAAZ,UAAK,GAAL,KAAK,CAAO;oBAFhC,UAAK,GAAe,EAAE,CAAC;gBAEY,CAAC;gBAEpC,uBAAM,GAAN,UAAO,IAAY;oBAAnB,iBAsBC;oBArBC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC5B,IAAI,OAAO,GAAG,oCAAoC,CAAC;wBACnD,IAAI,MAAM,GAAG,IAAI,sBAAe,EAAE,CAAC;wBACnC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;wBAC5B,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC7B,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;wBACpC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;wBAC9B,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBAC7B,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;wBAEzC,IAAI,CAAC,KAAK;6BACP,GAAG,CAAC,OAAO,EAAE,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC;6BAC9B,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAW,QAAQ,CAAC,IAAI,EAAE,EAA1B,CAA0B,CAAC;6BAC3C,SAAS,CAAC,UAAA,IAAI;4BACb,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;4BAChB,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;4BAC9B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;gCACpB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;4BAClC,CAAC;wBACH,CAAC,CAAC,CAAC;oBACP,CAAC;gBACH,CAAC;gBAtCH;oBAAC,gBAAS,CAAC;wBACT,QAAQ,EAAE,QAAQ;wBAClB,QAAQ,EAAE,+OAOT;qBACF,CAAC;;0BAAA;gBA8BF,aAAC;YAAD,CAAC,AA7BD,IA6BC;YA7BD,2BA6BC,CAAA","sourcesContent":["import {Component} from '@angular/core'\r\nimport {Jsonp, URLSearchParams} from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Component({\r\n  selector: 'search',\r\n  template: `\r\n    <div>\r\n      <h2>Search</h2>\r\n      <input type=\"text\" placeholder=\"Search on Wikipedia\" #foo>\r\n      <button (click)=\"search(foo.value)\">Search</button>\r\n      <div *ngFor=\"let page of pages\">{{page}}</div>\r\n    </div>\r\n  `\r\n})\r\nexport class Search {\r\n  pages: Array<any> = [];\r\n\r\n  constructor(private jsonp: Jsonp) {}\r\n\r\n  search(text: string) {\r\n    if (text && text.length > 0) {\r\n      let wikiUrl = 'https://en.wikipedia.org/w/api.php';\r\n      let params = new URLSearchParams();\r\n      params.set('gapfrom', text);\r\n      params.set('gaplimit', '10');\r\n      params.set('generator', 'allpages');\r\n      params.set('action', 'query');\r\n      params.set('format', 'json');\r\n      params.set('callback', 'JSONP_CALLBACK');\r\n\r\n      this.jsonp\r\n        .get(wikiUrl, {search: params})\r\n        .map(response => <string[]> response.json())\r\n        .subscribe(data => {\r\n          this.pages = [];\r\n          var raw = data['query'].pages;\r\n          for (var key in raw) {\r\n            this.pages.push(raw[key].title);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n}\r\n"]}