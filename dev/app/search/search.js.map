{"version":3,"file":"search.js","sourceRoot":"","sources":["../../../../app/search/search.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAeA;gBAGE,gBAAoB,KAAY;oBAAZ,UAAK,GAAL,KAAK,CAAO;oBAFhC,UAAK,GAAe,EAAE,CAAC;gBAEY,CAAC;gBAEpC,uBAAM,GAAN,UAAO,IAAY;oBAAnB,iBAsBC;oBArBC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC5B,IAAI,OAAO,GAAG,oCAAoC,CAAC;wBACnD,IAAI,MAAM,GAAG,IAAI,sBAAe,EAAE,CAAC;wBACnC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;wBAC5B,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC7B,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;wBACpC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;wBAC9B,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBAC7B,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;wBAEzC,IAAI,CAAC,KAAK;6BACP,GAAG,CAAC,OAAO,EAAE,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC;6BAC9B,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAW,QAAQ,CAAC,IAAI,EAAE,EAA1B,CAA0B,CAAC;6BAC3C,SAAS,CAAC,UAAA,IAAI;4BACb,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;4BAChB,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;4BAC9B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;gCACpB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;4BAClC,CAAC;wBACH,CAAC,CAAC,CAAC;oBACP,CAAC;gBACH,CAAC;gBAtCH;oBAAC,gBAAS,CAAC;wBACT,QAAQ,EAAE,QAAQ;wBAClB,QAAQ,EAAE,+OAOT;qBACF,CAAC;;0BAAA;gBA8BF,aAAC;YAAD,CAAC,AA7BD,IA6BC;YA7BD,2BA6BC,CAAA","sourcesContent":["import {Component} from '@angular/core'\nimport {Jsonp, URLSearchParams} from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Component({\n  selector: 'search',\n  template: `\n    <div>\n      <h2>Search</h2>\n      <input type=\"text\" placeholder=\"Search on Wikipedia\" #foo>\n      <button (click)=\"search(foo.value)\">Search</button>\n      <div *ngFor=\"let page of pages\">{{page}}</div>\n    </div>\n  `\n})\nexport class Search {\n  pages: Array<any> = [];\n\n  constructor(private jsonp: Jsonp) {}\n\n  search(text: string) {\n    if (text && text.length > 0) {\n      let wikiUrl = 'https://en.wikipedia.org/w/api.php';\n      let params = new URLSearchParams();\n      params.set('gapfrom', text);\n      params.set('gaplimit', '10');\n      params.set('generator', 'allpages');\n      params.set('action', 'query');\n      params.set('format', 'json');\n      params.set('callback', 'JSONP_CALLBACK');\n\n      this.jsonp\n        .get(wikiUrl, {search: params})\n        .map(response => <string[]> response.json())\n        .subscribe(data => {\n          this.pages = [];\n          var raw = data['query'].pages;\n          for (var key in raw) {\n            this.pages.push(raw[key].title);\n          }\n        });\n    }\n  }\n\n}\n"]}