{"version":3,"sources":["../../../../modules/@angular/forms/src/forms.ts","../../app/subscribe/subscribe.module.ts","../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_control_directive.ts","../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_control_name.ts","../../../../../modules/@angular/forms/src/directives/reactive_errors.ts","../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_group_directive.ts","../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_group_name.ts","../../../../../modules/@angular/forms/src/directives/validators.ts","../../../../modules/@angular/forms/src/directives.ts","../../../../modules/@angular/forms/src/form_builder.ts","../../../../modules/@angular/forms/src/form_providers.ts","../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory.ts","../../node_modules/@angular/forms/src/directives/ng_model.ngfactory.ts","../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory.ts","../../../../../modules/@angular/forms/src/directives/abstract_form_group_directive.ts","../../../../../modules/@angular/forms/src/facade/async.ts","../../../../modules/@angular/forms/src/model.ts","../../../../../modules/@angular/forms/src/directives/ng_form.ts","../../../../../modules/@angular/forms/src/directives/ng_model_group.ts","../../node_modules/rxjs/src/operator/toPromise.ts","../../../../../modules/@angular/forms/src/facade/collection.ts","../../../../modules/@angular/forms/src/private_import_core.ts","../../../../modules/@angular/forms/src/validators.ts","../../../../../modules/@angular/forms/src/directives/checkbox_value_accessor.ts","../../../../../modules/@angular/forms/src/directives/default_value_accessor.ts","../../../../../modules/@angular/forms/src/directives/normalize_validator.ts","../../../../../modules/@angular/forms/src/directives/number_value_accessor.ts","../../../../../modules/@angular/forms/src/directives/radio_control_value_accessor.ts","../../../../../modules/@angular/forms/src/directives/range_value_accessor.ts","../../../../../modules/@angular/forms/src/directives/select_control_value_accessor.ts","../../../../../modules/@angular/forms/src/facade/lang.ts","../../../../../modules/@angular/forms/src/directives/control_value_accessor.ts","../../../../../modules/@angular/forms/src/directives/select_multiple_control_value_accessor.ts","../../../../../modules/@angular/forms/src/directives/shared.ts","../../../../../modules/@angular/forms/src/directives/error_examples.ts","../../../../../modules/@angular/forms/src/directives/template_driven_errors.ts","../../../../../modules/@angular/forms/src/directives/ng_model.ts","../../../../../modules/@angular/forms/src/directives/control_container.ts","../../../../../modules/@angular/forms/src/directives/abstract_control_directive.ts","../../../../../modules/@angular/forms/src/directives/ng_control.ts","../../../../../modules/@angular/forms/src/directives/ng_control_status.ts","../../app/subscribe/subscribe.ngfactory.ts","../../app/subscribe/subscribe.ts","../../app/subscribe/subscribe.module.ngfactory.ts"],"names":["AbstractControlDirective","_nAngularFormsSrcDirectivesAbstract_control_directiveJs","AbstractFormGroupDirective","_nAngularFormsSrcDirectivesAbstract_form_group_directiveJs","CheckboxControlValueAccessor","_nAngularFormsSrcDirectivesCheckbox_value_accessorJs","ControlContainer","_nAngularFormsSrcDirectivesControl_containerJs","NG_VALUE_ACCESSOR","_nAngularFormsSrcDirectivesControl_value_accessorJs","DefaultValueAccessor","_nAngularFormsSrcDirectivesDefault_value_accessorJs","NgControl","_nAngularFormsSrcDirectivesNg_controlJs","NgControlStatus","_nAngularFormsSrcDirectivesNg_control_statusJs","NgControlStatusGroup","NgForm","_nAngularFormsSrcDirectivesNg_formJs","NgModel","_nAngularFormsSrcDirectivesNg_modelJs","NgModelGroup","_nAngularFormsSrcDirectivesNg_model_groupJs","RadioControlValueAccessor","_nAngularFormsSrcDirectivesRadio_control_value_accessorJs","FormControlDirective","_nAngularFormsSrcDirectivesReactive_directivesForm_control_directiveJs","FormControlName","_nAngularFormsSrcDirectivesReactive_directivesForm_control_nameJs","FormGroupDirective","_nAngularFormsSrcDirectivesReactive_directivesForm_group_directiveJs","FormArrayName","_nAngularFormsSrcDirectivesReactive_directivesForm_group_nameJs","FormGroupName","NgSelectOption","_nAngularFormsSrcDirectivesSelect_control_value_accessorJs","SelectControlValueAccessor","SelectMultipleControlValueAccessor","_nAngularFormsSrcDirectivesSelect_multiple_control_value_accessorJs","MaxLengthValidator","_nAngularFormsSrcDirectivesValidatorsJs","MinLengthValidator","PatternValidator","RequiredValidator","FormBuilder","_nAngularFormsSrcForm_builderJs","AbstractControl","_nAngularFormsSrcModelJs","FormArray","FormControl","FormGroup","NG_ASYNC_VALIDATORS","_nAngularFormsSrcValidatorsJs","NG_VALIDATORS","Validators","routes","SubscribeModule","path","component","subscribe_1","Subscribe","__decorate","core_1","NgModule","imports","forms_1","FormsModule","router_1","RouterModule","forChild","declarations","__metadata","exports_1","Directive","_nAngularCoreIndexJs","Inject","Input","Optional","Output","Self","forwardRef","EventEmitter","_nAngularFormsSrcFacadeAsyncJs","ReactiveErrors","_nAngularFormsSrcDirectivesReactive_errorsJs","composeAsyncValidators","_nAngularFormsSrcDirectivesSharedJs","composeValidators","isPropertyUpdated","selectValueAccessor","setUpControl","formControlBinding","provide","useExisting","validators","asyncValidators","valueAccessors","_super","call","this","update","_rawValidators","_rawAsyncValidators","valueAccessor","__extends","Object","defineProperty","prototype","isDisabled","disabledAttrWarning","ngOnChanges","changes","_isControlChanged","form","control","disabled","setDisabledState","updateValueAndValidity","emitEvent","viewModel","setValue","model","viewToModelUpdate","newValue","emit","hasOwnProperty","decorators","type","args","selector","providers","exportAs","ctorParameters","Array","propDecorators","Host","SkipSelf","controlPath","controlNameBinding","parent","_added","_parent","_setUpControl","formDirective","updateModel","ngOnDestroy","removeControl","name","_control","_checkParentType","ngModelGroupException","controlParentException","addControl","Examples","_nAngularFormsSrcDirectivesError_examplesJs","FormErrorExamples","Error","formControlName","formGroupName","ngModelGroup","missingFormException","groupParentException","arrayParentException","formArrayName","console","warn","ListWrapper","_nAngularFormsSrcFacadeCollectionJs","cleanUpControl","setUpFormContainer","formDirectiveProvider","_validators","_asyncValidators","_submitted","directives","ngSubmit","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","dir","ctrl","get","push","getControl","remove","addFormGroup","removeFormGroup","getFormGroup","addFormArray","removeFormArray","getFormArray","value","onSubmit","$event","onReset","resetForm","undefined","reset","_this","forEach","newCtrl","_updateTreeValidity","_registerOnCollectionChange","_oldForm","sync","validator","compose","async","asyncValidator","composeAsync","host","(submit)","(reset)","_hasInvalidParent","formGroupNameProvider","formArrayNameProvider","ngOnInit","REQUIRED_VALIDATOR","multi","_required","_onChange","validate","c","required","registerOnValidatorChange","fn","[attr.required]","MIN_LENGTH_VALIDATOR","_createValidator","minlength","_validator","minLength","parseInt","[attr.minlength]","MAX_LENGTH_VALIDATOR","maxlength","maxLength","[attr.maxlength]","PATTERN_VALIDATOR","pattern","[attr.pattern]","NumberValueAccessor","_nAngularFormsSrcDirectivesNumber_value_accessorJs","RangeValueAccessor","_nAngularFormsSrcDirectivesRange_value_accessorJs","NgSelectMultipleOption","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","exports","Injectable","isPresent","_nAngularFormsSrcFacadeLangJs","group","controlsConfig","extra","controls","_reduceControls","formState","array","map","_createControl","keys","controlName","controlConfig","isArray","length","_nAngularFormsSrcDirectivesJs","RadioControlRegistry","ReactiveFormsModule","Wrapper_DefaultValueAccessor","p0","p1","_changed","context","import0","ngOnDetach","view","componentView","el","ngDoCheck","throwOnChange","changed","checkHost","handleEvent","eventName","result","pd_sub_0","onChange","target","pd_sub_1","onTouched","subscribe","_eventHandler","Wrapper_NgModel","p2","p3","_changes","_expr_0","import1","UNINITIALIZED","_expr_1","_expr_2","_expr_3","subscription0","unsubscribe","check_name","currValue","forceUpdate","import3","checkBinding","SimpleChange","check_isDisabled","check_model","check_options","options","emit0","bind","Wrapper_NgControlStatus","_expr_4","_expr_5","_expr_6","currVal_0","ngClassUntouched","renderer","setElementClass","currVal_1","ngClassTouched","currVal_2","ngClassPristine","currVal_3","ngClassDirty","currVal_4","ngClassValid","currVal_5","ngClassInvalid","currVal_6","ngClassPending","Wrapper_NgControlStatusGroup","apply","arguments","Subject","_nRxjsSubjectJs","Observable","_nRxjsObservableJs","isAsync","__isAsync","next","generatorOrNext","error","complete","schedulerFn","errorFn","err","completeFn","setTimeout","_find","delimiter","split","reduce","v","at","toObservable","r","isPromise","fromPromise","coerceToValidator","coerceToAsyncValidator","_nRxjsObservableFromPromiseJs","_nAngularFormsSrcPrivate_import_coreJs","VALID","INVALID","PENDING","DISABLED","_onCollectionChange","_pristine","_touched","_onDisabledChange","_value","_status","_errors","pristine","_valueChanges","_statusChanges","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","markAsTouched","_a","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsDirty","markAsPristine","_updatePristine","markAsPending","disable","_b","_updateValue","_updateAncestors","changeFn","enable","setParent","_setInitialStatus","enabled","_runValidator","_calculateStatus","_runAsyncValidator","_allControlsDisabled","_cancelExistingSubscription","obs","_asyncValidationSubscription","res","setErrors","errors","_updateControlsErrors","getError","errorCode","hasError","x","_initObservables","_anyControlsHaveStatus","status","_anyControls","_anyControlsDirty","dirty","_anyControlsTouched","touched","_isBoxedValue","_applyFormState","emitModelToViewChange","emitViewToModelChange","patchValue","condition","registerOnChange","_clearChangeFns","registerOnDisabledChange","cb","_setUpControls","registerControl","setControl","contains","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","k","_reduceValue","initValue","_i","index","_registerControl","insert","splice","removeAt","filter","some","i","resolvedPromise","Promise","resolve","then","container","_findContainer","pop","outputs","TemplateDrivenErrors","_nAngularFormsSrcDirectivesTemplate_driven_errorsJs","modelGroupProvider","modelGroupParentException","toPromise","PromiseCtor","root_1","root","Rx","config","reject","$__require","obj","isJsObject","Map","getSymbolIterator","a","b","comparator","iterator1","iterator2","item1","item2","done","iterator","item","StringMapWrapper","merge","m1","m2","m","_c","equals","k1","k2","key","removeAll","list","items","indexOf","flatten","flat","flatItem","concat","__core_private__","isEmptyInputValue","_convertToPromise","_executeValidators","_executeAsyncValidators","_mergeErrors","arrayOfErrors","OpaqueToken","_nRxjsOperatorToPromiseJs","requiredLength","actualLength","nullValidator","regex","regexStr","RegExp","toString","test","requiredPattern","actualValue","presentValidators","promises","all","ElementRef","Renderer","CHECKBOX_VALUE_ACCESSOR","_renderer","_elementRef","_","writeValue","setElementProperty","nativeElement","registerOnTouched","(change)","(blur)","DEFAULT_VALUE_ACCESSOR","normalizedValue","(input)","NUMBER_VALUE_ACCESSOR","parseFloat","Injector","RADIO_VALUE_ACCESSOR","_accessors","add","accessor","select","_isSameGroup","fireUncheck","controlPair","_registry","_injector","_checkName","_state","_fn","_throwNameError","RANGE_VALUE_ACCESSOR","_buildValueString","id","isPrimitive","slice","_extractId","valueString","looseIdentical","SELECT_VALUE_ACCESSOR","_optionMap","_idCounter","_getOptionId","_getOptionValue","_registerOption","from","has","_element","_select","set","_setElementValue","delete","ngValue","Zone","current","scheduleMicroTask","getPrototypeOf","STRING_MAP_PROTO","Date","isNaN","valueOf","token","overriddenName","newLineIndex","substring","o","log","global","parts","name_1","shift","_symbolIterator","globalScope","Symbol","getOwnPropertyNames","s","replace","window","WorkerGlobalScope","self","_global","assert","NumberWrapper","parseIntAutoRadix","text","isNumeric","SELECT_MULTIPLE_VALUE_ACCESSOR","HTMLCollection","values","ids","opt","_setSelected","selected","selectedOptions","val","_throwError","emitModelEvent","_noControlError","isBlank","message","messageEnd","join","normalizeValidator","normalizeAsyncValidator","change","isFirstChange","currentValue","BUILTIN_ACCESSORS","constructor","defaultAccessor","builtinAccessor","customAccessor","isBuiltInAccessor","_nAngularFormsSrcDirectivesNormalize_validatorJs","ngModelWithFormGroup","modelParentException","formGroupNameException","missingNameException","_registered","_checkForErrors","_updateDisabled","_isStandalone","_setUpStandalone","standalone","disabledValue","valid","invalid","pending","untouched","statusChanges","valueChanges","unimplemented","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","renderType_Subscribe_Host","View_Subscribe_Host0","SubscribeNgFactory","styles_Subscribe","renderType_Subscribe","View_Subscribe0","Wrapper_Subscribe","createRenderComponentType","import4","ViewEncapsulation","None","viewUtils","parentView","parentIndex","parentElement","import5","ViewType","HOST","import6","ChangeDetectorStatus","CheckAlways","createInternal","rootSelector","_el_0","selectOrCreateRenderHostElement","EMPTY_INLINE_ARRAY","compView_0","_Subscribe_0_3","create","init","directRenderer","import7","ComponentRef_","injectorGetInternal","requestNodeIndex","notFoundResult","detectChangesInternal","detectChanges","destroyInternal","destroy","visitRootNodesInternal","ctx","AppView","ComponentFactory","COMPONENT","_expr_19","parentRenderNode","createViewRoot","_text_0","createText","_el_1","createRenderElement","_text_2","_el_3","_text_4","_text_5","_el_6","_text_7","_el_8","_DefaultValueAccessor_8_3","import8","import11","_NG_VALUE_ACCESSOR_8_4","_NgModel_8_5","import9","_NgControl_8_6","_NgControlStatus_8_7","import10","_text_9","_el_10","_text_11","_text_12","_text_13","disposable_0","subscribeToRenderElement","InlineArray8","eventHandler","handleEvent_8","import12","import13","import14","import15","import16","currVal_8_1_0","address","currVal_19","inlineInterpolate","setText","markPathToRootAsCheckOnce","Component","template","SubscribeModuleNgFactory","SubscribeModuleInjector","__RadioControlRegistry_4","__ROUTES_5","_InternalFormsSharedModule_0","import2","_FormsModule_1","_RouterModule_2","ROUTER_FORROOT_GUARD","_SubscribeModule_3","getInternal","_RadioControlRegistry_4","ROUTES","_ROUTES_5","NgModuleInjector","NgModuleFactory"],"mappings":"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","file":"subscribe.min.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a {@link FormGroup} that\n * consists of {@link FormControl} objects, and mapping them onto the DOM. {@link FormControl}\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\n\n\nexport {AbstractControlDirective} from './directives/abstract_control_directive';\nexport {AbstractFormGroupDirective} from './directives/abstract_form_group_directive';\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlContainer} from './directives/control_container';\nexport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {Form} from './directives/form_interface';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName} from './directives/reactive_directives/form_group_name';\nexport {FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nexport {SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nexport {AsyncValidatorFn, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, Validator, ValidatorFn} from './directives/validators';\nexport {FormBuilder} from './form_builder';\nexport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\nexport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from './validators';\n\nexport * from './form_providers';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {Subscribe} from './subscribe';\n\n\nconst routes: Routes = [\n  {path: '', component: Subscribe},\n];\n\n@NgModule({\n  imports: [FormsModule, RouterModule.forChild(routes)],\n  declarations: [Subscribe]\n})\nexport class SubscribeModule {}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n\n/**\n * @whatItDoes Syncs a standalone {@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {@link FormControl} instance (view -> model).\n *\n * @howToUse\n *\n * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n * {@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n * it does not require that your {@link FormControl} instance be part of any parent\n * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {@link FormControl} instance. See a full list of available properties in\n * {@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n * or you can set it programmatically later using {@link AbstractControl.setValue} or\n * {@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n * {@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  @stable\n */\n\n\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n   form: FormControl;\n   model: any;\n   update = new EventEmitter();\n\n  \n  set isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n\n  constructor(   validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<Validator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n\n              get path(): string[] { return []; }\n\n              get validator(): ValidatorFn { return composeValidators(this._rawValidators); }\n\n              get asyncValidator(): AsyncValidatorFn {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n\n              get control(): FormControl { return this.form; }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n\n              private _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formControl', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n\n/**\n * @whatItDoes  Syncs a {@link FormControl} in an existing {@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {@link FormControl} instance (view -> model).\n *\n * @howToUse\n *\n * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {@link FormControl} instance you want to\n * link, and will look for a {@link FormControl} registered with that name in the\n * closest {@link FormGroup} or {@link FormArray} above it.\n *\n * **Access the control**: You can access the {@link FormControl} associated with\n * this directive by using the {@link AbstractControl.get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n * See a full list of available properties in {@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {@link FormControl}, or you can set it programmatically later using\n *  {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n * {@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {@link RadioControlValueAccessor}\n * * Selects: {@link SelectControlValueAccessor}\n *\n * **npm package**: `@angular/forms`\n *\n * **NgModule**: {@link ReactiveFormsModule}\n *\n *  @stable\n */\n\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\n  private _added = false;\n  /** @internal */\n  viewModel: any;\n  /** @internal */\n  _control: FormControl;\n\n   name: string;\n\n  // TODO(kara):  Replace ngModel with reactive API\n   model: any;\n   update = new EventEmitter();\n  \n  set isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n\n  constructor(\n         parent: ControlContainer,\n         validators: Array<Validator|ValidatorFn>,\n         asyncValidators:\n          Array<Validator|AsyncValidatorFn>,\n         valueAccessors: ControlValueAccessor[]) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n\n  viewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n  get validator(): ValidatorFn { return composeValidators(this._rawValidators); }\n\n  get asyncValidator(): AsyncValidatorFn {\n    return composeAsyncValidators(this._rawAsyncValidators);\n  }\n\n  get control(): FormControl { return this._control; }\n\n  private _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n\n  private _setUpControl() {\n    this._checkParentType();\n    this._control = this.formDirective.addControl(this);\n    if (this.control.disabled && this.valueAccessor.setDisabledState) {\n      this.valueAccessor.setDisabledState(true);\n    }\n    this._added = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControlName]', providers: [controlNameBinding]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formControlName', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FormErrorExamples as Examples} from './error_examples';\n\nexport class ReactiveErrors {\n  static controlParentException(): void {\n    throw new Error(\n        `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formControlName}`);\n  }\n\n  static ngModelGroupException(): void {\n    throw new Error(\n        `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${Examples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${Examples.ngModelGroup}`);\n  }\n  static missingFormException(): void {\n    throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${Examples.formControlName}`);\n  }\n\n  static groupParentException(): void {\n    throw new Error(\n        `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formGroupName}`);\n  }\n\n  static arrayParentException(): void {\n    throw new Error(\n        `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${Examples.formArrayName}`);\n  }\n\n  static disabledAttrWarning(): void {\n    console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {ListWrapper} from '../../facade/collection';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from '../shared';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n\n/**\n * @whatItDoes Binds an existing {@link FormGroup} to a DOM element.\n *\n * @howToUse\n *\n * This directive accepts an existing {@link FormGroup} instance. It will then use this\n * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n * and {@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n * re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `@angular/forms`\n *\n * **NgModule**: {@link ReactiveFormsModule}\n *\n *  @stable\n */\n\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\n  private _submitted: boolean = false;\n  private _oldForm: FormGroup;\n  directives: FormControlName[] = [];\n\n   form: FormGroup = null;\n   ngSubmit = new EventEmitter();\n\n  constructor(\n         private _validators: any[],\n         private _asyncValidators: any[]) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n    }\n  }\n\n  get submitted(): boolean { return this._submitted; }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  addControl(dir: FormControlName): FormControl {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  getControl(dir: FormControlName): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: FormControlName): void { ListWrapper.remove(this.directives, dir); }\n\n  addFormGroup(dir: FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormGroup(dir: FormGroupName): void {}\n\n  getFormGroup(dir: FormGroupName): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  addFormArray(dir: FormArrayName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormArray(dir: FormArrayName): void {}\n\n  getFormArray(dir: FormArrayName): FormArray { return <FormArray>this.form.get(dir.path); }\n\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrl  = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  onSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      const newCtrl: any = this.form.get(dir.path);\n      if (dir._control !== newCtrl) {\n        cleanUpControl(dir._control, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        dir._control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) this._oldForm._registerOnCollectionChange(() => {});\n    this._oldForm = this.form;\n  }\n\n  private _updateValidators() {\n    const sync = composeValidators(this._validators);\n    this.form.validator = Validators.compose([this.form.validator, sync]);\n\n    const async = composeAsyncValidators(this._asyncValidators);\n    this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n  }\n\n  private _checkFormPresent() {\n    if (!this.form) {\n      ReactiveErrors.missingFormException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formGroup', ] },],\n'ngSubmit': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n\n/**\n * @whatItDoes Syncs a nested {@link FormGroup} to a DOM element.\n *\n * @howToUse\n *\n * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {@link FormGroup} you want to link, and\n * will look for a {@link FormGroup} registered with that name in the parent\n * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {@link FormGroup} using the\n * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {@link FormGroup}, or you can set it programmatically later using\n * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n * {@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * @stable\n */\n\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n\n  constructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formGroupName]', providers: [formGroupNameProvider]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formGroupName', ] },],\n};\n}\n\nexport const formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n\n/**\n * @whatItDoes Syncs a nested {@link FormArray} to a DOM element.\n *\n * @howToUse\n *\n * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {@link FormArray} you want to link, and\n * will look for a {@link FormArray} registered with that name in the parent\n * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {@link FormArray} using the\n * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {@link FormArray}, or you can set the value programmatically later using the\n * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n * status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n * calling its {@link FormArray.push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * @stable\n */\n\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n   name: string;\n\n  constructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective.addFormArray(this);\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n\n  get control(): FormArray { return this.formDirective.getFormArray(this); }\n\n  get formDirective(): FormGroupDirective {\n    return this._parent ? <FormGroupDirective>this._parent.formDirective : null;\n  }\n\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  get validator(): ValidatorFn { return composeValidators(this._validators); }\n\n  get asyncValidator(): AsyncValidatorFn { return composeAsyncValidators(this._asyncValidators); }\n\n  private _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formArrayName]', providers: [formArrayNameProvider]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formArrayName', ] },],\n};\n}\n\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, Input, OnChanges, SimpleChanges, forwardRef} from '@angular/core';\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport interface Validator {\n  validate(c: AbstractControl): {[key: string]: any};\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\nexport const REQUIRED_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @stable\n */\n\nexport class RequiredValidator implements Validator {\n  private _required: boolean;\n  private _onChange: () => void;\n\n  \n  get required(): boolean /*| string*/ { return this._required; }\n\n  set required(value: boolean) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.required ? Validators.required(c) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n};\n}\n\n/**\n * @stable\n */\nexport interface ValidatorFn { (c: AbstractControl): {[key: string]: any}; }\n\n/**\n * @stable\n */\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): any /*Promise<{[key: string]: any}>|Observable<{[key: string]: any}>*/;\n}\n\n/**\n * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * @stable\n */\n\nexport class MinLengthValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void;\n\n   minlength: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.minlength == null ? null : this._validator(c);\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minlength': [{ type: Input },],\n};\n}\n\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n\n/**\n * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * @stable\n */\n\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void;\n\n   maxlength: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} {\n    return this.maxlength != null ? this._validator(c) : null;\n  }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxlength': [{ type: Input },],\n};\n}\n\n\nexport const PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n\n\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * @stable\n */\n\nexport class PatternValidator implements Validator,\n    OnChanges {\n  private _validator: ValidatorFn;\n  private _onChange: () => void;\n\n   pattern: string /*|RegExp*/;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n\n  registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n  private _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pattern': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Type} from '@angular/core';\n\nimport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nimport {DefaultValueAccessor} from './directives/default_value_accessor';\nimport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nimport {NgForm} from './directives/ng_form';\nimport {NgModel} from './directives/ng_model';\nimport {NgModelGroup} from './directives/ng_model_group';\nimport {NumberValueAccessor} from './directives/number_value_accessor';\nimport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nimport {RangeValueAccessor} from './directives/range_value_accessor';\nimport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nimport {FormControlName} from './directives/reactive_directives/form_control_name';\nimport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nimport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nimport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nimport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nimport {MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator} from './directives/validators';\n\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlValueAccessor} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {NumberValueAccessor} from './directives/number_value_accessor';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {RangeValueAccessor} from './directives/range_value_accessor';\nexport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nexport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nexport {MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator} from './directives/validators';\n\nexport const SHARED_FORM_DIRECTIVES: Type<any>[] = [\n  NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,\n  RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus,\n  NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator\n];\n\nexport const TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[] = [NgModel, NgModelGroup, NgForm];\n\nexport const REACTIVE_DRIVEN_DIRECTIVES: Type<any>[] =\n    [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\n\nexport class InternalFormsSharedModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: SHARED_FORM_DIRECTIVES,\n  exports: SHARED_FORM_DIRECTIVES,\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {isPresent} from './facade/lang';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n\n/**\n * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * @howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `@angular/forms`\n *\n *  * **NgModule**: {@link ReactiveFormsModule}\n *\n * @stable\n */\n\nexport class FormBuilder {\n  /**\n   * Construct a new {@link FormGroup} with the given map of configuration.\n   * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n   *\n   * See the {@link FormGroup} constructor for more details.\n   */\n  group(controlsConfig: {[key: string]: any}, extra: {[key: string]: any} = null): FormGroup {\n    const controls = this._reduceControls(controlsConfig);\n    const validator: ValidatorFn = isPresent(extra) ? extra['validator'] : null;\n    const asyncValidator: AsyncValidatorFn = isPresent(extra) ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n  /**\n   * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n   * `asyncValidator`.\n   *\n   * `formState` can either be a standalone value for the form control or an object\n   * that contains both a value and a disabled status.\n   *\n   */\n  control(\n      formState: Object, validator: ValidatorFn|ValidatorFn[] = null,\n      asyncValidator: AsyncValidatorFn|AsyncValidatorFn[] = null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n\n  /**\n   * Construct a {@link FormArray} from the given `controlsConfig` array of\n   * configuration, with the given optional `validator` and `asyncValidator`.\n   */\n  array(\n      controlsConfig: any[], validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null): FormArray {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const value = controlConfig[0];\n      const validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES} from './directives';\nimport {RadioControlRegistry} from './directives/radio_control_value_accessor';\nimport {FormBuilder} from './form_builder';\n\n\n/**\n * The ng module for forms.\n * @stable\n */\n\nexport class FormsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  providers: [RadioControlRegistry],\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n/**\n * The ng module for reactive forms.\n * @stable\n */\n\nexport class ReactiveFormsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  providers: [FormBuilder, RadioControlRegistry],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from '@angular/forms/src/directives/default_value_accessor';\nimport * as import1 from '@angular/core/src/linker/view';\nexport class Wrapper_DefaultValueAccessor {\n  /*private*/ _eventHandler:Function;\n  context:import0.DefaultValueAccessor;\n  /*private*/ _changed:boolean;\n  constructor(p0:any,p1:any) {\n    this._changed = false;\n    this.context = new import0.DefaultValueAccessor(p0,p1);\n  }\n  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {\n  }\n  ngOnDestroy():void {\n  }\n  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {\n    var changed:any = this._changed;\n    this._changed = false;\n    return changed;\n  }\n  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {\n  }\n  handleEvent(eventName:string,$event:any):boolean {\n    var result:boolean = true;\n    if ((eventName == 'input')) {\n      const pd_sub_0:any = ((<any>this.context.onChange($event.target.value)) !== false);\n      result = (pd_sub_0 && result);\n    }\n    if ((eventName == 'blur')) {\n      const pd_sub_1:any = ((<any>this.context.onTouched()) !== false);\n      result = (pd_sub_1 && result);\n    }\n    return result;\n  }\n  subscribe(view:import1.AppView<any>,_eventHandler:any):void {\n    this._eventHandler = _eventHandler;\n  }\n}","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from '@angular/forms/src/directives/ng_model';\nimport * as import1 from '@angular/core/src/change_detection/change_detection';\nimport * as import2 from '@angular/core/src/linker/view';\nimport * as import3 from '@angular/core/src/linker/view_utils';\nexport class Wrapper_NgModel {\n  /*private*/ _eventHandler:Function;\n  context:import0.NgModel;\n  /*private*/ _changed:boolean;\n  /*private*/ _changes:{[key: string]:any};\n  /*private*/ _expr_0:any;\n  /*private*/ _expr_1:any;\n  /*private*/ _expr_2:any;\n  /*private*/ _expr_3:any;\n  subscription0:any;\n  constructor(p0:any,p1:any,p2:any,p3:any) {\n    this._changed = false;\n    this._changes = {};\n    this.context = new import0.NgModel(p0,p1,p2,p3);\n    this._expr_0 = import1.UNINITIALIZED;\n    this._expr_1 = import1.UNINITIALIZED;\n    this._expr_2 = import1.UNINITIALIZED;\n    this._expr_3 = import1.UNINITIALIZED;\n  }\n  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {\n  }\n  ngOnDestroy():void {\n    this.context.ngOnDestroy();\n    (this.subscription0 && this.subscription0.unsubscribe());\n  }\n  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {\n    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {\n      this._changed = true;\n      this.context.name = currValue;\n      this._changes['name'] = new import1.SimpleChange(this._expr_0,currValue);\n      this._expr_0 = currValue;\n    }\n  }\n  check_isDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {\n    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {\n      this._changed = true;\n      this.context.isDisabled = currValue;\n      this._changes['isDisabled'] = new import1.SimpleChange(this._expr_1,currValue);\n      this._expr_1 = currValue;\n    }\n  }\n  check_model(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {\n    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {\n      this._changed = true;\n      this.context.model = currValue;\n      this._changes['model'] = new import1.SimpleChange(this._expr_2,currValue);\n      this._expr_2 = currValue;\n    }\n  }\n  check_options(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {\n    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {\n      this._changed = true;\n      this.context.options = currValue;\n      this._changes['options'] = new import1.SimpleChange(this._expr_3,currValue);\n      this._expr_3 = currValue;\n    }\n  }\n  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {\n    var changed:any = this._changed;\n    this._changed = false;\n    if (!throwOnChange) { if (changed) {\n      this.context.ngOnChanges(this._changes);\n      this._changes = {};\n    } }\n    return changed;\n  }\n  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {\n  }\n  handleEvent(eventName:string,$event:any):boolean {\n    var result:boolean = true;\n    return result;\n  }\n  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {\n    this._eventHandler = _eventHandler;\n    if (emit0) { (this.subscription0 = this.context.update.subscribe(_eventHandler.bind(view,'ngModelChange'))); }\n  }\n}","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from '@angular/forms/src/directives/ng_control_status';\nimport * as import1 from '@angular/core/src/change_detection/change_detection';\nimport * as import2 from '@angular/core/src/linker/view';\nimport * as import3 from '@angular/core/src/linker/view_utils';\nexport class Wrapper_NgControlStatus {\n  /*private*/ _eventHandler:Function;\n  context:import0.NgControlStatus;\n  /*private*/ _changed:boolean;\n  /*private*/ _expr_0:any;\n  /*private*/ _expr_1:any;\n  /*private*/ _expr_2:any;\n  /*private*/ _expr_3:any;\n  /*private*/ _expr_4:any;\n  /*private*/ _expr_5:any;\n  /*private*/ _expr_6:any;\n  constructor(p0:any) {\n    this._changed = false;\n    this.context = new import0.NgControlStatus(p0);\n    this._expr_0 = import1.UNINITIALIZED;\n    this._expr_1 = import1.UNINITIALIZED;\n    this._expr_2 = import1.UNINITIALIZED;\n    this._expr_3 = import1.UNINITIALIZED;\n    this._expr_4 = import1.UNINITIALIZED;\n    this._expr_5 = import1.UNINITIALIZED;\n    this._expr_6 = import1.UNINITIALIZED;\n  }\n  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {\n  }\n  ngOnDestroy():void {\n  }\n  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {\n    var changed:any = this._changed;\n    this._changed = false;\n    return changed;\n  }\n  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {\n    const currVal_0:any = this.context.ngClassUntouched;\n    if (import3.checkBinding(throwOnChange,this._expr_0,currVal_0)) {\n      view.renderer.setElementClass(el,'ng-untouched',currVal_0);\n      this._expr_0 = currVal_0;\n    }\n    const currVal_1:any = this.context.ngClassTouched;\n    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {\n      view.renderer.setElementClass(el,'ng-touched',currVal_1);\n      this._expr_1 = currVal_1;\n    }\n    const currVal_2:any = this.context.ngClassPristine;\n    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {\n      view.renderer.setElementClass(el,'ng-pristine',currVal_2);\n      this._expr_2 = currVal_2;\n    }\n    const currVal_3:any = this.context.ngClassDirty;\n    if (import3.checkBinding(throwOnChange,this._expr_3,currVal_3)) {\n      view.renderer.setElementClass(el,'ng-dirty',currVal_3);\n      this._expr_3 = currVal_3;\n    }\n    const currVal_4:any = this.context.ngClassValid;\n    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {\n      view.renderer.setElementClass(el,'ng-valid',currVal_4);\n      this._expr_4 = currVal_4;\n    }\n    const currVal_5:any = this.context.ngClassInvalid;\n    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {\n      view.renderer.setElementClass(el,'ng-invalid',currVal_5);\n      this._expr_5 = currVal_5;\n    }\n    const currVal_6:any = this.context.ngClassPending;\n    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {\n      view.renderer.setElementClass(el,'ng-pending',currVal_6);\n      this._expr_6 = currVal_6;\n    }\n  }\n  handleEvent(eventName:string,$event:any):boolean {\n    var result:boolean = true;\n    return result;\n  }\n  subscribe(view:import2.AppView<any>,_eventHandler:any):void {\n    this._eventHandler = _eventHandler;\n  }\n}\nexport class Wrapper_NgControlStatusGroup {\n  /*private*/ _eventHandler:Function;\n  context:import0.NgControlStatusGroup;\n  /*private*/ _changed:boolean;\n  /*private*/ _expr_0:any;\n  /*private*/ _expr_1:any;\n  /*private*/ _expr_2:any;\n  /*private*/ _expr_3:any;\n  /*private*/ _expr_4:any;\n  /*private*/ _expr_5:any;\n  /*private*/ _expr_6:any;\n  constructor(p0:any) {\n    this._changed = false;\n    this.context = new import0.NgControlStatusGroup(p0);\n    this._expr_0 = import1.UNINITIALIZED;\n    this._expr_1 = import1.UNINITIALIZED;\n    this._expr_2 = import1.UNINITIALIZED;\n    this._expr_3 = import1.UNINITIALIZED;\n    this._expr_4 = import1.UNINITIALIZED;\n    this._expr_5 = import1.UNINITIALIZED;\n    this._expr_6 = import1.UNINITIALIZED;\n  }\n  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {\n  }\n  ngOnDestroy():void {\n  }\n  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {\n    var changed:any = this._changed;\n    this._changed = false;\n    return changed;\n  }\n  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {\n    const currVal_0:any = this.context.ngClassUntouched;\n    if (import3.checkBinding(throwOnChange,this._expr_0,currVal_0)) {\n      view.renderer.setElementClass(el,'ng-untouched',currVal_0);\n      this._expr_0 = currVal_0;\n    }\n    const currVal_1:any = this.context.ngClassTouched;\n    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {\n      view.renderer.setElementClass(el,'ng-touched',currVal_1);\n      this._expr_1 = currVal_1;\n    }\n    const currVal_2:any = this.context.ngClassPristine;\n    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {\n      view.renderer.setElementClass(el,'ng-pristine',currVal_2);\n      this._expr_2 = currVal_2;\n    }\n    const currVal_3:any = this.context.ngClassDirty;\n    if (import3.checkBinding(throwOnChange,this._expr_3,currVal_3)) {\n      view.renderer.setElementClass(el,'ng-dirty',currVal_3);\n      this._expr_3 = currVal_3;\n    }\n    const currVal_4:any = this.context.ngClassValid;\n    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {\n      view.renderer.setElementClass(el,'ng-valid',currVal_4);\n      this._expr_4 = currVal_4;\n    }\n    const currVal_5:any = this.context.ngClassInvalid;\n    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {\n      view.renderer.setElementClass(el,'ng-invalid',currVal_5);\n      this._expr_5 = currVal_5;\n    }\n    const currVal_6:any = this.context.ngClassPending;\n    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {\n      view.renderer.setElementClass(el,'ng-pending',currVal_6);\n      this._expr_6 = currVal_6;\n    }\n  }\n  handleEvent(eventName:string,$event:any):boolean {\n    var result:boolean = true;\n    return result;\n  }\n  subscribe(view:import2.AppView<any>,_eventHandler:any):void {\n    this._eventHandler = _eventHandler;\n  }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OnDestroy, OnInit} from '@angular/core';\n\nimport {FormGroup} from '../model';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {composeAsyncValidators, composeValidators, controlPath} from './shared';\nimport {AsyncValidatorFn, ValidatorFn} from './validators';\n\n\n\n/**\n * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n *\n * @stable\n */\nexport class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n  ngOnInit(): void {\n    this._checkParentType();\n    this.formDirective.addFormGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormGroup(this);\n    }\n  }\n\n  /**\n   * Get the {@link FormGroup} backing this binding.\n   */\n  get control(): FormGroup { return this.formDirective.getFormGroup(this); }\n\n  /**\n   * Get the path to this control group.\n   */\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  /**\n   * Get the {@link Form} to which this group belongs.\n   */\n  get formDirective(): Form { return this._parent ? this._parent.formDirective : null; }\n\n  get validator(): ValidatorFn { return composeValidators(this._validators); }\n\n  get asyncValidator(): AsyncValidatorFn { return composeAsyncValidators(this._asyncValidators); }\n\n  /** @internal */\n  _checkParentType(): void {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs/Subject';\n\nexport {Observable} from 'rxjs/Observable';\nexport {Subject} from 'rxjs/Subject';\n\n/**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n * @stable\n */\nexport class EventEmitter<T> extends Subject<T> {\n  // TODO: mark this as internal once all the facades are gone\n  // we can't mark it as internal now because EventEmitter exported via @angular/core would not\n  // contain this property making it incompatible with all the code that uses EventEmitter via\n  // facades, which are local to the code and do not have this property stripped.\n  // tslint:disable-next-line\n  __isAsync: boolean;\n\n  /**\n   * Creates an instance of [EventEmitter], which depending on [isAsync],\n   * delivers events synchronously or asynchronously.\n   */\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  emit(value?: T) { super.next(value); }\n\n  subscribe(generatorOrNext?: any, error?: any, complete?: any): any {\n    let schedulerFn: (t: any) => any;\n    let errorFn = (err: any): any => null;\n    let completeFn = (): any => null;\n\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : (value: any) => { generatorOrNext.next(value); };\n\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                                   (err) => { generatorOrNext.error(err); };\n      }\n\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                                      () => { generatorOrNext.complete(); };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => { setTimeout(() => generatorOrNext(value)); } :\n                                     (value: any) => { generatorOrNext(value); };\n\n      if (error) {\n        errorFn =\n            this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n      }\n\n      if (complete) {\n        completeFn =\n            this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n      }\n    }\n\n    return super.subscribe(schedulerFn, errorFn, completeFn);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {fromPromise} from 'rxjs/observable/fromPromise';\n\nimport {composeAsyncValidators, composeValidators} from './directives/shared';\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {EventEmitter, Observable} from './facade/async';\nimport {isPromise} from './private_import_core';\n\n\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nexport const VALID = 'VALID';\n\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nexport const INVALID = 'INVALID';\n\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const PENDING = 'PENDING';\n\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nexport const DISABLED = 'DISABLED';\n\nexport function isControl(control: Object): boolean {\n  return control instanceof AbstractControl;\n}\n\nfunction _find(control: AbstractControl, path: Array<string|number>| string, delimiter: string) {\n  if (path == null) return null;\n\n  if (!(path instanceof Array)) {\n    path = (<string>path).split(delimiter);\n  }\n  if (path instanceof Array && (path.length === 0)) return null;\n\n  return (<Array<string|number>>path).reduce((v, name) => {\n    if (v instanceof FormGroup) {\n      return v.controls[name] || null;\n    }\n\n    if (v instanceof FormArray) {\n      return v.at(<number>name) || null;\n    }\n\n    return null;\n  }, control);\n}\n\nfunction toObservable(r: any): Observable<any> {\n  return isPromise(r) ? fromPromise(r) : r;\n}\n\nfunction coerceToValidator(validator: ValidatorFn | ValidatorFn[]): ValidatorFn {\n  return Array.isArray(validator) ? composeValidators(validator) : validator;\n}\n\nfunction coerceToAsyncValidator(asyncValidator: AsyncValidatorFn | AsyncValidatorFn[]):\n    AsyncValidatorFn {\n  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n}\n\n/**\n * @whatItDoes This is the base class for {@link FormControl}, {@link FormGroup}, and\n * {@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @stable\n */\nexport abstract class AbstractControl {\n  /** @internal */\n  _value: any;\n  /** @internal */\n  _onCollectionChange = () => {};\n\n  private _valueChanges: EventEmitter<any>;\n  private _statusChanges: EventEmitter<any>;\n  private _status: string;\n  private _errors: {[key: string]: any};\n  private _pristine: boolean = true;\n  private _touched: boolean = false;\n  private _parent: FormGroup|FormArray;\n  private _asyncValidationSubscription: any;\n\n  constructor(public validator: ValidatorFn, public asyncValidator: AsyncValidatorFn) {}\n\n  /**\n   * The value of the control.\n   */\n  get value(): any { return this._value; }\n\n  /**\n   * The parent control.\n   */\n  get parent(): FormGroup|FormArray { return this._parent; }\n\n  /**\n   * The validation status of the control. There are four possible\n   * validation statuses:\n   *\n   * * **VALID**:  control has passed all validation checks\n   * * **INVALID**: control has failed at least one validation check\n   * * **PENDING**: control is in the midst of conducting a validation check\n   * * **DISABLED**: control is exempt from validation checks\n   *\n   * These statuses are mutually exclusive, so a control cannot be\n   * both valid AND invalid or invalid AND disabled.\n   */\n  get status(): string { return this._status; }\n\n  /**\n   * A control is `valid` when its `status === VALID`.\n   *\n   * In order to have this status, the control must have passed all its\n   * validation checks.\n   */\n  get valid(): boolean { return this._status === VALID; }\n\n  /**\n   * A control is `invalid` when its `status === INVALID`.\n   *\n   * In order to have this status, the control must have failed\n   * at least one of its validation checks.\n   */\n  get invalid(): boolean { return this._status === INVALID; }\n\n  /**\n   * A control is `pending` when its `status === PENDING`.\n   *\n   * In order to have this status, the control must be in the\n   * middle of conducting a validation check.\n   */\n  get pending(): boolean { return this._status == PENDING; }\n\n  /**\n   * A control is `disabled` when its `status === DISABLED`.\n   *\n   * Disabled controls are exempt from validation checks and\n   * are not included in the aggregate value of their ancestor\n   * controls.\n   */\n  get disabled(): boolean { return this._status === DISABLED; }\n\n  /**\n   * A control is `enabled` as long as its `status !== DISABLED`.\n   *\n   * In other words, it has a status of `VALID`, `INVALID`, or\n   * `PENDING`.\n   */\n  get enabled(): boolean { return this._status !== DISABLED; }\n\n  /**\n   * Returns any errors generated by failing validation. If there\n   * are no errors, it will return null.\n   */\n  get errors(): {[key: string]: any} { return this._errors; }\n\n  /**\n   * A control is `pristine` if the user has not yet changed\n   * the value in the UI.\n   *\n   * Note that programmatic changes to a control's value will\n   * *not* mark it dirty.\n   */\n  get pristine(): boolean { return this._pristine; }\n\n  /**\n   * A control is `dirty` if the user has changed the value\n   * in the UI.\n   *\n   * Note that programmatic changes to a control's value will\n   * *not* mark it dirty.\n   */\n  get dirty(): boolean { return !this.pristine; }\n\n  /**\n  * A control is marked `touched` once the user has triggered\n  * a `blur` event on it.\n  */\n  get touched(): boolean { return this._touched; }\n\n  /**\n   * A control is `untouched` if the user has not yet triggered\n   * a `blur` event on it.\n   */\n  get untouched(): boolean { return !this._touched; }\n\n  /**\n   * Emits an event every time the value of the control changes, in\n   * the UI or programmatically.\n   */\n  get valueChanges(): Observable<any> { return this._valueChanges; }\n\n  /**\n   * Emits an event every time the validation status of the control\n   * is re-calculated.\n   */\n  get statusChanges(): Observable<any> { return this._statusChanges; }\n\n  /**\n   * Sets the synchronous validators that are active on this control.  Calling\n   * this will overwrite any existing sync validators.\n   */\n  setValidators(newValidator: ValidatorFn|ValidatorFn[]): void {\n    this.validator = coerceToValidator(newValidator);\n  }\n\n  /**\n   * Sets the async validators that are active on this control. Calling this\n   * will overwrite any existing async validators.\n   */\n  setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]): void {\n    this.asyncValidator = coerceToAsyncValidator(newValidator);\n  }\n\n  /**\n   * Empties out the sync validator list.\n   */\n  clearValidators(): void { this.validator = null; }\n\n  /**\n   * Empties out the async validator list.\n   */\n  clearAsyncValidators(): void { this.asyncValidator = null; }\n\n  /**\n   * Marks the control as `touched`.\n   *\n   * This will also mark all direct ancestors as `touched` to maintain\n   * the model.\n   */\n  markAsTouched({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._touched = true;\n\n    if (this._parent && !onlySelf) {\n      this._parent.markAsTouched({onlySelf});\n    }\n  }\n\n  /**\n   * Marks the control as `untouched`.\n   *\n   * If the control has any children, it will also mark all children as `untouched`\n   * to maintain the model, and re-calculate the `touched` status of all parent\n   * controls.\n   */\n  markAsUntouched({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._touched = false;\n\n    this._forEachChild(\n        (control: AbstractControl) => { control.markAsUntouched({onlySelf: true}); });\n\n    if (this._parent && !onlySelf) {\n      this._parent._updateTouched({onlySelf});\n    }\n  }\n\n  /**\n   * Marks the control as `dirty`.\n   *\n   * This will also mark all direct ancestors as `dirty` to maintain\n   * the model.\n   */\n  markAsDirty({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._pristine = false;\n\n    if (this._parent && !onlySelf) {\n      this._parent.markAsDirty({onlySelf});\n    }\n  }\n\n  /**\n   * Marks the control as `pristine`.\n   *\n   * If the control has any children, it will also mark all children as `pristine`\n   * to maintain the model, and re-calculate the `pristine` status of all parent\n   * controls.\n   */\n  markAsPristine({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._pristine = true;\n\n    this._forEachChild((control: AbstractControl) => { control.markAsPristine({onlySelf: true}); });\n\n    if (this._parent && !onlySelf) {\n      this._parent._updatePristine({onlySelf});\n    }\n  }\n\n  /**\n   * Marks the control as `pending`.\n   */\n  markAsPending({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._status = PENDING;\n\n    if (this._parent && !onlySelf) {\n      this._parent.markAsPending({onlySelf});\n    }\n  }\n\n  /**\n   * Disables the control. This means the control will be exempt from validation checks and\n   * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n   *\n   * If the control has children, all children will be disabled to maintain the model.\n   */\n  disable({onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = DISABLED;\n    this._errors = null;\n    this._forEachChild((control: AbstractControl) => { control.disable({onlySelf: true}); });\n    this._updateValue();\n\n    if (emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    this._updateAncestors(onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(true));\n  }\n\n  /**\n   * Enables the control. This means the control will be included in validation checks and\n   * the aggregate value of its parent. Its status is re-calculated based on its value and\n   * its validators.\n   *\n   * If the control has children, all children will be enabled.\n   */\n  enable({onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = VALID;\n    this._forEachChild((control: AbstractControl) => { control.enable({onlySelf: true}); });\n    this.updateValueAndValidity({onlySelf: true, emitEvent});\n\n    this._updateAncestors(onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(false));\n  }\n\n  private _updateAncestors(onlySelf: boolean) {\n    if (this._parent && !onlySelf) {\n      this._parent.updateValueAndValidity();\n      this._parent._updatePristine();\n      this._parent._updateTouched();\n    }\n  }\n\n  setParent(parent: FormGroup|FormArray): void { this._parent = parent; }\n\n  /**\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract setValue(value: any, options?: Object): void;\n\n  /**\n   * Patches the value of the control. Abstract method (implemented in sub-classes).\n   */\n  abstract patchValue(value: any, options?: Object): void;\n\n  /**\n   * Resets the control. Abstract method (implemented in sub-classes).\n   */\n  abstract reset(value?: any, options?: Object): void;\n\n  /**\n   * Re-calculates the value and validation status of the control.\n   *\n   * By default, it will also update the value and validity of its ancestors.\n   */\n  updateValueAndValidity({onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._setInitialStatus();\n    this._updateValue();\n\n    if (this.enabled) {\n      this._errors = this._runValidator();\n      this._status = this._calculateStatus();\n\n      if (this._status === VALID || this._status === PENDING) {\n        this._runAsyncValidator(emitEvent);\n      }\n    }\n\n    if (emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent && !onlySelf) {\n      this._parent.updateValueAndValidity({onlySelf, emitEvent});\n    }\n  }\n\n  /** @internal */\n  _updateTreeValidity({emitEvent}: {emitEvent?: boolean} = {emitEvent: true}) {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity({emitEvent}));\n    this.updateValueAndValidity({onlySelf: true, emitEvent});\n  }\n\n  private _setInitialStatus() { this._status = this._allControlsDisabled() ? DISABLED : VALID; }\n\n  private _runValidator(): {[key: string]: any} {\n    return this.validator ? this.validator(this) : null;\n  }\n\n  private _runAsyncValidator(emitEvent: boolean): void {\n    if (this.asyncValidator) {\n      this._status = PENDING;\n      this._cancelExistingSubscription();\n      const obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription =\n          obs.subscribe({next: (res: {[key: string]: any}) => this.setErrors(res, {emitEvent})});\n    }\n  }\n\n  private _cancelExistingSubscription(): void {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Sets errors on a form control.\n   *\n   * This is used when validations are run manually by the user, rather than automatically.\n   *\n   * Calling `setErrors` will also update the validity of the parent control.\n   *\n   * ### Example\n   *\n   * ```\n   * const login = new FormControl(\"someLogin\");\n   * login.setErrors({\n   *   \"notUnique\": true\n   * });\n   *\n   * expect(login.valid).toEqual(false);\n   * expect(login.errors).toEqual({\"notUnique\": true});\n   *\n   * login.setValue(\"someOtherLogin\");\n   *\n   * expect(login.valid).toEqual(true);\n   * ```\n   */\n  setErrors(errors: {[key: string]: any}, {emitEvent}: {emitEvent?: boolean} = {}): void {\n    this._errors = errors;\n    this._updateControlsErrors(emitEvent !== false);\n  }\n\n  /**\n   * Retrieves a child control given the control's name or path.\n   *\n   * Paths can be passed in as an array or a string delimited by a dot.\n   *\n   * To get a control nested within a `person` sub-group:\n   *\n   * * `this.form.get('person.name');`\n   *\n   * -OR-\n   *\n   * * `this.form.get(['person', 'name']);`\n   */\n  get(path: Array<string|number>|string): AbstractControl { return _find(this, path, '.'); }\n\n  /**\n   * Returns true if the control with the given path has the error specified. Otherwise\n   * returns null or undefined.\n   *\n   * If no path is given, it checks for the error on the present control.\n   */\n  getError(errorCode: string, path: string[] = null): any {\n    const control = path ? this.get(path) : this;\n    return control && control._errors ? control._errors[errorCode] : null;\n  }\n\n  /**\n   * Returns true if the control with the given path has the error specified. Otherwise\n   * returns false.\n   *\n   * If no path is given, it checks for the error on the present control.\n   */\n  hasError(errorCode: string, path: string[] = null): boolean {\n    return !!this.getError(errorCode, path);\n  }\n\n  /**\n   * Retrieves the top-level ancestor of this control.\n   */\n  get root(): AbstractControl {\n    let x: AbstractControl = this;\n\n    while (x._parent) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n\n  /** @internal */\n  _updateControlsErrors(emitEvent: boolean): void {\n    this._status = this._calculateStatus();\n\n    if (emitEvent) {\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent);\n    }\n  }\n\n  /** @internal */\n  _initObservables() {\n    this._valueChanges = new EventEmitter();\n    this._statusChanges = new EventEmitter();\n  }\n\n\n  private _calculateStatus(): string {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this._errors) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _forEachChild(cb: Function): void;\n\n  /** @internal */\n  abstract _anyControls(condition: Function): boolean;\n\n  /** @internal */\n  abstract _allControlsDisabled(): boolean;\n\n  /** @internal */\n  _anyControlsHaveStatus(status: string): boolean {\n    return this._anyControls((control: AbstractControl) => control.status === status);\n  }\n\n  /** @internal */\n  _anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n\n  /** @internal */\n  _anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n\n  /** @internal */\n  _updatePristine({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._pristine = !this._anyControlsDirty();\n\n    if (this._parent && !onlySelf) {\n      this._parent._updatePristine({onlySelf});\n    }\n  }\n\n  /** @internal */\n  _updateTouched({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._touched = this._anyControlsTouched();\n\n    if (this._parent && !onlySelf) {\n      this._parent._updateTouched({onlySelf});\n    }\n  }\n\n  /** @internal */\n  _onDisabledChange: Function[] = [];\n\n  /** @internal */\n  _isBoxedValue(formState: any): boolean {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n  }\n\n  /** @internal */\n  _registerOnCollectionChange(fn: () => void): void { this._onCollectionChange = fn; }\n}\n\n/**\n * @whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {@link FormGroup} and {@link FormArray}.\n *\n * @howToUse\n *\n * When instantiating a {@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n *```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * To include a sync validator (or an array of sync validators) with the control,\n * pass it in as the second argument. Async validators are also supported, but\n * have to be passed in separately as the third arg.\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * See its superclass, {@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `@angular/forms`\n *\n * @stable\n */\nexport class FormControl extends AbstractControl {\n  /** @internal */\n  _onChange: Function[] = [];\n\n  constructor(\n      formState: any = null, validator: ValidatorFn|ValidatorFn[] = null,\n      asyncValidator: AsyncValidatorFn|AsyncValidatorFn[] = null) {\n    super(coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n    this._applyFormState(formState);\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n\n  /**\n   * Set the value of the form control to `value`.\n   *\n   * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n   * and not its parent component. This defaults to false.\n   *\n   * If `emitEvent` is `true`, this\n   * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n   * to true (as it falls through to `updateValueAndValidity`).\n   *\n   * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n   * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n   * specified.\n   *\n   * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n   * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n   */\n  setValue(value: any, {onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange}: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this._value = value;\n    if (this._onChange.length && emitModelToViewChange !== false) {\n      this._onChange.forEach((changeFn) => changeFn(this._value, emitViewToModelChange !== false));\n    }\n    this.updateValueAndValidity({onlySelf, emitEvent});\n  }\n\n  /**\n   * Patches the value of a control.\n   *\n   * This function is functionally the same as {@link FormControl.setValue} at this level.\n   * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n   * where it does behave differently.\n   */\n  patchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this.setValue(value, options);\n  }\n\n  /**\n   * Resets the form control. This means by default:\n   *\n   * * it is marked as `pristine`\n   * * it is marked as `untouched`\n   * * value is set to null\n   *\n   * You can also reset to a specific form state by passing through a standalone\n   * value or a form state object that contains both a value and a disabled state\n   * (these are the only two properties that cannot be calculated).\n   *\n   * Ex:\n   *\n   * ```ts\n   * this.control.reset('Nancy');\n   *\n   * console.log(this.control.value);  // 'Nancy'\n   * ```\n   *\n   * OR\n   *\n   * ```\n   * this.control.reset({value: 'Nancy', disabled: true});\n   *\n   * console.log(this.control.value);  // 'Nancy'\n   * console.log(this.control.status);  // 'DISABLED'\n   * ```\n   */\n  reset(formState: any = null, {onlySelf, emitEvent}: {onlySelf?: boolean,\n                                                       emitEvent?: boolean} = {}): void {\n    this._applyFormState(formState);\n    this.markAsPristine({onlySelf});\n    this.markAsUntouched({onlySelf});\n    this.setValue(this._value, {onlySelf, emitEvent});\n  }\n\n  /**\n   * @internal\n   */\n  _updateValue() {}\n\n  /**\n   * @internal\n   */\n  _anyControls(condition: Function): boolean { return false; }\n\n  /**\n   * @internal\n   */\n  _allControlsDisabled(): boolean { return this.disabled; }\n\n  /**\n   * Register a listener for change events.\n   */\n  registerOnChange(fn: Function): void { this._onChange.push(fn); }\n\n  /**\n   * @internal\n   */\n  _clearChangeFns(): void {\n    this._onChange = [];\n    this._onDisabledChange = [];\n    this._onCollectionChange = () => {};\n  }\n\n  /**\n   * Register a listener for disabled events.\n   */\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    this._onDisabledChange.push(fn);\n  }\n\n  /**\n   * @internal\n   */\n  _forEachChild(cb: Function): void {}\n\n  private _applyFormState(formState: any) {\n    if (this._isBoxedValue(formState)) {\n      this._value = formState.value;\n      formState.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\n                           this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      this._value = formState;\n    }\n  }\n}\n\n/**\n * @whatItDoes Tracks the value and validity state of a group of {@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link FormControl} and {@link FormArray}.\n *\n * @howToUse\n *\n * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * * **npm package**: `@angular/forms`\n *\n * @stable\n */\nexport class FormGroup extends AbstractControl {\n  constructor(\n      public controls: {[key: string]: AbstractControl}, validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._initObservables();\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Registers a control with the group's list of controls.\n   *\n   * This method does not update value or validity of the control, so for\n   * most cases you'll want to use {@link FormGroup.addControl} instead.\n   */\n  registerControl(name: string, control: AbstractControl): AbstractControl {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n\n  /**\n   * Add a control to this group.\n   */\n  addControl(name: string, control: AbstractControl): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Remove a control from this group.\n   */\n  removeControl(name: string): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Replace an existing control.\n   */\n  setControl(name: string, control: AbstractControl): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Check whether there is an enabled control with the given name in the group.\n   *\n   * It will return false for disabled controls. If you'd like to check for\n   * existence in the group only, use {@link AbstractControl.get} instead.\n   */\n  contains(controlName: string): boolean {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n\n  /**\n   *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n   *  the structure of the group, with control names as keys.\n   *\n   * This method performs strict checks, so it will throw an error if you try\n   * to set the value of a control that doesn't exist or if you exclude the\n   * value of a control.\n   *\n   *  ### Example\n   *\n   *  ```\n   *  const form = new FormGroup({\n   *     first: new FormControl(),\n   *     last: new FormControl()\n   *  });\n   *  console.log(form.value);   // {first: null, last: null}\n   *\n   *  form.setValue({first: 'Nancy', last: 'Drew'});\n   *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n   *\n   *  ```\n   */\n  setValue(\n      value: {[key: string]: any},\n      {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    Object.keys(value).forEach(name => {\n      this._throwIfControlMissing(name);\n      this.controls[name].setValue(value[name], {onlySelf: true, emitEvent});\n    });\n    this.updateValueAndValidity({onlySelf, emitEvent});\n  }\n\n  /**\n   *  Patches the value of the {@link FormGroup}. It accepts an object with control\n   *  names as keys, and will do its best to match the values to the correct controls\n   *  in the group.\n   *\n   *  It accepts both super-sets and sub-sets of the group without throwing an error.\n   *\n   *  ### Example\n   *\n   *  ```\n   *  const form = new FormGroup({\n   *     first: new FormControl(),\n   *     last: new FormControl()\n   *  });\n   *  console.log(form.value);   // {first: null, last: null}\n   *\n   *  form.patchValue({first: 'Nancy'});\n   *  console.log(form.value);   // {first: 'Nancy', last: null}\n   *\n   *  ```\n   */\n  patchValue(\n      value: {[key: string]: any},\n      {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    Object.keys(value).forEach(name => {\n      if (this.controls[name]) {\n        this.controls[name].patchValue(value[name], {onlySelf: true, emitEvent});\n      }\n    });\n    this.updateValueAndValidity({onlySelf, emitEvent});\n  }\n\n  /**\n   * Resets the {@link FormGroup}. This means by default:\n   *\n   * * The group and all descendants are marked `pristine`\n   * * The group and all descendants are marked `untouched`\n   * * The value of all descendants will be null or null maps\n   *\n   * You can also reset to a specific form state by passing in a map of states\n   * that matches the structure of your form, with control names as keys. The state\n   * can be a standalone value or a form state object with both a value and a disabled\n   * status.\n   *\n   * ### Example\n   *\n   * ```ts\n   * this.form.reset({first: 'name', last: 'last name'});\n   *\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n   * ```\n   *\n   * - OR -\n   *\n   * ```\n   * this.form.reset({\n   *   first: {value: 'name', disabled: true},\n   *   last: 'last'\n   * });\n   *\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n   * console.log(this.form.get('first').status);  // 'DISABLED'\n   * ```\n   */\n  reset(value: any = {}, {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      control.reset(value[name], {onlySelf: true, emitEvent});\n    });\n    this.updateValueAndValidity({onlySelf, emitEvent});\n    this._updatePristine({onlySelf});\n    this._updateTouched({onlySelf});\n  }\n\n  /**\n   * The aggregate value of the {@link FormGroup}, including any disabled controls.\n   *\n   * If you'd like to include all values regardless of disabled status, use this method.\n   * Otherwise, the `value` property is the best way to get the value of the group.\n   */\n  getRawValue(): any {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control.value;\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _throwIfControlMissing(name: string): void {\n    if (!Object.keys(this.controls).length) {\n      throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.controls[name]) {\n      throw new Error(`Cannot find form control with name: ${name}.`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: (v: any, k: string) => void): void {\n    Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n\n  /** @internal */\n  _updateValue(): void { this._value = this._reduceValue(); }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    let res = false;\n    this._forEachChild((control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && condition(control));\n    });\n    return res;\n  }\n\n  /** @internal */\n  _reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          if (control.enabled || this.disabled) {\n            acc[name] = control.value;\n          }\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _reduceChildren(initValue: any, fn: Function) {\n    let res = initValue;\n    this._forEachChild(\n        (control: AbstractControl, name: string) => { res = fn(res, control, name); });\n    return res;\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (const controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      if (value[name] === undefined) {\n        throw new Error(`Must supply a value for form control with name: '${name}'.`);\n      }\n    });\n  }\n}\n\n/**\n * @whatItDoes Tracks the value and validity state of an array of {@link FormControl}\n * instances.\n *\n * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link FormControl} and {@link FormGroup}.\n *\n * @howToUse\n *\n * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators as the second arg, or array-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `@angular/forms`\n *\n * @stable\n */\nexport class FormArray extends AbstractControl {\n  constructor(\n      public controls: AbstractControl[], validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._initObservables();\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Get the {@link AbstractControl} at the given `index` in the array.\n   */\n  at(index: number): AbstractControl { return this.controls[index]; }\n\n  /**\n   * Insert a new {@link AbstractControl} at the end of the array.\n   */\n  push(control: AbstractControl): void {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Insert a new {@link AbstractControl} at the given `index` in the array.\n   */\n  insert(index: number, control: AbstractControl): void {\n    this.controls.splice(index, 0, control);\n\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Remove the control at the given `index` in the array.\n   */\n  removeAt(index: number): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Replace an existing control.\n   */\n  setControl(index: number, control: AbstractControl): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n\n    if (control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n    }\n\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n\n  /**\n   * Length of the control array.\n   */\n  get length(): number { return this.controls.length; }\n\n  /**\n   *  Sets the value of the {@link FormArray}. It accepts an array that matches\n   *  the structure of the control.\n   *\n   * This method performs strict checks, so it will throw an error if you try\n   * to set the value of a control that doesn't exist or if you exclude the\n   * value of a control.\n   *\n   *  ### Example\n   *\n   *  ```\n   *  const arr = new FormArray([\n   *     new FormControl(),\n   *     new FormControl()\n   *  ]);\n   *  console.log(arr.value);   // [null, null]\n   *\n   *  arr.setValue(['Nancy', 'Drew']);\n   *  console.log(arr.value);   // ['Nancy', 'Drew']\n   *  ```\n   */\n  setValue(value: any[], {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._checkAllValuesPresent(value);\n    value.forEach((newValue: any, index: number) => {\n      this._throwIfControlMissing(index);\n      this.at(index).setValue(newValue, {onlySelf: true, emitEvent});\n    });\n    this.updateValueAndValidity({onlySelf, emitEvent});\n  }\n\n  /**\n   *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n   *  structure of the control, and will do its best to match the values to the correct\n   *  controls in the group.\n   *\n   *  It accepts both super-sets and sub-sets of the array without throwing an error.\n   *\n   *  ### Example\n   *\n   *  ```\n   *  const arr = new FormArray([\n   *     new FormControl(),\n   *     new FormControl()\n   *  ]);\n   *  console.log(arr.value);   // [null, null]\n   *\n   *  arr.patchValue(['Nancy']);\n   *  console.log(arr.value);   // ['Nancy', null]\n   *  ```\n   */\n  patchValue(value: any[], {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    value.forEach((newValue: any, index: number) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true, emitEvent});\n      }\n    });\n    this.updateValueAndValidity({onlySelf, emitEvent});\n  }\n\n  /**\n   * Resets the {@link FormArray}. This means by default:\n   *\n   * * The array and all descendants are marked `pristine`\n   * * The array and all descendants are marked `untouched`\n   * * The value of all descendants will be null or null maps\n   *\n   * You can also reset to a specific form state by passing in an array of states\n   * that matches the structure of the control. The state can be a standalone value\n   * or a form state object with both a value and a disabled status.\n   *\n   * ### Example\n   *\n   * ```ts\n   * this.arr.reset(['name', 'last name']);\n   *\n   * console.log(this.arr.value);  // ['name', 'last name']\n   * ```\n   *\n   * - OR -\n   *\n   * ```\n   * this.arr.reset([\n   *   {value: 'name', disabled: true},\n   *   'last'\n   * ]);\n   *\n   * console.log(this.arr.value);  // ['name', 'last name']\n   * console.log(this.arr.get(0).status);  // 'DISABLED'\n   * ```\n   */\n  reset(value: any = [], {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true, emitEvent});\n    });\n    this.updateValueAndValidity({onlySelf, emitEvent});\n    this._updatePristine({onlySelf});\n    this._updateTouched({onlySelf});\n  }\n\n  /**\n   * The aggregate value of the array, including any disabled controls.\n   *\n   * If you'd like to include all values regardless of disabled status, use this method.\n   * Otherwise, the `value` property is the best way to get the value of the array.\n   */\n  getRawValue(): any[] { return this.controls.map((control) => control.value); }\n\n  /** @internal */\n  _throwIfControlMissing(index: number): void {\n    if (!this.controls.length) {\n      throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.at(index)) {\n      throw new Error(`Cannot find form control at index ${index}`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: Function): void {\n    this.controls.forEach((control: AbstractControl, index: number) => { cb(control, index); });\n  }\n\n  /** @internal */\n  _updateValue(): void {\n    this._value = this.controls.filter((control) => control.enabled || this.disabled)\n                      .map((control) => control.value);\n  }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    return this.controls.some((control: AbstractControl) => control.enabled && condition(control));\n  }\n\n  /** @internal */\n  _setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => this._registerControl(control));\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, i: number) => {\n      if (value[i] === undefined) {\n        throw new Error(`Must supply a value for form control at index: ${i}.`);\n      }\n    });\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (const control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n\n  private _registerControl(control: AbstractControl) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Optional, Self, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../facade/async';\nimport {AbstractControl, FormControl, FormGroup} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from './shared';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @whatItDoes Creates a top-level {@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * @howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {@link NgModel} with a\n * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  @stable\n */\n\nexport class NgForm extends ControlContainer implements Form {\n  private _submitted: boolean = false;\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n\n  constructor(\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n\n  get submitted(): boolean { return this._submitted; }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  get controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n\n  addControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      dir._control = <FormControl>container.registerControl(dir.name, dir.control);\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  getControl(dir: NgModel): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  addFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  removeFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  getFormGroup(dir: NgModelGroup): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  updateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const ctrl = <FormControl>this.form.get(dir.path);\n      ctrl.setValue(value);\n    });\n  }\n\n  setValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n\n  onSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n\n  /** @internal */\n  _findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? <FormGroup>this.form.get(path) : this.form;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {TemplateDrivenErrors} from './template_driven_errors';\n\nexport const modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n\n/**\n * @whatItDoes Creates and binds a {@link FormGroup} instance to a DOM element.\n *\n * @howToUse\n *\n * This directive can only be used as a child of {@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * @stable\n */\n\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n\n  constructor(\n        parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n\n  /** @internal */\n  _checkParentType(): void {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n      TemplateDrivenErrors.modelGroupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['ngModelGroup', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { root } from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getSymbolIterator, isJsObject, isPresent} from './lang';\n\n/**\n * Wraps Javascript Objects\n */\nexport class StringMapWrapper {\n  static merge<V>(m1: {[key: string]: V}, m2: {[key: string]: V}): {[key: string]: V} {\n    const m: {[key: string]: V} = {};\n\n    for (const k of Object.keys(m1)) {\n      m[k] = m1[k];\n    }\n\n    for (const k of Object.keys(m2)) {\n      m[k] = m2[k];\n    }\n\n    return m;\n  }\n\n  static equals<V>(m1: {[key: string]: V}, m2: {[key: string]: V}): boolean {\n    const k1 = Object.keys(m1);\n    const k2 = Object.keys(m2);\n\n    if (k1.length != k2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < k1.length; i++) {\n      const key = k1[i];\n      if (m1[key] !== m2[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n */\nexport interface Predicate<T> { (value: T, index?: number, array?: T[]): boolean; }\n\nexport class ListWrapper {\n  static removeAll<T>(list: T[], items: T[]) {\n    for (let i = 0; i < items.length; ++i) {\n      const index = list.indexOf(items[i]);\n      if (index > -1) {\n        list.splice(index, 1);\n      }\n    }\n  }\n\n  static remove<T>(list: T[], el: T): boolean {\n    const index = list.indexOf(el);\n    if (index > -1) {\n      list.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  static equals(a: any[], b: any[]): boolean {\n    if (a.length != b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  static flatten<T>(list: Array<T|T[]>): T[] {\n    return list.reduce((flat: any[], item: T | T[]): T[] => {\n      const flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n      return (<T[]>flat).concat(flatItem);\n    }, []);\n  }\n}\n\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) ||\n      (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n       getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual(\n    a: any, b: any, comparator: (a: any, b: any) => boolean): boolean {\n  const iterator1 = a[getSymbolIterator()]();\n  const iterator2 = b[getSymbolIterator()]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nexport function iterateListLike(obj: any, fn: (p: any) => any) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[getSymbolIterator()]();\n    let item: any;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {__core_private__ as r} from '@angular/core';\n\nexport const isPromise: typeof r.isPromise = r.isPromise;\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OpaqueToken} from '@angular/core';\nimport {toPromise} from 'rxjs/operator/toPromise';\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {StringMapWrapper} from './facade/collection';\nimport {isPresent} from './facade/lang';\nimport {AbstractControl} from './model';\nimport {isPromise} from './private_import_core';\n\nfunction isEmptyInputValue(value: any) {\n  return value == null || typeof value === 'string' && value.length === 0;\n}\n\n/**\n * Providers for validators to be used for {@link FormControl}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n * @stable\n */\nexport const NG_VALIDATORS: OpaqueToken = new OpaqueToken('NgValidators');\n\n/**\n * Providers for asynchronous validators to be used for {@link FormControl}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {@link NG_VALIDATORS} for more details.\n *\n * @stable\n */\nexport const NG_ASYNC_VALIDATORS: OpaqueToken = new OpaqueToken('NgAsyncValidators');\n\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n *\n * @stable\n */\nexport class Validators {\n  /**\n   * Validator that requires controls to have a non-empty value.\n   */\n  static required(control: AbstractControl): {[key: string]: boolean} {\n    return isEmptyInputValue(control.value) ? {'required': true} : null;\n  }\n\n  /**\n   * Validator that requires controls to have a value of a minimum length.\n   */\n  static minLength(minLength: number): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const length = typeof control.value === 'string' ? control.value.length : 0;\n      return length < minLength ?\n          {'minlength': {'requiredLength': minLength, 'actualLength': length}} :\n          null;\n    };\n  }\n\n  /**\n   * Validator that requires controls to have a value of a maximum length.\n   */\n  static maxLength(maxLength: number): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} => {\n      const length = typeof control.value === 'string' ? control.value.length : 0;\n      return length > maxLength ?\n          {'maxlength': {'requiredLength': maxLength, 'actualLength': length}} :\n          null;\n    };\n  }\n\n  /**\n   * Validator that requires a control to match a regex to its value.\n   */\n  static pattern(pattern: string|RegExp): ValidatorFn {\n    if (!pattern) return Validators.nullValidator;\n    let regex: RegExp;\n    let regexStr: string;\n    if (typeof pattern === 'string') {\n      regexStr = `^${pattern}$`;\n      regex = new RegExp(regexStr);\n    } else {\n      regexStr = pattern.toString();\n      regex = pattern;\n    }\n    return (control: AbstractControl): {[key: string]: any} => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const value: string = control.value;\n      return regex.test(value) ? null :\n                                 {'pattern': {'requiredPattern': regexStr, 'actualValue': value}};\n    };\n  }\n\n  /**\n   * No-op validator.\n   */\n  static nullValidator(c: AbstractControl): {[key: string]: boolean} { return null; }\n\n  /**\n   * Compose multiple validators into a single function that returns the union\n   * of the individual error maps.\n   */\n  static compose(validators: ValidatorFn[]): ValidatorFn {\n    if (!validators) return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      return _mergeErrors(_executeValidators(control, presentValidators));\n    };\n  }\n\n  static composeAsync(validators: AsyncValidatorFn[]): AsyncValidatorFn {\n    if (!validators) return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      const promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n      return Promise.all(promises).then(_mergeErrors);\n    };\n  }\n}\n\nfunction _convertToPromise(obj: any): Promise<any> {\n  return isPromise(obj) ? obj : toPromise.call(obj);\n}\n\nfunction _executeValidators(control: AbstractControl, validators: ValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n\nfunction _executeAsyncValidators(control: AbstractControl, validators: AsyncValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n\nfunction _mergeErrors(arrayOfErrors: any[]): {[key: string]: any} {\n  const res: {[key: string]: any} =\n      arrayOfErrors.reduce((res: {[key: string]: any}, errors: {[key: string]: any}) => {\n        return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n      }, {});\n  return Object.keys(res).length === 0 ? null : res;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n *\n *  @stable\n */\n\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n  registerOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const DEFAULT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n *\n *  @stable\n */\n\nexport class DefaultValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngControl],[ngModel],[ngFormControl]',\n  host: {'(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [DEFAULT_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControl} from '../model';\n\nimport {AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport function normalizeValidator(validator: ValidatorFn | Validator): ValidatorFn {\n  if ((<Validator>validator).validate) {\n    return (c: AbstractControl) => (<Validator>validator).validate(c);\n  } else {\n    return <ValidatorFn>validator;\n  }\n}\n\nexport function normalizeAsyncValidator(validator: AsyncValidatorFn | Validator): AsyncValidatorFn {\n  if ((<Validator>validator).validate) {\n    return (c: AbstractControl) => (<Validator>validator).validate(c);\n  } else {\n    return <AsyncValidatorFn>validator;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Renderer, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const NUMBER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\n\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const normalizedValue = value == null ? '' : value;\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  registerOnChange(fn: (_: number) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [NUMBER_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\n\nexport class RadioControlRegistry {\n  private _accessors: any[] = [];\n\n  add(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n\n  remove(accessor: RadioControlValueAccessor) {\n    for (let i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  select(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n\n  private _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n/**\n * @whatItDoes  Writes radio control values and listens to radio control changes.\n *\n * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n * to keep the view synced with the {@link FormControl} model.\n *\n * @howToUse\n *\n * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n *  * **npm package**: `@angular/forms`\n *\n *  @stable\n */\n\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n  /** @internal */\n  _state: boolean;\n  /** @internal */\n  _control: NgControl;\n  /** @internal */\n  _fn: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n   name: string;\n   formControlName: string;\n   value: any;\n\n  constructor(\n      private _renderer: Renderer, private _elementRef: ElementRef,\n      private _registry: RadioControlRegistry, private _injector: Injector) {}\n\n  ngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n\n  ngOnDestroy(): void { this._registry.remove(this); }\n\n  writeValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n\n  fireUncheck(value: any): void { this.writeValue(value); }\n\n  registerOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  private _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n\n  private _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n{type: RadioControlRegistry, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'formControlName': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Provider, Renderer, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const RANGE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\n\nexport class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n\n  registerOnChange(fn: (_: number) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Provider, Renderer, forwardRef} from '@angular/core';\n\nimport {isPrimitive, looseIdentical} from '../facade/lang';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (!isPrimitive(value)) value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/**\n * @whatItDoes Writes values and listens to changes on a select element.\n *\n * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}\n * to keep the view synced with the {@link FormControl} model.\n *\n * @howToUse\n *\n * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * * **npm package**: `@angular/forms`\n *\n * @stable\n */\n\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, any> = new Map<string, any>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    const valueString = _buildValueString(this._getOptionId(value), value);\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = valueString;\n      fn(this._getOptionValue(valueString));\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(): string { return (this._idCounter++).toString(); }\n\n  /** @internal */\n  _getOptionId(value: any): string {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (looseIdentical(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\n/**\n * @whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @howToUse\n *\n * See docs for {@link SelectControlValueAccessor} for usage examples.\n *\n * @stable\n */\n\nexport class NgSelectOption implements OnDestroy {\n  id: string;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer,\n        private _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n\n  \n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  \n  set value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: Renderer, },\n{type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface BrowserNodeGlobal {\n  Object: typeof Object;\n  Array: typeof Array;\n  Map: typeof Map;\n  Set: typeof Set;\n  Date: DateConstructor;\n  RegExp: RegExpConstructor;\n  JSON: typeof JSON;\n  Math: any;  // typeof Math;\n  assert(condition: any): void;\n  Reflect: any;\n  getAngularTestability: Function;\n  getAllAngularTestabilities: Function;\n  getAllAngularRootElements: Function;\n  frameworkStabilizers: Array<Function>;\n  setTimeout: Function;\n  clearTimeout: Function;\n  setInterval: Function;\n  clearInterval: Function;\n  encodeURI: Function;\n}\n\n// TODO(jteplitz602): Load WorkerGlobalScope from lib.webworker.d.ts file #3492\ndeclare var WorkerGlobalScope: any /** TODO #9100 */;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\ndeclare var global: any /** TODO #9100 */;\n\nlet globalScope: BrowserNodeGlobal;\nif (typeof window === 'undefined') {\n  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n    // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n    globalScope = <any>self;\n  } else {\n    globalScope = <any>global;\n  }\n} else {\n  globalScope = <any>window;\n}\n\nexport function scheduleMicroTask(fn: Function) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n// Need to declare a new variable for global here since TypeScript\n// exports the original value of the symbol.\nconst _global: BrowserNodeGlobal = globalScope;\n\nexport {_global as global};\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n\n// TODO: remove calls to assert in production environment\n// Note: Can't just export this and import in in other files\n// as `assert` is a reserved keyword in Dart\n_global.assert = function assert(condition) {\n  // TODO: to be fixed properly via #2830, noop for now\n};\n\nexport function isPresent(obj: any): boolean {\n  return obj != null;\n}\n\nexport function isBlank(obj: any): boolean {\n  return obj == null;\n}\n\nconst STRING_MAP_PROTO = Object.getPrototypeOf({});\nexport function isStrictStringMap(obj: any): boolean {\n  return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\n\nexport function isDate(obj: any): obj is Date {\n  return obj instanceof Date && !isNaN(obj.valueOf());\n}\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return token.overriddenName;\n  }\n\n  if (token.name) {\n    return token.name;\n  }\n\n  const res = token.toString();\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\nexport class NumberWrapper {\n  static parseIntAutoRadix(text: string): number {\n    const result: number = parseInt(text);\n    if (isNaN(result)) {\n      throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n  }\n\n  static isNumeric(value: any): boolean { return !isNaN(value - parseFloat(value)); }\n}\n\n// JS has NaN !== NaN\nexport function looseIdentical(a: any, b: any): boolean {\n  return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\nexport function print(obj: Error | Object) {\n  console.log(obj);\n}\n\nexport function warn(obj: Error | Object) {\n  console.warn(obj);\n}\n\nexport function setValueOnPath(global: any, path: string, value: any) {\n  const parts = path.split('.');\n  let obj: any = global;\n  while (parts.length > 1) {\n    const name = parts.shift();\n    if (obj.hasOwnProperty(name) && obj[name] != null) {\n      obj = obj[name];\n    } else {\n      obj = obj[name] = {};\n    }\n  }\n  if (obj === undefined || obj === null) {\n    obj = {};\n  }\n  obj[parts.shift()] = value;\n}\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\ndeclare const Symbol: any;\nlet _symbolIterator: any = null;\nexport function getSymbolIterator(): string|symbol {\n  if (!_symbolIterator) {\n    if ((<any>globalScope).Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      const keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key !== 'entries' && key !== 'size' &&\n            (Map as any).prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n  return _symbolIterator;\n}\n\nexport function isPrimitive(obj: any): boolean {\n  return !isJsObject(obj);\n}\n\nexport function escapeRegExp(s: string): string {\n  return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OpaqueToken} from '@angular/core';\n\n/**\n * A bridge between a control and a native element.\n *\n * A `ControlValueAccessor` abstracts the operations of writing a new value to a\n * DOM element representing an input control.\n *\n * Please see {@link DefaultValueAccessor} for more information.\n *\n * @stable\n */\nexport interface ControlValueAccessor {\n  /**\n   * Write a new value to the element.\n   */\n  writeValue(obj: any): void;\n\n  /**\n   * Set the function to be called when the control receives a change event.\n   */\n  registerOnChange(fn: any): void;\n\n  /**\n   * Set the function to be called when the control receives a touch event.\n   */\n  registerOnTouched(fn: any): void;\n\n  /**\n   * This function is called when the control status changes to or from \"DISABLED\".\n   * Depending on the value, it will enable or disable the appropriate DOM element.\n   *\n   * @param isDisabled\n   */\n  setDisabledState?(isDisabled: boolean): void;\n}\n\n/**\n * Used to provide a {@link ControlValueAccessor} for form controls.\n *\n * See {@link DefaultValueAccessor} for how to implement one.\n * @stable\n */\nexport const NG_VALUE_ACCESSOR: OpaqueToken = new OpaqueToken('NgValueAccessor');\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Provider, Renderer, forwardRef} from '@angular/core';\n\nimport {isPrimitive, looseIdentical} from '../facade/lang';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const SELECT_MULTIPLE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (!isPrimitive(value)) value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n\n/** Mock interface for HTMLCollection */\nabstract class HTMLCollection {\n  length: number;\n  abstract item(_: number): HTMLOption;\n}\n\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n * @stable\n */\n\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, NgSelectMultipleOption> = new Map<string, NgSelectMultipleOption>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    if (value == null) return;\n    const values: Array<any> = <Array<any>>value;\n    // convert values to ids\n    const ids = values.map((v) => this._getOptionId(v));\n    this._optionMap.forEach((opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      const selected: Array<any> = [];\n      if (_.hasOwnProperty('selectedOptions')) {\n        const options: HTMLCollection = _.selectedOptions;\n        for (let i = 0; i < options.length; i++) {\n          const opt: any = options.item(i);\n          const val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        const options: HTMLCollection = <HTMLCollection>_.options;\n        for (let i = 0; i < options.length; i++) {\n          const opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            const val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      fn(selected);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /** @internal */\n  _registerOption(value: NgSelectMultipleOption): string {\n    const id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string {\n    for (const id of Array.from(this._optionMap.keys())) {\n      if (looseIdentical(this._optionMap.get(id)._value, value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    const id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(change)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\n\nexport class NgSelectMultipleOption implements OnDestroy {\n  id: string;\n  /** @internal */\n  _value: any;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer,\n        private _select: SelectMultipleControlValueAccessor) {\n    if (this._select) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n\n  \n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n\n  \n  set value(value: any) {\n    if (this._select) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @internal */\n  _setSelected(selected: boolean) {\n    this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n  }\n\n  ngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ElementRef, },\n{type: Renderer, },\n{type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isBlank, isPresent, looseIdentical} from '../facade/lang';\nimport {FormArray, FormControl, FormGroup} from '../model';\nimport {Validators} from '../validators';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {CheckboxControlValueAccessor} from './checkbox_value_accessor';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {DefaultValueAccessor} from './default_value_accessor';\nimport {NgControl} from './ng_control';\nimport {normalizeAsyncValidator, normalizeValidator} from './normalize_validator';\nimport {NumberValueAccessor} from './number_value_accessor';\nimport {RadioControlValueAccessor} from './radio_control_value_accessor';\nimport {RangeValueAccessor} from './range_value_accessor';\nimport {FormArrayName} from './reactive_directives/form_group_name';\nimport {SelectControlValueAccessor} from './select_control_value_accessor';\nimport {SelectMultipleControlValueAccessor} from './select_multiple_control_value_accessor';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\n\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  return [...parent.path, name];\n}\n\nexport function setUpControl(control: FormControl, dir: NgControl): void {\n  if (!control) _throwError(dir, 'Cannot find control with');\n  if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');\n\n  control.validator = Validators.compose([control.validator, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n  dir.valueAccessor.writeValue(control.value);\n\n  // view -> model\n  dir.valueAccessor.registerOnChange((newValue: any) => {\n    dir.viewToModelUpdate(newValue);\n    control.markAsDirty();\n    control.setValue(newValue, {emitModelToViewChange: false});\n  });\n\n  // touched\n  dir.valueAccessor.registerOnTouched(() => control.markAsTouched());\n\n  control.registerOnChange((newValue: any, emitModelEvent: boolean) => {\n    // control -> view\n    dir.valueAccessor.writeValue(newValue);\n\n    // control -> ngModel\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  });\n\n  if (dir.valueAccessor.setDisabledState) {\n    control.registerOnDisabledChange(\n        (isDisabled: boolean) => { dir.valueAccessor.setDisabledState(isDisabled); });\n  }\n\n  // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n  dir._rawValidators.forEach((validator: Validator | ValidatorFn) => {\n    if ((<Validator>validator).registerOnValidatorChange)\n      (<Validator>validator).registerOnValidatorChange(() => control.updateValueAndValidity());\n  });\n\n  dir._rawAsyncValidators.forEach((validator: Validator | ValidatorFn) => {\n    if ((<Validator>validator).registerOnValidatorChange)\n      (<Validator>validator).registerOnValidatorChange(() => control.updateValueAndValidity());\n  });\n}\n\nexport function cleanUpControl(control: FormControl, dir: NgControl) {\n  dir.valueAccessor.registerOnChange(() => _noControlError(dir));\n  dir.valueAccessor.registerOnTouched(() => _noControlError(dir));\n\n  dir._rawValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  dir._rawAsyncValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  if (control) control._clearChangeFns();\n}\n\nexport function setUpFormContainer(\n    control: FormGroup | FormArray, dir: AbstractFormGroupDirective | FormArrayName) {\n  if (isBlank(control)) _throwError(dir, 'Cannot find control with');\n  control.validator = Validators.compose([control.validator, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n\nfunction _noControlError(dir: NgControl) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n\nfunction _throwError(dir: AbstractControlDirective, message: string): void {\n  let messageEnd: string;\n  if (dir.path.length > 1) {\n    messageEnd = `path: '${dir.path.join(' -> ')}'`;\n  } else if (dir.path[0]) {\n    messageEnd = `name: '${dir.path}'`;\n  } else {\n    messageEnd = 'unspecified name attribute';\n  }\n  throw new Error(`${message} ${messageEnd}`);\n}\n\nexport function composeValidators(validators: /* Array<Validator|Function> */ any[]): ValidatorFn {\n  return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n\nexport function composeAsyncValidators(validators: /* Array<Validator|Function> */ any[]):\n    AsyncValidatorFn {\n  return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n                                 null;\n}\n\nexport function isPropertyUpdated(changes: {[key: string]: any}, viewModel: any): boolean {\n  if (!changes.hasOwnProperty('model')) return false;\n  const change = changes['model'];\n\n  if (change.isFirstChange()) return true;\n  return !looseIdentical(viewModel, change.currentValue);\n}\n\nconst BUILTIN_ACCESSORS = [\n  CheckboxControlValueAccessor,\n  RangeValueAccessor,\n  NumberValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n];\n\nexport function isBuiltInAccessor(valueAccessor: ControlValueAccessor): boolean {\n  return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nexport function selectValueAccessor(\n    dir: NgControl, valueAccessors: ControlValueAccessor[]): ControlValueAccessor {\n  if (!valueAccessors) return null;\n\n  let defaultAccessor: ControlValueAccessor;\n  let builtinAccessor: ControlValueAccessor;\n  let customAccessor: ControlValueAccessor;\n  valueAccessors.forEach((v: ControlValueAccessor) => {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor)\n        _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n\n    } else {\n      if (customAccessor)\n        _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n\n  _throwError(dir, 'No valid value accessor for form control with');\n  return null;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const FormErrorExamples = {\n  formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n\n  formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n\n  formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n\n  ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n\n  ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n \ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormErrorExamples as Examples} from './error_examples';\n\nexport class TemplateDrivenErrors {\n  static modelParentException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${Examples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${Examples.ngModelWithFormGroup}`);\n  }\n\n  static formGroupNameException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n\n  static missingNameException() {\n    throw new Error(\n        `If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n  }\n\n  static modelGroupParentException() {\n    throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../facade/async';\nimport {FormControl} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = Promise.resolve(null);\n\n/**\n * @whatItDoes Creates a {@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * @howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {@link RadioControlValueAccessor}\n * * Selects: {@link SelectControlValueAccessor}\n *\n * **npm package**: `@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  @stable\n */\n\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n  /** @internal */\n  _control = new FormControl();\n  /** @internal */\n  _registered = false;\n  viewModel: any;\n\n   name: string;\n   isDisabled: boolean;\n   model: any;\n   options: {name?: string, standalone?: boolean};\n\n   update = new EventEmitter();\n\n  constructor(  parent: ControlContainer,\n                 validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<Validator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n\n              ngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n\n              get control(): FormControl { return this._control; }\n\n              get path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n\n              get formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n\n              get validator(): ValidatorFn { return composeValidators(this._rawValidators); }\n\n              get asyncValidator(): AsyncValidatorFn {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n\n              private _setUpControl(): void {\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n\n              private _isStandalone(): boolean {\n                return !this._parent || (this.options && this.options.standalone);\n              }\n\n              private _setUpStandalone(): void {\n                setUpControl(this._control, this);\n                this._control.updateValueAndValidity({emitEvent: false});\n              }\n\n              private _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n\n              private _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n\n              private _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n\n              private _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n\n              private _updateDisabled(changes: SimpleChanges) {\n                const disabledValue = changes['isDisabled'].currentValue;\n\n                const isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'options': [{ type: Input, args: ['ngModelOptions', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {Form} from './form_interface';\n\n\n/**\n * A directive that contains multiple {@link NgControl}s.\n *\n * Only used by the forms module.\n *\n * @stable\n */\nexport class ControlContainer extends AbstractControlDirective {\n  name: string;\n\n  /**\n   * Get the form to which this container belongs.\n   */\n  get formDirective(): Form { return null; }\n\n  /**\n   * Get the path to this container.\n   */\n  get path(): string[] { return null; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from '../facade/async';\nimport {AbstractControl} from '../model';\n\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * @stable\n */\nexport abstract class AbstractControlDirective {\n  get control(): AbstractControl { throw new Error('unimplemented'); }\n\n  get value(): any { return this.control ? this.control.value : null; }\n\n  get valid(): boolean { return this.control ? this.control.valid : null; }\n\n  get invalid(): boolean { return this.control ? this.control.invalid : null; }\n\n  get pending(): boolean { return this.control ? this.control.pending : null; }\n\n  get errors(): {[key: string]: any} { return this.control ? this.control.errors : null; }\n\n  get pristine(): boolean { return this.control ? this.control.pristine : null; }\n\n  get dirty(): boolean { return this.control ? this.control.dirty : null; }\n\n  get touched(): boolean { return this.control ? this.control.touched : null; }\n\n  get untouched(): boolean { return this.control ? this.control.untouched : null; }\n\n  get disabled(): boolean { return this.control ? this.control.disabled : null; }\n\n  get enabled(): boolean { return this.control ? this.control.enabled : null; }\n\n  get statusChanges(): Observable<any> { return this.control ? this.control.statusChanges : null; }\n\n  get valueChanges(): Observable<any> { return this.control ? this.control.valueChanges : null; }\n\n  get path(): string[] { return null; }\n\n  reset(value: any = undefined): void {\n    if (this.control) this.control.reset(value);\n  }\n\n  hasError(errorCode: string, path: string[] = null): boolean {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n\n  getError(errorCode: string, path: string[] = null): any {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nfunction unimplemented(): any {\n  throw new Error('unimplemented');\n}\n\n/**\n * A base class that all control directive extend.\n * It binds a {@link FormControl} object to a DOM element.\n *\n * Used internally by Angular forms.\n *\n * @stable\n */\nexport abstract class NgControl extends AbstractControlDirective {\n  /** @internal */\n  _parent: ControlContainer = null;\n  name: string = null;\n  valueAccessor: ControlValueAccessor = null;\n  /** @internal */\n  _rawValidators: Array<Validator|ValidatorFn> = [];\n  /** @internal */\n  _rawAsyncValidators: Array<Validator|ValidatorFn> = [];\n\n  get validator(): ValidatorFn { return <ValidatorFn>unimplemented(); }\n  get asyncValidator(): AsyncValidatorFn { return <AsyncValidatorFn>unimplemented(); }\n\n  abstract viewToModelUpdate(newValue: any): void;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Self} from '@angular/core';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {NgControl} from './ng_control';\n\nexport class AbstractControlStatus {\n  private _cd: AbstractControlDirective;\n\n  constructor(cd: AbstractControlDirective) { this._cd = cd; }\n\n  get ngClassUntouched(): boolean { return this._cd.control ? this._cd.control.untouched : false; }\n  get ngClassTouched(): boolean { return this._cd.control ? this._cd.control.touched : false; }\n  get ngClassPristine(): boolean { return this._cd.control ? this._cd.control.pristine : false; }\n  get ngClassDirty(): boolean { return this._cd.control ? this._cd.control.dirty : false; }\n  get ngClassValid(): boolean { return this._cd.control ? this._cd.control.valid : false; }\n  get ngClassInvalid(): boolean { return this._cd.control ? this._cd.control.invalid : false; }\n  get ngClassPending(): boolean { return this._cd.control ? this._cd.control.pending : false; }\n}\n\nexport const ngControlStatusHost = {\n  '[class.ng-untouched]': 'ngClassUntouched',\n  '[class.ng-touched]': 'ngClassTouched',\n  '[class.ng-pristine]': 'ngClassPristine',\n  '[class.ng-dirty]': 'ngClassDirty',\n  '[class.ng-valid]': 'ngClassValid',\n  '[class.ng-invalid]': 'ngClassInvalid',\n  '[class.ng-pending]': 'ngClassPending',\n};\n\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @stable\n */\n\nexport class NgControlStatus extends AbstractControlStatus {\n  constructor( cd: NgControl) { super(cd); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgControl, decorators: [{ type: Self }, ]},\n];\n}\n\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @stable\n */\n\nexport class NgControlStatusGroup extends AbstractControlStatus {\n  constructor( cd: ControlContainer) { super(cd); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n  host: ngControlStatusHost\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ControlContainer, decorators: [{ type: Self }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from './subscribe';\nimport * as import1 from '@angular/core/src/linker/view';\nimport * as import2 from '@angular/core/src/render/api';\nimport * as import3 from '@angular/core/src/linker/view_utils';\nimport * as import4 from '@angular/core/src/metadata/view';\nimport * as import5 from '@angular/core/src/linker/view_type';\nimport * as import6 from '@angular/core/src/change_detection/change_detection';\nimport * as import7 from '@angular/core/src/linker/component_factory';\nimport * as import8 from '../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';\nimport * as import9 from '../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';\nimport * as import10 from '../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';\nimport * as import11 from '@angular/core/src/linker/element_ref';\nimport * as import12 from '@angular/forms/src/directives/default_value_accessor';\nimport * as import13 from '@angular/forms/src/directives/control_value_accessor';\nimport * as import14 from '@angular/forms/src/directives/ng_model';\nimport * as import15 from '@angular/forms/src/directives/ng_control';\nimport * as import16 from '@angular/forms/src/directives/ng_control_status';\nexport class Wrapper_Subscribe {\n  /*private*/ _eventHandler:Function;\n  context:import0.Subscribe;\n  /*private*/ _changed:boolean;\n  constructor() {\n    this._changed = false;\n    this.context = new import0.Subscribe();\n  }\n  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {\n  }\n  ngOnDestroy():void {\n  }\n  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {\n    var changed:any = this._changed;\n    this._changed = false;\n    return changed;\n  }\n  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {\n  }\n  handleEvent(eventName:string,$event:any):boolean {\n    var result:boolean = true;\n    return result;\n  }\n  subscribe(view:import1.AppView<any>,_eventHandler:any):void {\n    this._eventHandler = _eventHandler;\n  }\n}\nvar renderType_Subscribe_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});\nclass View_Subscribe_Host0 extends import1.AppView<any> {\n  _el_0:any;\n  compView_0:import1.AppView<import0.Subscribe>;\n  _Subscribe_0_3:Wrapper_Subscribe;\n  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {\n    super(View_Subscribe_Host0,renderType_Subscribe_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);\n  }\n  createInternal(rootSelector:string):import7.ComponentRef<any> {\n    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'subscribe',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));\n    this.compView_0 = new View_Subscribe0(this.viewUtils,this,0,this._el_0);\n    this._Subscribe_0_3 = new Wrapper_Subscribe();\n    this.compView_0.create(this._Subscribe_0_3.context);\n    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));\n    return new import7.ComponentRef_<any>(0,this,this._el_0,this._Subscribe_0_3.context);\n  }\n  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {\n    if (((token === import0.Subscribe) && (0 === requestNodeIndex))) { return this._Subscribe_0_3.context; }\n    return notFoundResult;\n  }\n  detectChangesInternal(throwOnChange:boolean):void {\n    this._Subscribe_0_3.ngDoCheck(this,this._el_0,throwOnChange);\n    this.compView_0.detectChanges(throwOnChange);\n  }\n  destroyInternal():void {\n    this.compView_0.destroy();\n  }\n  visitRootNodesInternal(cb:any,ctx:any):void {\n    cb(this._el_0,ctx);\n  }\n}\nexport const SubscribeNgFactory:import7.ComponentFactory<import0.Subscribe> = new import7.ComponentFactory<import0.Subscribe>('subscribe',View_Subscribe_Host0,import0.Subscribe);\nconst styles_Subscribe:any[] = ([] as any[]);\nvar renderType_Subscribe:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_Subscribe,{});\nexport class View_Subscribe0 extends import1.AppView<import0.Subscribe> {\n  _text_0:any;\n  _el_1:any;\n  _text_2:any;\n  _el_3:any;\n  _text_4:any;\n  _text_5:any;\n  _el_6:any;\n  _text_7:any;\n  _el_8:any;\n  _DefaultValueAccessor_8_3:import8.Wrapper_DefaultValueAccessor;\n  _NG_VALUE_ACCESSOR_8_4:any[];\n  _NgModel_8_5:import9.Wrapper_NgModel;\n  _NgControl_8_6:any;\n  _NgControlStatus_8_7:import10.Wrapper_NgControlStatus;\n  _text_9:any;\n  _el_10:any;\n  _text_11:any;\n  _text_12:any;\n  _text_13:any;\n  /*private*/ _expr_19:any;\n  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {\n    super(View_Subscribe0,renderType_Subscribe,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);\n    this._expr_19 = import6.UNINITIALIZED;\n  }\n  createInternal(rootSelector:string):import7.ComponentRef<any> {\n    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);\n    this._text_0 = this.renderer.createText(parentRenderNode,'\\n    ',(null as any));\n    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_2 = this.renderer.createText(this._el_1,'\\n      ',(null as any));\n    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'h2',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_4 = this.renderer.createText(this._el_3,'Subscribe',(null as any));\n    this._text_5 = this.renderer.createText(this._el_1,'\\n      Please enter your email address:',(null as any));\n    this._el_6 = import3.createRenderElement(this.renderer,this._el_1,'br',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_7 = this.renderer.createText(this._el_1,'\\n      ',(null as any));\n    this._el_8 = import3.createRenderElement(this.renderer,this._el_1,'input',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._DefaultValueAccessor_8_3 = new import8.Wrapper_DefaultValueAccessor(this.renderer,new import11.ElementRef(this._el_8));\n    this._NG_VALUE_ACCESSOR_8_4 = [this._DefaultValueAccessor_8_3.context];\n    this._NgModel_8_5 = new import9.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_8_4);\n    this._NgControl_8_6 = this._NgModel_8_5.context;\n    this._NgControlStatus_8_7 = new import10.Wrapper_NgControlStatus(this._NgControl_8_6);\n    this._text_9 = this.renderer.createText(this._el_1,'\\n      ',(null as any));\n    this._el_10 = import3.createRenderElement(this.renderer,this._el_1,'pre',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_11 = this.renderer.createText(this._el_10,'',(null as any));\n    this._text_12 = this.renderer.createText(this._el_1,'\\n    ',(null as any));\n    this._text_13 = this.renderer.createText(parentRenderNode,'\\n  ',(null as any));\n    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_8,new import3.InlineArray8(6,'ngModelChange',(null as any),'input',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_8));\n    this._NgModel_8_5.subscribe(this,this.eventHandler(this.handleEvent_8),true);\n    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [\n      this._text_0,\n      this._el_1,\n      this._text_2,\n      this._el_3,\n      this._text_4,\n      this._text_5,\n      this._el_6,\n      this._text_7,\n      this._el_8,\n      this._text_9,\n      this._el_10,\n      this._text_11,\n      this._text_12,\n      this._text_13\n    ]\n    ),[disposable_0]);\n    return (null as any);\n  }\n  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {\n    if (((token === import12.DefaultValueAccessor) && (8 === requestNodeIndex))) { return this._DefaultValueAccessor_8_3.context; }\n    if (((token === import13.NG_VALUE_ACCESSOR) && (8 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_8_4; }\n    if (((token === import14.NgModel) && (8 === requestNodeIndex))) { return this._NgModel_8_5.context; }\n    if (((token === import15.NgControl) && (8 === requestNodeIndex))) { return this._NgControl_8_6; }\n    if (((token === import16.NgControlStatus) && (8 === requestNodeIndex))) { return this._NgControlStatus_8_7.context; }\n    return notFoundResult;\n  }\n  detectChangesInternal(throwOnChange:boolean):void {\n    this._DefaultValueAccessor_8_3.ngDoCheck(this,this._el_8,throwOnChange);\n    const currVal_8_1_0:any = this.context.address;\n    this._NgModel_8_5.check_model(currVal_8_1_0,throwOnChange,false);\n    this._NgModel_8_5.ngDoCheck(this,this._el_8,throwOnChange);\n    this._NgControlStatus_8_7.ngDoCheck(this,this._el_8,throwOnChange);\n    this._NgControlStatus_8_7.checkHost(this,this,this._el_8,throwOnChange);\n    const currVal_19:any = import3.inlineInterpolate(1,'Value entered: ',this.context.address,'');\n    if (import3.checkBinding(throwOnChange,this._expr_19,currVal_19)) {\n      this.renderer.setText(this._text_11,currVal_19);\n      this._expr_19 = currVal_19;\n    }\n  }\n  destroyInternal():void {\n    this._NgModel_8_5.ngOnDestroy();\n  }\n  handleEvent_8(eventName:string,$event:any):boolean {\n    this.markPathToRootAsCheckOnce();\n    var result:boolean = true;\n    result = (this._DefaultValueAccessor_8_3.handleEvent(eventName,$event) && result);\n    if ((eventName == 'ngModelChange')) {\n      const pd_sub_0:any = ((<any>(this.context.address = $event)) !== false);\n      result = (pd_sub_0 && result);\n    }\n    return result;\n  }\n}","import {Component} from '@angular/core'\n\n@Component({\n  selector: 'subscribe',\n  template: `\n    <div>\n      <h2>Subscribe</h2>\n      Please enter your email address:<br>\n      <input [(ngModel)]=\"address\">\n      <pre>Value entered: {{address}}</pre>\n    </div>\n  `\n})\nexport class Subscribe {\n  address: string = '';\n}\n","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from '@angular/core/src/linker/ng_module_factory';\nimport * as import1 from './subscribe.module';\nimport * as import2 from '@angular/forms/src/directives';\nimport * as import3 from '@angular/forms/src/form_providers';\nimport * as import4 from '@angular/router/src/router_module';\nimport * as import5 from '@angular/forms/src/directives/radio_control_value_accessor';\nimport * as import6 from '@angular/core/src/di/injector';\nimport * as import7 from './subscribe.ngfactory';\nimport * as import8 from './subscribe';\nimport * as import9 from '@angular/router/src/router_config_loader';\nclass SubscribeModuleInjector extends import0.NgModuleInjector<import1.SubscribeModule> {\n  _InternalFormsSharedModule_0:import2.InternalFormsSharedModule;\n  _FormsModule_1:import3.FormsModule;\n  _RouterModule_2:import4.RouterModule;\n  _SubscribeModule_3:import1.SubscribeModule;\n  __RadioControlRegistry_4:import5.RadioControlRegistry;\n  __ROUTES_5:any[];\n  constructor(parent:import6.Injector) {\n    super(parent,[import7.SubscribeNgFactory],([] as any[]));\n  }\n  get _RadioControlRegistry_4():import5.RadioControlRegistry {\n    if ((this.__RadioControlRegistry_4 == null)) { (this.__RadioControlRegistry_4 = new import5.RadioControlRegistry()); }\n    return this.__RadioControlRegistry_4;\n  }\n  get _ROUTES_5():any[] {\n        if ((this.__ROUTES_5 == null)) { (this.__ROUTES_5 = [[{\n          path: '',\n          component: import8.Subscribe\n        }\n    ]]); }\n    return this.__ROUTES_5;\n  }\n  createInternal():import1.SubscribeModule {\n    this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();\n    this._FormsModule_1 = new import3.FormsModule();\n    this._RouterModule_2 = new import4.RouterModule(this.parent.get(import4.ROUTER_FORROOT_GUARD,(null as any)));\n    this._SubscribeModule_3 = new import1.SubscribeModule();\n    return this._SubscribeModule_3;\n  }\n  getInternal(token:any,notFoundResult:any):any {\n    if ((token === import2.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_0; }\n    if ((token === import3.FormsModule)) { return this._FormsModule_1; }\n    if ((token === import4.RouterModule)) { return this._RouterModule_2; }\n    if ((token === import1.SubscribeModule)) { return this._SubscribeModule_3; }\n    if ((token === import5.RadioControlRegistry)) { return this._RadioControlRegistry_4; }\n    if ((token === import9.ROUTES)) { return this._ROUTES_5; }\n    return notFoundResult;\n  }\n  destroyInternal():void {\n  }\n}\nexport const SubscribeModuleNgFactory:import0.NgModuleFactory<import1.SubscribeModule> = new import0.NgModuleFactory(SubscribeModuleInjector,import1.SubscribeModule);"]}