{"version":3,"sources":["../../app/search/search.module.ts","../../node_modules/@angular/common/src/directives/ng_for.ngfactory.ts","../../app/search/search.ngfactory.ts","../../../../../modules/@angular/http/src/backends/browser_jsonp.ts","../../../../../modules/@angular/http/src/backends/jsonp_backend.ts","../../../../../modules/@angular/http/src/backends/browser_xhr.ts","../../../../../modules/@angular/http/src/backends/xhr_backend.ts","../../../../modules/@angular/http/src/base_response_options.ts","../../../../modules/@angular/http/src/http_module.ts","../../../../modules/@angular/http/src/static_response.ts","../../../../modules/@angular/http/src/index.ts","../../node_modules/rxjs/src/add/operator/map.ts","../../app/search/search.ts","../../../../modules/@angular/http/src/base_request_options.ts","../../../../modules/@angular/http/src/interfaces.ts","../../../../modules/@angular/http/src/body.ts","../../../../modules/@angular/http/src/headers.ts","../../../../modules/@angular/http/src/enums.ts","../../../../modules/@angular/http/src/http_utils.ts","../../../../modules/@angular/http/src/url_search_params.ts","../../../../modules/@angular/http/src/static_request.ts","../../../../modules/@angular/http/src/http.ts","../../app/search/search.module.ngfactory.ts"],"names":["routes","SearchModule","path","component","search_1","Search","__decorate","core_1","NgModule","imports","common_1","CommonModule","http_1","HttpModule","JsonpModule","router_1","RouterModule","forChild","declarations","__metadata","exports_1","Wrapper_NgFor","p0","p1","p2","p3","this","_changed","_changes","context","import0","NgFor","_expr_0","import1","UNINITIALIZED","_expr_1","_expr_2","prototype","ngOnDetach","view","componentView","el","ngOnDestroy","check_ngForOf","currValue","throwOnChange","forceUpdate","import3","checkBinding","ngForOf","SimpleChange","check_ngForTrackBy","ngForTrackBy","check_ngForTemplate","ngForTemplate","ngDoCheck","changed","ngOnChanges","checkHost","handleEvent","eventName","$event","result","subscribe","_eventHandler","renderType_Search_Host","View_Search_Host0","SearchNgFactory","styles_Search","renderType_Search","View_Search0","View_Search1","Wrapper_Search","createRenderComponentType","import4","ViewEncapsulation","None","_super","viewUtils","parentView","parentIndex","parentElement","call","import5","ViewType","HOST","import6","ChangeDetectorStatus","CheckAlways","__extends","createInternal","rootSelector","_el_0","selectOrCreateRenderHostElement","renderer","EMPTY_INLINE_ARRAY","compView_0","_Search_0_3","injectorGet","import8","Jsonp","create","init","directRenderer","import7","ComponentRef_","injectorGetInternal","token","requestNodeIndex","notFoundResult","detectChangesInternal","detectChanges","destroyInternal","destroy","visitRootNodesInternal","cb","ctx","AppView","ComponentFactory","COMPONENT","parentRenderNode","createViewRoot","_text_0","createText","_el_1","createRenderElement","_text_2","_el_3","_text_4","_text_5","_el_6","InlineArray4","_text_7","_el_8","_text_9","_text_10","_anchor_11","createTemplateAnchor","_vc_11","import9","ViewContainer","_TemplateRef_11_5","import11","TemplateRef_","_NgFor_11_6","import10","vcRef","import12","IterableDiffers","ref","_text_12","_text_13","disposable_0","subscribeToRenderElement","InlineArray2","eventHandler","handleEvent_8","TemplateRef","import13","currVal_11_0_0","pages","detectChangesInNestedViews","destroyNestedViews","createEmbeddedViewInternal","nodeIndex","markPathToRootAsCheckOnce","pd_sub_0","search","value","declaredViewContainer","EMBEDDED","_text_1","currVal_2","inlineInterpolate","$implicit","setText","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","Injectable","_nAngularCoreIndexJs","_nextRequestId","BrowserJsonp","build","url","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","connections","removeConnection","send","body","appendChild","cleanup","parentNode","removeChild","decorators","type","ctorParameters","Observable","_nRxjsObservableJs","ResponseOptions","_nAngularHttpSrcBase_response_optionsJs","ReadyState","_nAngularHttpSrcEnumsJs","RequestMethod","ResponseType","ConnectionBackend","_nAngularHttpSrcInterfacesJs","Response","_nAngularHttpSrcStatic_responseJs","_nAngularHttpSrcBackendsBrowser_jsonpJs","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","JSONPConnection_","req","_dom","baseResponseOptions","_this","_finished","method","Get","TypeError","request","response","responseObserver","readyState","Loading","_id","callback","indexOf","replace","lastIndexOf","length","substring","script","_script","onLoad","event","Cancelled","Done","responseOptions_1","Error","merge","error","responseOptions","_responseData","next","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","apply","arguments","JSONPBackend_","_browserJSONP","_baseResponseOptions","createConnection","BrowserXhr","XMLHttpRequest","__platform_browser_private__","_nAngularPlatformBrowserIndexJs","ContentType","ResponseContentType","Headers","_nAngularHttpSrcHeadersJs","getResponseURL","_nAngularHttpSrcHttp_utilsJs","isSuccess","XSRFStrategy","_nAngularHttpSrcBackendsBrowser_xhrJs","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","toUpperCase","withCredentials","status","responseText","headers","fromResponseHeaderString","getAllResponseHeaders","statusText","ok","err","setDetectedContentType","forEach","values","name","setRequestHeader","join","responseType","ArrayBuffer","Json","Text","Blob","getBody","abort","get","contentType","NONE","JSON","FORM","TEXT","BLOB","blob","CookieXSRFStrategy","_cookieName","_headerName","configureRequest","xsrfToken","getDOM","getCookie","set","XHRBackend","_browserXHR","_xsrfStrategy","_a","_b","options","BaseResponseOptions","Default","xhrBackend","requestOptions","Http","jsonpBackend","_nAngularHttpSrcBackendsJsonp_backendJs","_nAngularHttpSrcBackendsXhr_backendJs","BaseRequestOptions","_nAngularHttpSrcBase_request_optionsJs","RequestOptions","_nAngularHttpSrcHttpJs","args","providers","provide","useFactory","httpFactory","deps","useClass","_createDefaultCookieXSRFStrategy","jsonpFactory","Body","_nAngularHttpSrcBodyJs","_body","toString","_nAngularHttpSrcHttp_moduleJs","Connection","Request","_nAngularHttpSrcStatic_requestJs","QueryEncoder","_nAngularHttpSrcUrl_search_paramsJs","URLSearchParams","Observable_1","$__require","map_1","map","jsonp","text","wikiUrl","params","json","raw","key","push","title","Component","selector","template","normalizeMethodName","clone","stringToArrayBuffer","parse","String","fromCharCode","Uint16Array","stringify","arrayBuffer","_headers","Map","_normalizedNames","append","Object","keys","Array","isArray","delete","headersString","split","line","index","name_1","slice","trim","getAll","lcName","toLowerCase","fn","has","from","mayBeSetNormalizedName","toJSON","serialized","v","entries","_export","Post","Put","Delete","Options","Head","Patch","xhr","responseURL","test","getResponseHeader","input","i","strLen","charCodeAt","buffer","paramParser","rawParams","param","eqIdx","val","list","standardEncoding","encodeURIComponent","encodeKey","k","encodeValue","queryEncoder","paramsMap","appendAll","storedParam","setAll","searchParams","replaceAll","paramsList","prefix","detectContentType","FORM_DATA","detectContentTypeFromBody","FormData","ARRAY_BUFFER","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","newOptions","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","SearchModuleNgFactory","SearchModuleInjector","parent","defineProperty","__NgLocalization_5","NgLocaleLocalization","import14","LOCALE_ID","__BrowserXhr_6","__ResponseOptions_7","__XSRFStrategy_8","__XHRBackend_9","_BrowserXhr_6","_ResponseOptions_7","_XSRFStrategy_8","__RequestOptions_10","__Http_11","_XHRBackend_9","_RequestOptions_10","__BrowserJsonp_12","__JSONPBackend_13","_BrowserJsonp_12","__Jsonp_14","_JSONPBackend_13","__ROUTES_15","import15","_CommonModule_0","import2","_HttpModule_1","_JsonpModule_2","_RouterModule_3","ROUTER_FORROOT_GUARD","_SearchModule_4","getInternal","NgLocalization","_NgLocalization_5","import16","import17","_Http_11","_Jsonp_14","import18","ROUTES","_ROUTES_15","NgModuleInjector","NgModuleFactory"],"mappings":"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","file":"search.min.js","sourcesContent":["import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HttpModule, JsonpModule} from '@angular/http';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {Search} from './search';\n\n\nconst routes: Routes = [\n  {path: '', component: Search},\n];\n\n@NgModule({\n  imports: [CommonModule, HttpModule, JsonpModule, RouterModule.forChild(routes)],\n  declarations: [Search]\n})\nexport class SearchModule {}","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from '@angular/common/src/directives/ng_for';\nimport * as import1 from '@angular/core/src/change_detection/change_detection';\nimport * as import2 from '@angular/core/src/linker/view';\nimport * as import3 from '@angular/core/src/linker/view_utils';\nexport class Wrapper_NgFor {\n  /*private*/ _eventHandler:Function;\n  context:import0.NgFor;\n  /*private*/ _changed:boolean;\n  /*private*/ _changes:{[key: string]:any};\n  /*private*/ _expr_0:any;\n  /*private*/ _expr_1:any;\n  /*private*/ _expr_2:any;\n  constructor(p0:any,p1:any,p2:any,p3:any) {\n    this._changed = false;\n    this._changes = {};\n    this.context = new import0.NgFor(p0,p1,p2,p3);\n    this._expr_0 = import1.UNINITIALIZED;\n    this._expr_1 = import1.UNINITIALIZED;\n    this._expr_2 = import1.UNINITIALIZED;\n  }\n  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {\n  }\n  ngOnDestroy():void {\n  }\n  check_ngForOf(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {\n    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {\n      this._changed = true;\n      this.context.ngForOf = currValue;\n      this._changes['ngForOf'] = new import1.SimpleChange(this._expr_0,currValue);\n      this._expr_0 = currValue;\n    }\n  }\n  check_ngForTrackBy(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {\n    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {\n      this._changed = true;\n      this.context.ngForTrackBy = currValue;\n      this._changes['ngForTrackBy'] = new import1.SimpleChange(this._expr_1,currValue);\n      this._expr_1 = currValue;\n    }\n  }\n  check_ngForTemplate(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {\n    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {\n      this._changed = true;\n      this.context.ngForTemplate = currValue;\n      this._changes['ngForTemplate'] = new import1.SimpleChange(this._expr_2,currValue);\n      this._expr_2 = currValue;\n    }\n  }\n  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {\n    var changed:any = this._changed;\n    this._changed = false;\n    if (!throwOnChange) {\n      if (changed) {\n        this.context.ngOnChanges(this._changes);\n        this._changes = {};\n      }\n      this.context.ngDoCheck();\n    }\n    return changed;\n  }\n  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {\n  }\n  handleEvent(eventName:string,$event:any):boolean {\n    var result:boolean = true;\n    return result;\n  }\n  subscribe(view:import2.AppView<any>,_eventHandler:any):void {\n    this._eventHandler = _eventHandler;\n  }\n}","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from './search';\nimport * as import1 from '@angular/core/src/linker/view';\nimport * as import2 from '@angular/core/src/render/api';\nimport * as import3 from '@angular/core/src/linker/view_utils';\nimport * as import4 from '@angular/core/src/metadata/view';\nimport * as import5 from '@angular/core/src/linker/view_type';\nimport * as import6 from '@angular/core/src/change_detection/change_detection';\nimport * as import7 from '@angular/core/src/linker/component_factory';\nimport * as import8 from '@angular/http/src/http';\nimport * as import9 from '@angular/core/src/linker/view_container';\nimport * as import10 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';\nimport * as import11 from '@angular/core/src/linker/template_ref';\nimport * as import12 from '@angular/core/src/change_detection/differs/iterable_differs';\nimport * as import13 from '@angular/common/src/directives/ng_for';\nexport class Wrapper_Search {\n  /*private*/ _eventHandler:Function;\n  context:import0.Search;\n  /*private*/ _changed:boolean;\n  constructor(p0:any) {\n    this._changed = false;\n    this.context = new import0.Search(p0);\n  }\n  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {\n  }\n  ngOnDestroy():void {\n  }\n  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {\n    var changed:any = this._changed;\n    this._changed = false;\n    return changed;\n  }\n  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {\n  }\n  handleEvent(eventName:string,$event:any):boolean {\n    var result:boolean = true;\n    return result;\n  }\n  subscribe(view:import1.AppView<any>,_eventHandler:any):void {\n    this._eventHandler = _eventHandler;\n  }\n}\nvar renderType_Search_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});\nclass View_Search_Host0 extends import1.AppView<any> {\n  _el_0:any;\n  compView_0:import1.AppView<import0.Search>;\n  _Search_0_3:Wrapper_Search;\n  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {\n    super(View_Search_Host0,renderType_Search_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);\n  }\n  createInternal(rootSelector:string):import7.ComponentRef<any> {\n    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'search',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));\n    this.compView_0 = new View_Search0(this.viewUtils,this,0,this._el_0);\n    this._Search_0_3 = new Wrapper_Search(this.injectorGet(import8.Jsonp,this.parentIndex));\n    this.compView_0.create(this._Search_0_3.context);\n    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));\n    return new import7.ComponentRef_<any>(0,this,this._el_0,this._Search_0_3.context);\n  }\n  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {\n    if (((token === import0.Search) && (0 === requestNodeIndex))) { return this._Search_0_3.context; }\n    return notFoundResult;\n  }\n  detectChangesInternal(throwOnChange:boolean):void {\n    this._Search_0_3.ngDoCheck(this,this._el_0,throwOnChange);\n    this.compView_0.detectChanges(throwOnChange);\n  }\n  destroyInternal():void {\n    this.compView_0.destroy();\n  }\n  visitRootNodesInternal(cb:any,ctx:any):void {\n    cb(this._el_0,ctx);\n  }\n}\nexport const SearchNgFactory:import7.ComponentFactory<import0.Search> = new import7.ComponentFactory<import0.Search>('search',View_Search_Host0,import0.Search);\nconst styles_Search:any[] = ([] as any[]);\nvar renderType_Search:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_Search,{});\nexport class View_Search0 extends import1.AppView<import0.Search> {\n  _text_0:any;\n  _el_1:any;\n  _text_2:any;\n  _el_3:any;\n  _text_4:any;\n  _text_5:any;\n  _el_6:any;\n  _text_7:any;\n  _el_8:any;\n  _text_9:any;\n  _text_10:any;\n  _anchor_11:any;\n  /*private*/ _vc_11:import9.ViewContainer;\n  _TemplateRef_11_5:any;\n  _NgFor_11_6:import10.Wrapper_NgFor;\n  _text_12:any;\n  _text_13:any;\n  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {\n    super(View_Search0,renderType_Search,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);\n  }\n  createInternal(rootSelector:string):import7.ComponentRef<any> {\n    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);\n    this._text_0 = this.renderer.createText(parentRenderNode,'\\n    ',(null as any));\n    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_2 = this.renderer.createText(this._el_1,'\\n      ',(null as any));\n    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'h2',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_4 = this.renderer.createText(this._el_3,'Search',(null as any));\n    this._text_5 = this.renderer.createText(this._el_1,'\\n      ',(null as any));\n    this._el_6 = import3.createRenderElement(this.renderer,this._el_1,'input',new import3.InlineArray4(4,'placeholder','Search on Wikipedia','type','text'),(null as any));\n    this._text_7 = this.renderer.createText(this._el_1,'\\n      ',(null as any));\n    this._el_8 = import3.createRenderElement(this.renderer,this._el_1,'button',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_9 = this.renderer.createText(this._el_8,'Search',(null as any));\n    this._text_10 = this.renderer.createText(this._el_1,'\\n      ',(null as any));\n    this._anchor_11 = this.renderer.createTemplateAnchor(this._el_1,(null as any));\n    this._vc_11 = new import9.ViewContainer(11,1,this,this._anchor_11);\n    this._TemplateRef_11_5 = new import11.TemplateRef_(this,11,this._anchor_11);\n    this._NgFor_11_6 = new import10.Wrapper_NgFor(this._vc_11.vcRef,this._TemplateRef_11_5,this.parentView.injectorGet(import12.IterableDiffers,this.parentIndex),this.ref);\n    this._text_12 = this.renderer.createText(this._el_1,'\\n    ',(null as any));\n    this._text_13 = this.renderer.createText(parentRenderNode,'\\n  ',(null as any));\n    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_8,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_8));\n    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [\n      this._text_0,\n      this._el_1,\n      this._text_2,\n      this._el_3,\n      this._text_4,\n      this._text_5,\n      this._el_6,\n      this._text_7,\n      this._el_8,\n      this._text_9,\n      this._text_10,\n      this._anchor_11,\n      this._text_12,\n      this._text_13\n    ]\n    ),[disposable_0]);\n    return (null as any);\n  }\n  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {\n    if (((token === import11.TemplateRef) && (11 === requestNodeIndex))) { return this._TemplateRef_11_5; }\n    if (((token === import13.NgFor) && (11 === requestNodeIndex))) { return this._NgFor_11_6.context; }\n    return notFoundResult;\n  }\n  detectChangesInternal(throwOnChange:boolean):void {\n    const currVal_11_0_0:any = this.context.pages;\n    this._NgFor_11_6.check_ngForOf(currVal_11_0_0,throwOnChange,false);\n    this._NgFor_11_6.ngDoCheck(this,this._anchor_11,throwOnChange);\n    this._vc_11.detectChangesInNestedViews(throwOnChange);\n  }\n  destroyInternal():void {\n    this._vc_11.destroyNestedViews();\n  }\n  createEmbeddedViewInternal(nodeIndex:number):import1.AppView<any> {\n    if ((nodeIndex == 11)) { return new View_Search1(this.viewUtils,this,11,this._anchor_11,this._vc_11); }\n    return (null as any);\n  }\n  handleEvent_8(eventName:string,$event:any):boolean {\n    this.markPathToRootAsCheckOnce();\n    var result:boolean = true;\n    if ((eventName == 'click')) {\n      const pd_sub_0:any = ((<any>this.context.search(this._el_6.value)) !== false);\n      result = (pd_sub_0 && result);\n    }\n    return result;\n  }\n}\nclass View_Search1 extends import1.AppView<any> {\n  _el_0:any;\n  _text_1:any;\n  /*private*/ _expr_2:any;\n  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import9.ViewContainer) {\n    super(View_Search1,renderType_Search,import5.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways,declaredViewContainer);\n    this._expr_2 = import6.UNINITIALIZED;\n  }\n  createInternal(rootSelector:string):import7.ComponentRef<any> {\n    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',import3.EMPTY_INLINE_ARRAY,(null as any));\n    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));\n    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [\n      this._el_0,\n      this._text_1\n    ]\n    ),(null as any));\n    return (null as any);\n  }\n  detectChangesInternal(throwOnChange:boolean):void {\n    const currVal_2:any = import3.inlineInterpolate(1,'',this.context.$implicit,'');\n    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {\n      this.renderer.setText(this._text_1,currVal_2);\n      this._expr_2 = currVal_2;\n    }\n  }\n  visitRootNodesInternal(cb:any,ctx:any):void {\n    cb(this._el_0,ctx);\n  }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nlet _nextRequestId = 0;\nexport const JSONP_HOME = '__ng_jsonp__';\nlet _jsonpConnections: {[key: string]: any} = null;\n\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\n\n// Make sure not to evaluate this in a non-browser environment!\n\nexport class BrowserJsonp {\n  // Construct a <script> element with the specified URL\n  build(url: string): any {\n    const node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n\n  nextRequestID(): string { return `__req${_nextRequestId++}`; }\n\n  requestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n\n  exposeConnection(id: string, connection: any) {\n    const connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n\n  removeConnection(id: string) {\n    const connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n\n  // Attach the <script> element to the DOM\n  send(node: any) { document.body.appendChild(<Node>(node)); }\n\n  // Remove <script> element from the DOM\n  cleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(<Node>(node));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * @experimental\n */\nexport abstract class JSONPConnection implements Connection {\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  readyState: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   */\n  abstract finished(data?: any): void;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\n  private _id: string;\n  private _script: Element;\n  private _responseData: any;\n  private _finished: boolean = false;\n\n  constructor(\n      req: Request, private _dom: BrowserJsonp, private baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n\n  finished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\n/**\n * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @experimental\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\n\n\nexport class JSONPBackend_ extends JSONPBackend {\n  constructor(private _browserJSONP: BrowserJsonp, private _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n\n  createConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @experimental\n */\n\nexport class BrowserXhr {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {__platform_browser_private__} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  readyState: ReadyState;\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = _xhr.response == null ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers != null) {\n        req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n      }\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n\n  setDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See {@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n  constructor(\n      private _cookieName: string = 'XSRF-TOKEN', private _headerName: string = 'X-XSRF-TOKEN') {}\n\n  configureRequest(req: Request): void {\n    const xsrfToken = __platform_browser_private__.getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\n/**\n * Creates {@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n * @Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @experimental\n */\n\nexport class XHRBackend implements ConnectionBackend {\n  constructor(\n      private _browserXHR: BrowserXhr, private _baseResponseOptions: ResponseOptions,\n      private _xsrfStrategy: XSRFStrategy) {}\n\n  createConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n\n\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {@link Response Responses} for\n * mock responses (see {@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @experimental\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers;\n  /**\n   * @internal\n   */\n  statusText: string;\n  /**\n   * @internal\n   */\n  type: ResponseType;\n  url: string;\n  constructor({body, status, headers, statusText, type, url}: ResponseOptionsArgs = {}) {\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   */\n  merge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\n/**\n * Subclass of {@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link ResponseOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create {@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @experimental\n */\n\nexport class BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n\n\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n\n\n/**\n * The module that includes http's providers\n *\n * @experimental\n */\n\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n/**\n * The module that includes jsonp's providers\n *\n * @experimental\n */\n\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @experimental\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error, or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  bytesLoaded: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  totalBytes: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers;\n\n  constructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type;\n    this.url = responseOptions.url;\n  }\n\n  toString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BrowserXhr} from './backends/browser_xhr';\nexport {JSONPBackend, JSONPConnection} from './backends/jsonp_backend';\nexport {CookieXSRFStrategy, XHRBackend, XHRConnection} from './backends/xhr_backend';\nexport {BaseRequestOptions, RequestOptions} from './base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nexport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nexport {Headers} from './headers';\nexport {Http, Jsonp} from './http';\nexport {HttpModule, JsonpModule} from './http_module';\nexport {Connection, ConnectionBackend, RequestOptionsArgs, ResponseOptionsArgs, XSRFStrategy} from './interfaces';\nexport {Request} from './static_request';\nexport {Response} from './static_response';\nexport {QueryEncoder, URLSearchParams} from './url_search_params';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nimport { Observable } from '../../Observable';\nimport { map, MapSignature } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}","import {Component} from '@angular/core'\nimport {Jsonp, URLSearchParams} from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Component({\n  selector: 'search',\n  template: `\n    <div>\n      <h2>Search</h2>\n      <input type=\"text\" placeholder=\"Search on Wikipedia\" #foo>\n      <button (click)=\"search(foo.value)\">Search</button>\n      <div *ngFor=\"let page of pages\">{{page}}</div>\n    </div>\n  `\n})\nexport class Search {\n  pages: Array<any> = [];\n\n  constructor(private jsonp: Jsonp) {}\n\n  search(text: string) {\n    if (text && text.length > 0) {\n      let wikiUrl = 'https://en.wikipedia.org/w/api.php';\n      let params = new URLSearchParams();\n      params.set('gapfrom', text);\n      params.set('gaplimit', '10');\n      params.set('generator', 'allpages');\n      params.set('action', 'query');\n      params.set('format', 'json');\n      params.set('callback', 'JSONP_CALLBACK');\n\n      this.jsonp\n        .get(wikiUrl, {search: params})\n        .map(response => <string[]> response.json())\n        .subscribe(data => {\n          this.pages = [];\n          var raw = data['query'].pages;\n          for (var key in raw) {\n            this.pages.push(raw[key].title);\n          }\n        });\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * var options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * var req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @experimental\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  search: URLSearchParams;\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType;\n\n  constructor(\n      {method, headers, body, url, search, withCredentials,\n       responseType}: RequestOptionsArgs = {}) {\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.search =\n        search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * var options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * var req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  merge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      search: options && options.search != null ?\n          (typeof options.search === 'string' ? new URLSearchParams(options.search) :\n                                                options.search.clone()) :\n          this.search,\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n}\n\n\n/**\n * Subclass of {@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {@link RequestMethod RequestMethod.Get}\n *  * headers: empty {@link Headers} object\n *\n * This class could be extended and bound to the {@link RequestOptions} class\n * when configuring an {@link Injector}, in order to override the default options\n * used by {@link Http} to create and send {@link Request Requests}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n *\n * ```typescript\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {@link Request}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * var options = new BaseRequestOptions();\n * var req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @experimental\n */\n\nexport class BaseRequestOptions extends RequestOptions {\n  constructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @experimental\n */\nexport abstract class ConnectionBackend { abstract createConnection(request: any): Connection; }\n\n/**\n * Abstract class from which real connections are derived.\n *\n * @experimental\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @experimental\n */\nexport abstract class XSRFStrategy { abstract configureRequest(req: Request): void; }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface RequestOptionsArgs {\n  url?: string;\n  method?: string|RequestMethod;\n  search?: string|URLSearchParams;\n  headers?: Headers;\n  body?: any;\n  withCredentials?: boolean;\n  responseType?: ResponseContentType;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @experimental\n */\nexport type ResponseOptionsArgs = {\n  body?: string | Object | FormData | ArrayBuffer | Blob; status?: number; statusText?: string;\n  headers?: Headers;\n  type?: ResponseType;\n  url?: string;\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n\n\n/**\n * HTTP request body used by both {@link Request} and {@link Response}\n * https://fetch.spec.whatwg.org/#body\n */\nexport abstract class Body {\n  /**\n   * @internal\n   */\n  protected _body: any;\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse(<string>this._body);\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   */\n  text(): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return String.fromCharCode.apply(null, new Uint16Array(<ArrayBuffer>this._body));\n    }\n\n    if (this._body === null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n\n  /**\n   * Return the body as an ArrayBuffer\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return <ArrayBuffer>this._body;\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n\n  /**\n    * Returns the request's body as a Blob, assuming that body exists.\n    */\n  blob(): Blob {\n    if (this._body instanceof Blob) {\n      return <Blob>this._body;\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @experimental\n */\nexport class Headers {\n  /** @internal header names are lower case */\n  _headers: Map<string, string[]> = new Map();\n  /** @internal map lower case names to actual names */\n  _normalizedNames: Map<string, string> = new Map();\n\n  // TODO(vicb): any -> string|string[]\n  constructor(headers?: Headers|{[name: string]: any}) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   */\n  static fromResponseHeaderString(headersString: string): Headers {\n    const headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const index = line.indexOf(':');\n      if (index > 0) {\n        const name = line.slice(0, index);\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   */\n  append(name: string, value: string): void {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n\n  /**\n   * Deletes all header values for the given name.\n   */\n  delete (name: string): void {\n    const lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n\n  forEach(fn: (values: string[], name: string, headers: Map<string, string[]>) => void): void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n\n  /**\n   * Returns first header that matches given name.\n   */\n  get(name: string): string {\n    const values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Checks for existence of header by given name.\n   */\n  has(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n\n  /**\n   * Returns the names of the headers\n   */\n  keys(): string[] { return Array.from(this._normalizedNames.values()); }\n\n  /**\n   * Sets or overrides header value for given name.\n   */\n  set(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n\n  /**\n   * Returns values of all headers.\n   */\n  values(): string[][] { return Array.from(this._headers.values()); }\n\n  /**\n   * Returns string of all headers.\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  toJSON(): {[name: string]: any} {\n    const serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name)] = split;\n    });\n\n    return serialized;\n  }\n\n  /**\n   * Returns list of header values for a given name.\n   */\n  getAll(name: string): string[] {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n  }\n\n  /**\n   * This method is not implemented.\n   */\n  entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n\n  private mayBeSetNormalizedName(name: string): void {\n    const lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Supported http methods.\n * @experimental\n */\nexport enum RequestMethod {\n  Get,\n  Post,\n  Put,\n  Delete,\n  Options,\n  Head,\n  Patch\n}\n\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @experimental\n */\nexport enum ReadyState {\n  Unsent,\n  Open,\n  HeadersReceived,\n  Loading,\n  Done,\n  Cancelled\n}\n\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @experimental\n */\nexport enum ResponseType {\n  Basic,\n  Cors,\n  Default,\n  Error,\n  Opaque\n}\n\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @experimental\n */\nexport enum ContentType {\n  NONE,\n  JSON,\n  FORM,\n  FORM_DATA,\n  TEXT,\n  BLOB,\n  ARRAY_BUFFER\n}\n\n/**\n * Define which buffer to use to store the response\n * @experimental\n */\nexport enum ResponseContentType {\n  Text,\n  Json,\n  ArrayBuffer,\n  Blob\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return;\n}\n\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @experimental\n **/\nexport class QueryEncoder {\n  encodeKey(k: string): string { return standardEncoding(k); }\n\n  encodeValue(v: string): string { return standardEncoding(v); }\n}\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n  constructor(\n      public rawParams: string = '', private queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n\n  clone(): URLSearchParams {\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n\n  has(param: string): boolean { return this.paramsMap.has(param); }\n\n  get(param: string): string {\n    const storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n\n  getAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n\n  set(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  setAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  append(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  appendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  replaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  toString(): string {\n    const paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n\n  delete (param: string): void { this.paramsMap.delete(param); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @experimental\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\n  /** Type of the request body **/\n  private contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n  constructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url;\n    if (requestOptions.search) {\n      const search = requestOptions.search.toString();\n      if (search.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + search;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials;\n    this.responseType = requestOptions.responseType;\n  }\n\n  /**\n   * Returns the content type enum based on header options.\n   */\n  detectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  detectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body == 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  getBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nconst noop = function() {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = (w as any /** TODO #9100 */)['FormData'] || noop;\nconst Blob = (w as any /** TODO #9100 */)['Blob'] || noop;\nconst ArrayBuffer = (w as any /** TODO #9100 */)['ArrayBuffer'] || noop;\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs, method: RequestMethod,\n    url: string): RequestOptions {\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    }));\n  }\n\n  return newOptions.merge(new RequestOptions({method, url}));\n}\n\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '@angular/http';\n * import 'rxjs/add/operator/map'\n * @Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @experimental\n */\n\nexport class Http {\n  constructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n\n  /**\n   * Performs a request with `get` http method.\n   */\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n\n  /**\n   * Performs a request with `post` http method.\n   */\n  post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n\n  /**\n   * Performs a request with `put` http method.\n   */\n  put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n\n  /**\n   * Performs a request with `delete` http method.\n   */\n  delete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n\n  /**\n   * Performs a request with `patch` http method.\n   */\n  patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n\n  /**\n   * Performs a request with `head` http method.\n   */\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n\n  /**\n   * Performs a request with `options` http method.\n   */\n  options(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\n\n/**\n * @experimental\n */\n\nexport class Jsonp extends Http {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {@link BaseRequestOptions} before performing the request.\n   *\n   * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, <string>url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @fileoverview This file is generated by the Angular 2 template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties}\n */\n /* tslint:disable */\n\nimport * as import0 from '@angular/core/src/linker/ng_module_factory';\nimport * as import1 from './search.module';\nimport * as import2 from '@angular/common/src/common_module';\nimport * as import3 from '@angular/http/src/http_module';\nimport * as import4 from '@angular/router/src/router_module';\nimport * as import5 from '@angular/common/src/localization';\nimport * as import6 from '@angular/http/src/backends/browser_xhr';\nimport * as import7 from '@angular/http/src/base_response_options';\nimport * as import8 from '@angular/http/src/backends/xhr_backend';\nimport * as import9 from '@angular/http/src/base_request_options';\nimport * as import10 from '@angular/http/src/backends/browser_jsonp';\nimport * as import11 from '@angular/http/src/backends/jsonp_backend';\nimport * as import12 from '@angular/core/src/di/injector';\nimport * as import13 from './search.ngfactory';\nimport * as import14 from '@angular/core/src/i18n/tokens';\nimport * as import15 from './search';\nimport * as import16 from '@angular/http/src/interfaces';\nimport * as import17 from '@angular/http/src/http';\nimport * as import18 from '@angular/router/src/router_config_loader';\nclass SearchModuleInjector extends import0.NgModuleInjector<import1.SearchModule> {\n  _CommonModule_0:import2.CommonModule;\n  _HttpModule_1:import3.HttpModule;\n  _JsonpModule_2:import3.JsonpModule;\n  _RouterModule_3:import4.RouterModule;\n  _SearchModule_4:import1.SearchModule;\n  __NgLocalization_5:import5.NgLocaleLocalization;\n  __BrowserXhr_6:import6.BrowserXhr;\n  __ResponseOptions_7:import7.BaseResponseOptions;\n  __XSRFStrategy_8:any;\n  __XHRBackend_9:import8.XHRBackend;\n  __RequestOptions_10:import9.BaseRequestOptions;\n  __Http_11:any;\n  __BrowserJsonp_12:import10.BrowserJsonp;\n  __JSONPBackend_13:import11.JSONPBackend_;\n  __Jsonp_14:any;\n  __ROUTES_15:any[];\n  constructor(parent:import12.Injector) {\n    super(parent,[import13.SearchNgFactory],([] as any[]));\n  }\n  get _NgLocalization_5():import5.NgLocaleLocalization {\n    if ((this.__NgLocalization_5 == null)) { (this.__NgLocalization_5 = new import5.NgLocaleLocalization(this.parent.get(import14.LOCALE_ID))); }\n    return this.__NgLocalization_5;\n  }\n  get _BrowserXhr_6():import6.BrowserXhr {\n    if ((this.__BrowserXhr_6 == null)) { (this.__BrowserXhr_6 = new import6.BrowserXhr()); }\n    return this.__BrowserXhr_6;\n  }\n  get _ResponseOptions_7():import7.BaseResponseOptions {\n    if ((this.__ResponseOptions_7 == null)) { (this.__ResponseOptions_7 = new import7.BaseResponseOptions()); }\n    return this.__ResponseOptions_7;\n  }\n  get _XSRFStrategy_8():any {\n    if ((this.__XSRFStrategy_8 == null)) { (this.__XSRFStrategy_8 = import3._createDefaultCookieXSRFStrategy()); }\n    return this.__XSRFStrategy_8;\n  }\n  get _XHRBackend_9():import8.XHRBackend {\n    if ((this.__XHRBackend_9 == null)) { (this.__XHRBackend_9 = new import8.XHRBackend(this._BrowserXhr_6,this._ResponseOptions_7,this._XSRFStrategy_8)); }\n    return this.__XHRBackend_9;\n  }\n  get _RequestOptions_10():import9.BaseRequestOptions {\n    if ((this.__RequestOptions_10 == null)) { (this.__RequestOptions_10 = new import9.BaseRequestOptions()); }\n    return this.__RequestOptions_10;\n  }\n  get _Http_11():any {\n    if ((this.__Http_11 == null)) { (this.__Http_11 = import3.httpFactory(this._XHRBackend_9,this._RequestOptions_10)); }\n    return this.__Http_11;\n  }\n  get _BrowserJsonp_12():import10.BrowserJsonp {\n    if ((this.__BrowserJsonp_12 == null)) { (this.__BrowserJsonp_12 = new import10.BrowserJsonp()); }\n    return this.__BrowserJsonp_12;\n  }\n  get _JSONPBackend_13():import11.JSONPBackend_ {\n    if ((this.__JSONPBackend_13 == null)) { (this.__JSONPBackend_13 = new import11.JSONPBackend_(this._BrowserJsonp_12,this._ResponseOptions_7)); }\n    return this.__JSONPBackend_13;\n  }\n  get _Jsonp_14():any {\n    if ((this.__Jsonp_14 == null)) { (this.__Jsonp_14 = import3.jsonpFactory(this._JSONPBackend_13,this._RequestOptions_10)); }\n    return this.__Jsonp_14;\n  }\n  get _ROUTES_15():any[] {\n        if ((this.__ROUTES_15 == null)) { (this.__ROUTES_15 = [[{\n          path: '',\n          component: import15.Search\n        }\n    ]]); }\n    return this.__ROUTES_15;\n  }\n  createInternal():import1.SearchModule {\n    this._CommonModule_0 = new import2.CommonModule();\n    this._HttpModule_1 = new import3.HttpModule();\n    this._JsonpModule_2 = new import3.JsonpModule();\n    this._RouterModule_3 = new import4.RouterModule(this.parent.get(import4.ROUTER_FORROOT_GUARD,(null as any)));\n    this._SearchModule_4 = new import1.SearchModule();\n    return this._SearchModule_4;\n  }\n  getInternal(token:any,notFoundResult:any):any {\n    if ((token === import2.CommonModule)) { return this._CommonModule_0; }\n    if ((token === import3.HttpModule)) { return this._HttpModule_1; }\n    if ((token === import3.JsonpModule)) { return this._JsonpModule_2; }\n    if ((token === import4.RouterModule)) { return this._RouterModule_3; }\n    if ((token === import1.SearchModule)) { return this._SearchModule_4; }\n    if ((token === import5.NgLocalization)) { return this._NgLocalization_5; }\n    if ((token === import6.BrowserXhr)) { return this._BrowserXhr_6; }\n    if ((token === import7.ResponseOptions)) { return this._ResponseOptions_7; }\n    if ((token === import16.XSRFStrategy)) { return this._XSRFStrategy_8; }\n    if ((token === import8.XHRBackend)) { return this._XHRBackend_9; }\n    if ((token === import9.RequestOptions)) { return this._RequestOptions_10; }\n    if ((token === import17.Http)) { return this._Http_11; }\n    if ((token === import10.BrowserJsonp)) { return this._BrowserJsonp_12; }\n    if ((token === import11.JSONPBackend)) { return this._JSONPBackend_13; }\n    if ((token === import17.Jsonp)) { return this._Jsonp_14; }\n    if ((token === import18.ROUTES)) { return this._ROUTES_15; }\n    return notFoundResult;\n  }\n  destroyInternal():void {\n  }\n}\nexport const SearchModuleNgFactory:import0.NgModuleFactory<import1.SearchModule> = new import0.NgModuleFactory(SearchModuleInjector,import1.SearchModule);"]}