{"version":3,"sources":["../../../node_modules/rxjs/src/observable/BoundCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindCallback.ts","../../../node_modules/rxjs/src/add/observable/bindCallback.ts","../../../node_modules/rxjs/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/add/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/observable/combineLatest.ts","../../../node_modules/rxjs/src/add/observable/combineLatest.ts","../../../node_modules/rxjs/src/observable/concat.ts","../../../node_modules/rxjs/src/add/observable/concat.ts","../../../node_modules/rxjs/src/observable/DeferObservable.ts","../../../node_modules/rxjs/src/observable/defer.ts","../../../node_modules/rxjs/src/add/observable/defer.ts","../../../node_modules/rxjs/src/observable/empty.ts","../../../node_modules/rxjs/src/add/observable/empty.ts","../../../node_modules/rxjs/src/observable/ForkJoinObservable.ts","../../../node_modules/rxjs/src/observable/forkJoin.ts","../../../node_modules/rxjs/src/add/observable/forkJoin.ts","../../../node_modules/rxjs/src/observable/from.ts","../../../node_modules/rxjs/src/add/observable/from.ts","../../../node_modules/rxjs/src/observable/FromEventObservable.ts","../../../node_modules/rxjs/src/observable/fromEvent.ts","../../../node_modules/rxjs/src/add/observable/fromEvent.ts","../../../node_modules/rxjs/src/observable/FromEventPatternObservable.ts","../../../node_modules/rxjs/src/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/add/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/observable/fromPromise.ts","../../../node_modules/rxjs/src/add/observable/fromPromise.ts","../../../node_modules/rxjs/src/observable/GenerateObservable.ts","../../../node_modules/rxjs/src/add/observable/generate.ts","../../../node_modules/rxjs/src/observable/IfObservable.ts","../../../node_modules/rxjs/src/observable/if.ts","../../../node_modules/rxjs/src/add/observable/if.ts","../../../node_modules/rxjs/src/observable/IntervalObservable.ts","../../../node_modules/rxjs/src/observable/interval.ts","../../../node_modules/rxjs/src/add/observable/interval.ts","../../../node_modules/rxjs/src/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/race.ts","../../../node_modules/rxjs/src/observable/NeverObservable.ts","../../../node_modules/rxjs/src/observable/never.ts","../../../node_modules/rxjs/src/add/observable/never.ts","../../../node_modules/rxjs/src/observable/of.ts","../../../node_modules/rxjs/src/add/observable/of.ts","../../../node_modules/rxjs/src/add/observable/onErrorResumeNext.ts","../../../node_modules/rxjs/src/observable/PairsObservable.ts","../../../node_modules/rxjs/src/observable/pairs.ts","../../../node_modules/rxjs/src/add/observable/pairs.ts","../../../node_modules/rxjs/src/observable/RangeObservable.ts","../../../node_modules/rxjs/src/observable/range.ts","../../../node_modules/rxjs/src/add/observable/range.ts","../../../node_modules/rxjs/src/observable/UsingObservable.ts","../../../node_modules/rxjs/src/observable/using.ts","../../../node_modules/rxjs/src/add/observable/using.ts","../../../node_modules/rxjs/src/observable/ErrorObservable.ts","../../../node_modules/rxjs/src/observable/throw.ts","../../../node_modules/rxjs/src/add/observable/throw.ts","../../../node_modules/rxjs/src/observable/TimerObservable.ts","../../../node_modules/rxjs/src/observable/timer.ts","../../../node_modules/rxjs/src/add/observable/timer.ts","../../../node_modules/rxjs/src/observable/zip.ts","../../../node_modules/rxjs/src/add/observable/zip.ts","../../../node_modules/rxjs/src/observable/dom/ajax.ts","../../../node_modules/rxjs/src/add/observable/dom/ajax.ts","../../../node_modules/rxjs/src/util/assign.ts","../../../node_modules/rxjs/src/observable/dom/WebSocketSubject.ts","../../../node_modules/rxjs/src/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/add/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/operator/buffer.ts","../../../node_modules/rxjs/src/add/operator/buffer.ts","../../../node_modules/rxjs/src/operator/bufferCount.ts","../../../node_modules/rxjs/src/add/operator/bufferCount.ts","../../../node_modules/rxjs/src/operator/bufferTime.ts","../../../node_modules/rxjs/src/add/operator/bufferTime.ts","../../../node_modules/rxjs/src/operator/bufferToggle.ts","../../../node_modules/rxjs/src/add/operator/bufferToggle.ts","../../../node_modules/rxjs/src/operator/bufferWhen.ts","../../../node_modules/rxjs/src/add/operator/bufferWhen.ts","../../../node_modules/rxjs/src/operator/catch.ts","../../../node_modules/rxjs/src/add/operator/catch.ts","../../../node_modules/rxjs/src/operator/combineAll.ts","../../../node_modules/rxjs/src/add/operator/combineAll.ts","../../../node_modules/rxjs/src/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/concat.ts","../../../node_modules/rxjs/src/operator/concatAll.ts","../../../node_modules/rxjs/src/add/operator/concatAll.ts","../../../node_modules/rxjs/src/operator/concatMap.ts","../../../node_modules/rxjs/src/add/operator/concatMap.ts","../../../node_modules/rxjs/src/operator/concatMapTo.ts","../../../node_modules/rxjs/src/add/operator/concatMapTo.ts","../../../node_modules/rxjs/src/operator/count.ts","../../../node_modules/rxjs/src/add/operator/count.ts","../../../node_modules/rxjs/src/operator/dematerialize.ts","../../../node_modules/rxjs/src/add/operator/dematerialize.ts","../../../node_modules/rxjs/src/operator/debounce.ts","../../../node_modules/rxjs/src/add/operator/debounce.ts","../../../node_modules/rxjs/src/operator/debounceTime.ts","../../../node_modules/rxjs/src/add/operator/debounceTime.ts","../../../node_modules/rxjs/src/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/add/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/operator/delay.ts","../../../node_modules/rxjs/src/add/operator/delay.ts","../../../node_modules/rxjs/src/operator/delayWhen.ts","../../../node_modules/rxjs/src/add/operator/delayWhen.ts","../../../node_modules/rxjs/src/util/Set.ts","../../../node_modules/rxjs/src/operator/distinct.ts","../../../node_modules/rxjs/src/add/operator/distinct.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/operator/do.ts","../../../node_modules/rxjs/src/add/operator/do.ts","../../../node_modules/rxjs/src/operator/exhaust.ts","../../../node_modules/rxjs/src/add/operator/exhaust.ts","../../../node_modules/rxjs/src/operator/exhaustMap.ts","../../../node_modules/rxjs/src/add/operator/exhaustMap.ts","../../../node_modules/rxjs/src/operator/expand.ts","../../../node_modules/rxjs/src/add/operator/expand.ts","../../../node_modules/rxjs/src/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/filter.ts","../../../node_modules/rxjs/src/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/find.ts","../../../node_modules/rxjs/src/operator/find.ts","../../../node_modules/rxjs/src/operator/findIndex.ts","../../../node_modules/rxjs/src/add/operator/findIndex.ts","../../../node_modules/rxjs/src/operator/first.ts","../../../node_modules/rxjs/src/add/operator/first.ts","../../../node_modules/rxjs/src/util/MapPolyfill.ts","../../../node_modules/rxjs/src/util/Map.ts","../../../node_modules/rxjs/src/util/FastMap.ts","../../../node_modules/rxjs/src/operator/groupBy.ts","../../../node_modules/rxjs/src/add/operator/groupBy.ts","../../../node_modules/rxjs/src/util/noop.ts","../../../node_modules/rxjs/src/operator/ignoreElements.ts","../../../node_modules/rxjs/src/add/operator/ignoreElements.ts","../../../node_modules/rxjs/src/operator/isEmpty.ts","../../../node_modules/rxjs/src/add/operator/isEmpty.ts","../../../node_modules/rxjs/src/operator/audit.ts","../../../node_modules/rxjs/src/add/operator/audit.ts","../../../node_modules/rxjs/src/operator/auditTime.ts","../../../node_modules/rxjs/src/add/operator/auditTime.ts","../../../node_modules/rxjs/src/operator/last.ts","../../../node_modules/rxjs/src/add/operator/last.ts","../../../node_modules/rxjs/src/operator/let.ts","../../../node_modules/rxjs/src/add/operator/let.ts","../../../node_modules/rxjs/src/operator/every.ts","../../../node_modules/rxjs/src/add/operator/every.ts","../../../node_modules/rxjs/src/add/operator/map.ts","../../../node_modules/rxjs/src/operator/mapTo.ts","../../../node_modules/rxjs/src/add/operator/mapTo.ts","../../../node_modules/rxjs/src/operator/materialize.ts","../../../node_modules/rxjs/src/add/operator/materialize.ts","../../../node_modules/rxjs/src/operator/max.ts","../../../node_modules/rxjs/src/add/operator/max.ts","../../../node_modules/rxjs/src/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/mergeMap.ts","../../../node_modules/rxjs/src/add/operator/mergeMap.ts","../../../node_modules/rxjs/src/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/add/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/operator/mergeScan.ts","../../../node_modules/rxjs/src/add/operator/mergeScan.ts","../../../node_modules/rxjs/src/operator/min.ts","../../../node_modules/rxjs/src/add/operator/min.ts","../../../node_modules/rxjs/src/add/operator/multicast.ts","../../../node_modules/rxjs/src/add/operator/observeOn.ts","../../../node_modules/rxjs/src/observable/PromiseObservable.ts","../../../node_modules/rxjs/src/observable/IteratorObservable.ts","../../../node_modules/rxjs/src/observable/ArrayLikeObservable.ts","../../../node_modules/rxjs/src/observable/FromObservable.ts","../../../node_modules/rxjs/src/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/add/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/operator/pairwise.ts","../../../node_modules/rxjs/src/add/operator/pairwise.ts","../../../node_modules/rxjs/src/util/not.ts","../../../node_modules/rxjs/src/operator/filter.ts","../../../node_modules/rxjs/src/operator/partition.ts","../../../node_modules/rxjs/src/add/operator/partition.ts","../../../node_modules/rxjs/src/operator/pluck.ts","../../../node_modules/rxjs/src/add/operator/pluck.ts","../../../node_modules/rxjs/src/operator/publish.ts","../../../node_modules/rxjs/src/add/operator/publish.ts","../../../node_modules/rxjs/src/operator/publishBehavior.ts","../../../node_modules/rxjs/src/add/operator/publishBehavior.ts","../../../node_modules/rxjs/src/operator/publishReplay.ts","../../../node_modules/rxjs/src/add/operator/publishReplay.ts","../../../node_modules/rxjs/src/operator/publishLast.ts","../../../node_modules/rxjs/src/add/operator/publishLast.ts","../../../node_modules/rxjs/src/operator/race.ts","../../../node_modules/rxjs/src/add/operator/race.ts","../../../node_modules/rxjs/src/operator/reduce.ts","../../../node_modules/rxjs/src/add/operator/reduce.ts","../../../node_modules/rxjs/src/operator/repeat.ts","../../../node_modules/rxjs/src/add/operator/repeat.ts","../../../node_modules/rxjs/src/operator/repeatWhen.ts","../../../node_modules/rxjs/src/add/operator/repeatWhen.ts","../../../node_modules/rxjs/src/operator/retry.ts","../../../node_modules/rxjs/src/add/operator/retry.ts","../../../node_modules/rxjs/src/operator/retryWhen.ts","../../../node_modules/rxjs/src/add/operator/retryWhen.ts","../../../node_modules/rxjs/src/operator/sample.ts","../../../node_modules/rxjs/src/add/operator/sample.ts","../../../node_modules/rxjs/src/operator/sampleTime.ts","../../../node_modules/rxjs/src/add/operator/sampleTime.ts","../../../node_modules/rxjs/src/operator/scan.ts","../../../node_modules/rxjs/src/add/operator/scan.ts","../../../node_modules/rxjs/src/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/add/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/operator/multicast.ts","../../../node_modules/rxjs/src/operator/share.ts","../../../node_modules/rxjs/src/add/operator/share.ts","../../../node_modules/rxjs/src/operator/single.ts","../../../node_modules/rxjs/src/add/operator/single.ts","../../../node_modules/rxjs/src/operator/skip.ts","../../../node_modules/rxjs/src/add/operator/skip.ts","../../../node_modules/rxjs/src/operator/skipUntil.ts","../../../node_modules/rxjs/src/add/operator/skipUntil.ts","../../../node_modules/rxjs/src/operator/skipWhile.ts","../../../node_modules/rxjs/src/add/operator/skipWhile.ts","../../../node_modules/rxjs/src/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/concat.ts","../../../node_modules/rxjs/src/operator/startWith.ts","../../../node_modules/rxjs/src/add/operator/startWith.ts","../../../node_modules/rxjs/src/util/isNumeric.ts","../../../node_modules/rxjs/src/observable/SubscribeOnObservable.ts","../../../node_modules/rxjs/src/operator/subscribeOn.ts","../../../node_modules/rxjs/src/add/operator/subscribeOn.ts","../../../node_modules/rxjs/src/operator/switch.ts","../../../node_modules/rxjs/src/add/operator/switch.ts","../../../node_modules/rxjs/src/operator/switchMap.ts","../../../node_modules/rxjs/src/add/operator/switchMap.ts","../../../node_modules/rxjs/src/operator/switchMapTo.ts","../../../node_modules/rxjs/src/add/operator/switchMapTo.ts","../../../node_modules/rxjs/src/operator/take.ts","../../../node_modules/rxjs/src/add/operator/take.ts","../../../node_modules/rxjs/src/operator/takeLast.ts","../../../node_modules/rxjs/src/add/operator/takeLast.ts","../../../node_modules/rxjs/src/operator/takeUntil.ts","../../../node_modules/rxjs/src/add/operator/takeUntil.ts","../../../node_modules/rxjs/src/operator/takeWhile.ts","../../../node_modules/rxjs/src/add/operator/takeWhile.ts","../../../node_modules/rxjs/src/operator/throttle.ts","../../../node_modules/rxjs/src/add/operator/throttle.ts","../../../node_modules/rxjs/src/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timeout.ts","../../../node_modules/rxjs/src/add/operator/timeout.ts","../../../node_modules/rxjs/src/util/isDate.ts","../../../node_modules/rxjs/src/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timestamp.ts","../../../node_modules/rxjs/src/operator/toArray.ts","../../../node_modules/rxjs/src/add/operator/toArray.ts","../../../node_modules/rxjs/src/operator/toPromise.ts","../../../node_modules/rxjs/src/add/operator/toPromise.ts","../../../node_modules/rxjs/src/operator/window.ts","../../../node_modules/rxjs/src/add/operator/window.ts","../../../node_modules/rxjs/src/operator/windowCount.ts","../../../node_modules/rxjs/src/add/operator/windowCount.ts","../../../node_modules/rxjs/src/operator/windowTime.ts","../../../node_modules/rxjs/src/add/operator/windowTime.ts","../../../node_modules/rxjs/src/operator/windowToggle.ts","../../../node_modules/rxjs/src/add/operator/windowToggle.ts","../../../node_modules/rxjs/src/operator/windowWhen.ts","../../../node_modules/rxjs/src/add/operator/windowWhen.ts","../../../node_modules/rxjs/src/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/zip.ts","../../../node_modules/rxjs/src/observable/ScalarObservable.ts","../../../node_modules/rxjs/src/observable/EmptyObservable.ts","../../../node_modules/rxjs/src/util/isScheduler.ts","../../../node_modules/rxjs/src/observable/ArrayObservable.ts","../../../node_modules/rxjs/src/OuterSubscriber.ts","../../../node_modules/rxjs/src/util/isPromise.ts","../../../node_modules/rxjs/src/InnerSubscriber.ts","../../../node_modules/rxjs/src/util/subscribeToResult.ts","../../../node_modules/rxjs/src/operator/zip.ts","../../../node_modules/rxjs/src/operator/zipAll.ts","../../../node_modules/rxjs/src/add/operator/zipAll.ts","../../../node_modules/rxjs/src/AsyncSubject.ts","../../../node_modules/rxjs/src/operator/observeOn.ts","../../../node_modules/rxjs/src/ReplaySubject.ts","../../../node_modules/rxjs/src/BehaviorSubject.ts","../../../node_modules/rxjs/src/observable/ConnectableObservable.ts","../../../node_modules/rxjs/src/util/EmptyError.ts","../../../node_modules/rxjs/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/rxjs/src/util/TimeoutError.ts","../../../node_modules/rxjs/src/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timestamp.ts","../../../node_modules/rxjs/src/Notification.ts","../../../node_modules/rxjs/src/testing/ColdObservable.ts","../../../node_modules/rxjs/src/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/SubjectSubscription.ts","../../../node_modules/rxjs/src/Subject.ts","../../../node_modules/rxjs/src/testing/SubscriptionLoggable.ts","../../../node_modules/rxjs/src/util/applyMixins.ts","../../../node_modules/rxjs/src/testing/HotObservable.ts","../../../node_modules/rxjs/src/testing/SubscriptionLog.ts","../../../node_modules/rxjs/src/testing/TestScheduler.ts","../../../node_modules/rxjs/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/rxjs/src/util/toSubscriber.ts","../../../node_modules/rxjs/src/Observable.ts","../../../node_modules/rxjs/src/Observer.ts","../../../node_modules/rxjs/src/Subscriber.ts","../../../node_modules/rxjs/src/operator/map.ts","../../../node_modules/rxjs/src/observable/dom/AjaxObservable.ts","../../../node_modules/rxjs/src/util/Immediate.ts","../../../node_modules/rxjs/src/scheduler/AsapAction.ts","../../../node_modules/rxjs/src/scheduler/AsapScheduler.ts","../../../node_modules/rxjs/src/scheduler/asap.ts","../../../node_modules/rxjs/src/scheduler/async.ts","../../../node_modules/rxjs/src/scheduler/QueueAction.ts","../../../node_modules/rxjs/src/scheduler/QueueScheduler.ts","../../../node_modules/rxjs/src/scheduler/queue.ts","../../../node_modules/rxjs/src/util/isArray.ts","../../../node_modules/rxjs/src/util/isObject.ts","../../../node_modules/rxjs/src/util/isFunction.ts","../../../node_modules/rxjs/src/util/tryCatch.ts","../../../node_modules/rxjs/src/util/errorObject.ts","../../../node_modules/rxjs/src/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/Subscription.ts","../../../node_modules/rxjs/src/scheduler/Action.ts","../../../node_modules/rxjs/src/scheduler/AsyncAction.ts","../../../node_modules/rxjs/src/util/AnimationFrame.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameAction.ts","../../../node_modules/rxjs/src/Scheduler.ts","../../../node_modules/rxjs/src/scheduler/AsyncScheduler.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/rxjs/src/scheduler/animationFrame.ts","../../../node_modules/rxjs/src/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/symbol/iterator.ts","../../../node_modules/rxjs/src/util/root.ts","../../../node_modules/rxjs/src/symbol/observable.ts","../../../node_modules/rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","startOn","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","context","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","remove","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","catch_1","catch","combineAll","combineAll_1","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","slice","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","distinct","keySelector","flushes","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinctUntilChanged_1","distinctUntilChanged","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_keys","get","set","delete","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","subjectSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","accumulator","hasSeed","ReduceSubscriber","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","notifications","retries","retriesSubscription","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutError","errorInstance","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","isObject_1","isObject","msg","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","EMPTY","thrownError","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","ObjectUnsubscribedError_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObjectUnsubscribedError","SubjectSubscription","eventsCount","spliceCount","_value","getValue","ConnectableObservable","_refCount","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","RefCountOperator","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","subscriberIndex","rxSubscriber_1","$$rxSubscriber","copy","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","open","setHeaders","setupEvents","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","responseText","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","tryCatcher","tryCatchTarget","UnsubscriptionError","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","symbolIteratorPonyfill","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  Scheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   * \n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console everytime a click\n   * // occurs on the document.\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable<T> extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: T, scheduler?: Scheduler): ErrorObservable<T> {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: T, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = this.count++;\n    const { destination, bufferSize, startBufferEvery, buffers } = this;\n    const startOn = (startBufferEvery == null) ? bufferSize : startBufferEvery;\n\n    if (count % startOn === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n/* tslint:disable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * \n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n * @param {function} [keySelector] optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:disable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x \n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: Scheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will \n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and \n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * \n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>, project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { Scheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate, thisArg),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Scheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n  acc: T | R;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed: R,\n              private hasSeed: boolean) {\n    super(destination);\n    this.acc = seed;\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ScanOperator(accumulator, seed, hasSeed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R, private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: Scheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n * \n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * \n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | Scheduler>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Action } from '../scheduler/Action';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new SubscribeOnOperator<T>(scheduler, delay));\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>, duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n * @param {number} due\n * @param {Scheduler} [scheduler]\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: Scheduler = async): Observable<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: Scheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: Scheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout(): void {\n    this.error(this.errorInstance);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: Scheduler): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  } else if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Scheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subscribe: { value: (<any> ConnectableObservable.prototype)._subscribe },\n  getSubject: { value: (<any> ConnectableObservable.prototype).getSubject },\n  connect: { value: (<any> ConnectableObservable.prototype).connect },\n  refCount: { value: (<any> ConnectableObservable.prototype).refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: Scheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: Scheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(this: Observable<T>, subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        xhr.onprogress = xhrProgress;\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const $$iterator = symbolIteratorPonyfill(root);","declare let global: NodeJS.Global;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\n/**\n * window: browser in DOM main thread\n * self: browser in WebWorker\n * global: Node.js/other\n */\nexport const root: any = (\n     typeof window == 'object' && window.window === window && window\n  || typeof self == 'object' && self.self === self && self\n  || typeof global == 'object' && global.global === global && global\n);\n\nif (!root) {\n  throw new Error('RxJS could not find any global context (window, self, global)');\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}