{"version":3,"sources":["../../../node_modules/rxjs/src/observable/BoundCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindCallback.ts","../../../node_modules/rxjs/src/add/observable/bindCallback.ts","../../../node_modules/rxjs/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/add/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/observable/combineLatest.ts","../../../node_modules/rxjs/src/add/observable/combineLatest.ts","../../../node_modules/rxjs/src/observable/concat.ts","../../../node_modules/rxjs/src/add/observable/concat.ts","../../../node_modules/rxjs/src/observable/DeferObservable.ts","../../../node_modules/rxjs/src/observable/defer.ts","../../../node_modules/rxjs/src/add/observable/defer.ts","../../../node_modules/rxjs/src/observable/empty.ts","../../../node_modules/rxjs/src/add/observable/empty.ts","../../../node_modules/rxjs/src/observable/ForkJoinObservable.ts","../../../node_modules/rxjs/src/observable/forkJoin.ts","../../../node_modules/rxjs/src/add/observable/forkJoin.ts","../../../node_modules/rxjs/src/observable/from.ts","../../../node_modules/rxjs/src/add/observable/from.ts","../../../node_modules/rxjs/src/observable/FromEventObservable.ts","../../../node_modules/rxjs/src/observable/fromEvent.ts","../../../node_modules/rxjs/src/add/observable/fromEvent.ts","../../../node_modules/rxjs/src/observable/FromEventPatternObservable.ts","../../../node_modules/rxjs/src/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/add/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/observable/fromPromise.ts","../../../node_modules/rxjs/src/add/observable/fromPromise.ts","../../../node_modules/rxjs/src/observable/GenerateObservable.ts","../../../node_modules/rxjs/src/add/observable/generate.ts","../../../node_modules/rxjs/src/observable/IfObservable.ts","../../../node_modules/rxjs/src/observable/if.ts","../../../node_modules/rxjs/src/add/observable/if.ts","../../../node_modules/rxjs/src/observable/IntervalObservable.ts","../../../node_modules/rxjs/src/observable/interval.ts","../../../node_modules/rxjs/src/add/observable/interval.ts","../../../node_modules/rxjs/src/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/race.ts","../../../node_modules/rxjs/src/observable/NeverObservable.ts","../../../node_modules/rxjs/src/observable/never.ts","../../../node_modules/rxjs/src/add/observable/never.ts","../../../node_modules/rxjs/src/observable/of.ts","../../../node_modules/rxjs/src/add/observable/of.ts","../../../node_modules/rxjs/src/add/observable/onErrorResumeNext.ts","../../../node_modules/rxjs/src/observable/PairsObservable.ts","../../../node_modules/rxjs/src/observable/pairs.ts","../../../node_modules/rxjs/src/add/observable/pairs.ts","../../../node_modules/rxjs/src/observable/RangeObservable.ts","../../../node_modules/rxjs/src/observable/range.ts","../../../node_modules/rxjs/src/add/observable/range.ts","../../../node_modules/rxjs/src/observable/UsingObservable.ts","../../../node_modules/rxjs/src/observable/using.ts","../../../node_modules/rxjs/src/add/observable/using.ts","../../../node_modules/rxjs/src/observable/ErrorObservable.ts","../../../node_modules/rxjs/src/observable/throw.ts","../../../node_modules/rxjs/src/add/observable/throw.ts","../../../node_modules/rxjs/src/observable/TimerObservable.ts","../../../node_modules/rxjs/src/observable/timer.ts","../../../node_modules/rxjs/src/add/observable/timer.ts","../../../node_modules/rxjs/src/observable/zip.ts","../../../node_modules/rxjs/src/add/observable/zip.ts","../../../node_modules/rxjs/src/observable/dom/ajax.ts","../../../node_modules/rxjs/src/add/observable/dom/ajax.ts","../../../node_modules/rxjs/src/util/assign.ts","../../../node_modules/rxjs/src/observable/dom/WebSocketSubject.ts","../../../node_modules/rxjs/src/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/add/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/operator/buffer.ts","../../../node_modules/rxjs/src/add/operator/buffer.ts","../../../node_modules/rxjs/src/operator/bufferCount.ts","../../../node_modules/rxjs/src/add/operator/bufferCount.ts","../../../node_modules/rxjs/src/operator/bufferTime.ts","../../../node_modules/rxjs/src/add/operator/bufferTime.ts","../../../node_modules/rxjs/src/operator/bufferToggle.ts","../../../node_modules/rxjs/src/add/operator/bufferToggle.ts","../../../node_modules/rxjs/src/operator/bufferWhen.ts","../../../node_modules/rxjs/src/add/operator/bufferWhen.ts","../../../node_modules/rxjs/src/operator/cache.ts","../../../node_modules/rxjs/src/add/operator/cache.ts","../../../node_modules/rxjs/src/operator/catch.ts","../../../node_modules/rxjs/src/add/operator/catch.ts","../../../node_modules/rxjs/src/operator/combineAll.ts","../../../node_modules/rxjs/src/add/operator/combineAll.ts","../../../node_modules/rxjs/src/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/concat.ts","../../../node_modules/rxjs/src/operator/concatAll.ts","../../../node_modules/rxjs/src/add/operator/concatAll.ts","../../../node_modules/rxjs/src/operator/concatMap.ts","../../../node_modules/rxjs/src/add/operator/concatMap.ts","../../../node_modules/rxjs/src/operator/concatMapTo.ts","../../../node_modules/rxjs/src/add/operator/concatMapTo.ts","../../../node_modules/rxjs/src/operator/count.ts","../../../node_modules/rxjs/src/add/operator/count.ts","../../../node_modules/rxjs/src/operator/dematerialize.ts","../../../node_modules/rxjs/src/add/operator/dematerialize.ts","../../../node_modules/rxjs/src/operator/debounce.ts","../../../node_modules/rxjs/src/add/operator/debounce.ts","../../../node_modules/rxjs/src/operator/debounceTime.ts","../../../node_modules/rxjs/src/add/operator/debounceTime.ts","../../../node_modules/rxjs/src/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/add/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/operator/delay.ts","../../../node_modules/rxjs/src/add/operator/delay.ts","../../../node_modules/rxjs/src/operator/delayWhen.ts","../../../node_modules/rxjs/src/add/operator/delayWhen.ts","../../../node_modules/rxjs/src/add/operator/distinct.ts","../../../node_modules/rxjs/src/operator/distinct.ts","../../../node_modules/rxjs/src/operator/distinctKey.ts","../../../node_modules/rxjs/src/add/operator/distinctKey.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/operator/do.ts","../../../node_modules/rxjs/src/add/operator/do.ts","../../../node_modules/rxjs/src/operator/exhaust.ts","../../../node_modules/rxjs/src/add/operator/exhaust.ts","../../../node_modules/rxjs/src/operator/exhaustMap.ts","../../../node_modules/rxjs/src/add/operator/exhaustMap.ts","../../../node_modules/rxjs/src/operator/expand.ts","../../../node_modules/rxjs/src/add/operator/expand.ts","../../../node_modules/rxjs/src/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/filter.ts","../../../node_modules/rxjs/src/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/find.ts","../../../node_modules/rxjs/src/operator/find.ts","../../../node_modules/rxjs/src/operator/findIndex.ts","../../../node_modules/rxjs/src/add/operator/findIndex.ts","../../../node_modules/rxjs/src/operator/first.ts","../../../node_modules/rxjs/src/add/operator/first.ts","../../../node_modules/rxjs/src/util/MapPolyfill.ts","../../../node_modules/rxjs/src/util/Map.ts","../../../node_modules/rxjs/src/util/FastMap.ts","../../../node_modules/rxjs/src/operator/groupBy.ts","../../../node_modules/rxjs/src/add/operator/groupBy.ts","../../../node_modules/rxjs/src/util/noop.ts","../../../node_modules/rxjs/src/operator/ignoreElements.ts","../../../node_modules/rxjs/src/add/operator/ignoreElements.ts","../../../node_modules/rxjs/src/operator/isEmpty.ts","../../../node_modules/rxjs/src/add/operator/isEmpty.ts","../../../node_modules/rxjs/src/operator/audit.ts","../../../node_modules/rxjs/src/add/operator/audit.ts","../../../node_modules/rxjs/src/operator/auditTime.ts","../../../node_modules/rxjs/src/add/operator/auditTime.ts","../../../node_modules/rxjs/src/operator/last.ts","../../../node_modules/rxjs/src/add/operator/last.ts","../../../node_modules/rxjs/src/operator/let.ts","../../../node_modules/rxjs/src/add/operator/let.ts","../../../node_modules/rxjs/src/operator/every.ts","../../../node_modules/rxjs/src/add/operator/every.ts","../../../node_modules/rxjs/src/add/operator/map.ts","../../../node_modules/rxjs/src/operator/mapTo.ts","../../../node_modules/rxjs/src/add/operator/mapTo.ts","../../../node_modules/rxjs/src/operator/materialize.ts","../../../node_modules/rxjs/src/add/operator/materialize.ts","../../../node_modules/rxjs/src/operator/max.ts","../../../node_modules/rxjs/src/add/operator/max.ts","../../../node_modules/rxjs/src/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/mergeMap.ts","../../../node_modules/rxjs/src/add/operator/mergeMap.ts","../../../node_modules/rxjs/src/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/add/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/operator/mergeScan.ts","../../../node_modules/rxjs/src/add/operator/mergeScan.ts","../../../node_modules/rxjs/src/operator/min.ts","../../../node_modules/rxjs/src/add/operator/min.ts","../../../node_modules/rxjs/src/add/operator/multicast.ts","../../../node_modules/rxjs/src/add/operator/observeOn.ts","../../../node_modules/rxjs/src/observable/PromiseObservable.ts","../../../node_modules/rxjs/src/observable/IteratorObservable.ts","../../../node_modules/rxjs/src/observable/ArrayLikeObservable.ts","../../../node_modules/rxjs/src/observable/FromObservable.ts","../../../node_modules/rxjs/src/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/add/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/operator/pairwise.ts","../../../node_modules/rxjs/src/add/operator/pairwise.ts","../../../node_modules/rxjs/src/util/not.ts","../../../node_modules/rxjs/src/operator/filter.ts","../../../node_modules/rxjs/src/operator/partition.ts","../../../node_modules/rxjs/src/add/operator/partition.ts","../../../node_modules/rxjs/src/operator/pluck.ts","../../../node_modules/rxjs/src/add/operator/pluck.ts","../../../node_modules/rxjs/src/operator/publish.ts","../../../node_modules/rxjs/src/add/operator/publish.ts","../../../node_modules/rxjs/src/operator/publishBehavior.ts","../../../node_modules/rxjs/src/add/operator/publishBehavior.ts","../../../node_modules/rxjs/src/operator/publishReplay.ts","../../../node_modules/rxjs/src/add/operator/publishReplay.ts","../../../node_modules/rxjs/src/operator/publishLast.ts","../../../node_modules/rxjs/src/add/operator/publishLast.ts","../../../node_modules/rxjs/src/operator/race.ts","../../../node_modules/rxjs/src/add/operator/race.ts","../../../node_modules/rxjs/src/operator/reduce.ts","../../../node_modules/rxjs/src/add/operator/reduce.ts","../../../node_modules/rxjs/src/operator/repeat.ts","../../../node_modules/rxjs/src/add/operator/repeat.ts","../../../node_modules/rxjs/src/operator/repeatWhen.ts","../../../node_modules/rxjs/src/add/operator/repeatWhen.ts","../../../node_modules/rxjs/src/operator/retry.ts","../../../node_modules/rxjs/src/add/operator/retry.ts","../../../node_modules/rxjs/src/operator/retryWhen.ts","../../../node_modules/rxjs/src/add/operator/retryWhen.ts","../../../node_modules/rxjs/src/operator/sample.ts","../../../node_modules/rxjs/src/add/operator/sample.ts","../../../node_modules/rxjs/src/operator/sampleTime.ts","../../../node_modules/rxjs/src/add/operator/sampleTime.ts","../../../node_modules/rxjs/src/operator/scan.ts","../../../node_modules/rxjs/src/add/operator/scan.ts","../../../node_modules/rxjs/src/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/add/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/operator/multicast.ts","../../../node_modules/rxjs/src/operator/share.ts","../../../node_modules/rxjs/src/add/operator/share.ts","../../../node_modules/rxjs/src/operator/single.ts","../../../node_modules/rxjs/src/add/operator/single.ts","../../../node_modules/rxjs/src/operator/skip.ts","../../../node_modules/rxjs/src/add/operator/skip.ts","../../../node_modules/rxjs/src/operator/skipUntil.ts","../../../node_modules/rxjs/src/add/operator/skipUntil.ts","../../../node_modules/rxjs/src/operator/skipWhile.ts","../../../node_modules/rxjs/src/add/operator/skipWhile.ts","../../../node_modules/rxjs/src/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/concat.ts","../../../node_modules/rxjs/src/operator/startWith.ts","../../../node_modules/rxjs/src/add/operator/startWith.ts","../../../node_modules/rxjs/src/util/isNumeric.ts","../../../node_modules/rxjs/src/observable/SubscribeOnObservable.ts","../../../node_modules/rxjs/src/operator/subscribeOn.ts","../../../node_modules/rxjs/src/add/operator/subscribeOn.ts","../../../node_modules/rxjs/src/operator/switch.ts","../../../node_modules/rxjs/src/add/operator/switch.ts","../../../node_modules/rxjs/src/operator/switchMap.ts","../../../node_modules/rxjs/src/add/operator/switchMap.ts","../../../node_modules/rxjs/src/operator/switchMapTo.ts","../../../node_modules/rxjs/src/add/operator/switchMapTo.ts","../../../node_modules/rxjs/src/operator/take.ts","../../../node_modules/rxjs/src/add/operator/take.ts","../../../node_modules/rxjs/src/operator/takeLast.ts","../../../node_modules/rxjs/src/add/operator/takeLast.ts","../../../node_modules/rxjs/src/operator/takeUntil.ts","../../../node_modules/rxjs/src/add/operator/takeUntil.ts","../../../node_modules/rxjs/src/operator/takeWhile.ts","../../../node_modules/rxjs/src/add/operator/takeWhile.ts","../../../node_modules/rxjs/src/operator/throttle.ts","../../../node_modules/rxjs/src/add/operator/throttle.ts","../../../node_modules/rxjs/src/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timeout.ts","../../../node_modules/rxjs/src/add/operator/timeout.ts","../../../node_modules/rxjs/src/util/isDate.ts","../../../node_modules/rxjs/src/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timestamp.ts","../../../node_modules/rxjs/src/operator/toArray.ts","../../../node_modules/rxjs/src/add/operator/toArray.ts","../../../node_modules/rxjs/src/operator/toPromise.ts","../../../node_modules/rxjs/src/add/operator/toPromise.ts","../../../node_modules/rxjs/src/operator/window.ts","../../../node_modules/rxjs/src/add/operator/window.ts","../../../node_modules/rxjs/src/operator/windowCount.ts","../../../node_modules/rxjs/src/add/operator/windowCount.ts","../../../node_modules/rxjs/src/operator/windowTime.ts","../../../node_modules/rxjs/src/add/operator/windowTime.ts","../../../node_modules/rxjs/src/operator/windowToggle.ts","../../../node_modules/rxjs/src/add/operator/windowToggle.ts","../../../node_modules/rxjs/src/operator/windowWhen.ts","../../../node_modules/rxjs/src/add/operator/windowWhen.ts","../../../node_modules/rxjs/src/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/zip.ts","../../../node_modules/rxjs/src/observable/ScalarObservable.ts","../../../node_modules/rxjs/src/observable/EmptyObservable.ts","../../../node_modules/rxjs/src/util/isScheduler.ts","../../../node_modules/rxjs/src/observable/ArrayObservable.ts","../../../node_modules/rxjs/src/OuterSubscriber.ts","../../../node_modules/rxjs/src/util/isPromise.ts","../../../node_modules/rxjs/src/InnerSubscriber.ts","../../../node_modules/rxjs/src/util/subscribeToResult.ts","../../../node_modules/rxjs/src/operator/zip.ts","../../../node_modules/rxjs/src/operator/zipAll.ts","../../../node_modules/rxjs/src/add/operator/zipAll.ts","../../../node_modules/rxjs/src/AsyncSubject.ts","../../../node_modules/rxjs/src/operator/observeOn.ts","../../../node_modules/rxjs/src/ReplaySubject.ts","../../../node_modules/rxjs/src/BehaviorSubject.ts","../../../node_modules/rxjs/src/observable/MulticastObservable.ts","../../../node_modules/rxjs/src/observable/ConnectableObservable.ts","../../../node_modules/rxjs/src/util/EmptyError.ts","../../../node_modules/rxjs/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/rxjs/src/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timestamp.ts","../../../node_modules/rxjs/src/Notification.ts","../../../node_modules/rxjs/src/testing/ColdObservable.ts","../../../node_modules/rxjs/src/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/SubjectSubscription.ts","../../../node_modules/rxjs/src/Subject.ts","../../../node_modules/rxjs/src/testing/SubscriptionLoggable.ts","../../../node_modules/rxjs/src/util/applyMixins.ts","../../../node_modules/rxjs/src/testing/HotObservable.ts","../../../node_modules/rxjs/src/testing/SubscriptionLog.ts","../../../node_modules/rxjs/src/testing/TestScheduler.ts","../../../node_modules/rxjs/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/rxjs/src/util/toSubscriber.ts","../../../node_modules/rxjs/src/Observable.ts","../../../node_modules/rxjs/src/Observer.ts","../../../node_modules/rxjs/src/Subscriber.ts","../../../node_modules/rxjs/src/operator/map.ts","../../../node_modules/rxjs/src/observable/dom/AjaxObservable.ts","../../../node_modules/rxjs/src/util/Immediate.ts","../../../node_modules/rxjs/src/scheduler/AsapAction.ts","../../../node_modules/rxjs/src/scheduler/AsapScheduler.ts","../../../node_modules/rxjs/src/scheduler/asap.ts","../../../node_modules/rxjs/src/scheduler/async.ts","../../../node_modules/rxjs/src/scheduler/QueueAction.ts","../../../node_modules/rxjs/src/scheduler/QueueScheduler.ts","../../../node_modules/rxjs/src/scheduler/queue.ts","../../../node_modules/rxjs/src/util/isArray.ts","../../../node_modules/rxjs/src/util/isObject.ts","../../../node_modules/rxjs/src/util/isFunction.ts","../../../node_modules/rxjs/src/util/tryCatch.ts","../../../node_modules/rxjs/src/util/errorObject.ts","../../../node_modules/rxjs/src/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/Subscription.ts","../../../node_modules/rxjs/src/scheduler/Action.ts","../../../node_modules/rxjs/src/scheduler/AsyncAction.ts","../../../node_modules/rxjs/src/util/AnimationFrame.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameAction.ts","../../../node_modules/rxjs/src/Scheduler.ts","../../../node_modules/rxjs/src/scheduler/AsyncScheduler.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/rxjs/src/scheduler/animationFrame.ts","../../../node_modules/rxjs/src/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/symbol/iterator.ts","../../../node_modules/rxjs/src/util/root.ts","../../../node_modules/rxjs/src/symbol/observable.ts","../../../node_modules/rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","Object","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","root_1","root","assign","TypeError","output","hasOwnProperty","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","socket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","remove","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","context","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","cache","windowTime","outerSub","refs","getSubject","s","cache_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","catch_1","catch","combineAll","combineAll_1","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","slice","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey","distinctKey_1","distinctUntilChanged_1","distinctUntilChanged","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_values","_keys","get","set","delete","clear","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","accumulator","ReduceSubscriber","hasSeed","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","notifications","retries","retriesSubscription","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","accumulatorSet","defineProperty","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastObservable_1","MulticastObservable","ConnectableObservable_1","ConnectableObservable","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","EMPTY","thrownError","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","ObjectUnsubscribedError_1","_value","getValue","ObjectUnsubscribedError","connectable","connect","_refCount","_subject","connection","_connection","ConnectableSubscriber","RefCountOperator","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","exception","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","SubjectSubscription","subscriberIndex","SubjectSubscription_1","rxSubscriber_1","$$rxSubscriber","copy","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","toSubscriber_1","observerOrNext","sink","Observer_1","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","open","setHeaders","setupEvents","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","AjaxTimeoutError","upload","onprogress","xhrProgress","xhrError","AjaxError","onreadystatechange","xhrReadyStateChange","status_1","status","responseText","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","isObject","tryCatcher","tryCatchTarget","UnsubscriptionError","isObject_1","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","Set","objectTypes","boolean","function","object","number","string","freeGlobal","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  Scheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  (<any> this).schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0 && socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer, BufferSignature } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount, BufferCountSignature } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime, BufferTimeSignature } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { bufferToggle, BufferToggleSignature } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen, BufferWhenSignature } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { cache, CacheSignature } from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  <R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch, CatchSignature } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n    _catch: CatchSignature<T>;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll, CombineAllSignature } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest, CombineLatestSignature } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat, ConcatSignature } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}","import { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll, ConcatAllSignature } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap, ConcatMapSignature } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo, ConcatMapToSignature } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count, CountSignature } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize, DematerializeSignature } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce, DebounceSignature } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime, DebounceTimeSignature } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty, DefaultIfEmptySignature } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay, DelaySignature } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen, DelayWhenSignature } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\nimport { distinct, DistinctSignature } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n","import { distinct } from './distinct';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { distinctKey, DistinctKeySignature } from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged, DistinctUntilChangedSignature } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged, DistinctUntilKeyChangedSignature } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do, DoSignature } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n    _do: DoSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust, SwitchFirstSignature } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap, SwitchFirstMapSignature } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand, ExpandSignature } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt, ElementAtSignature } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter, FilterSignature } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally, FinallySignature } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n    _finally: FinallySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find, FindSignature } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex, FindIndexSignature } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first, FirstSignature } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy, GroupBySignature } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements, IgnoreElementsSignature } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty, IsEmptySignature } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit, AuditSignature } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime, AuditTimeSignature } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last, LastSignature } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto, LetSignature } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every, EverySignature } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map, MapSignature } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo, MapToSignature } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize, MaterializeSignature } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { max, MaxSignature } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge, MergeSignature } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll, MergeAllSignature } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap, MergeMapSignature } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo, MergeMapToSignature } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan, MergeScanSignature } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { min, MinSignature } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast, MulticastSignature } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn, ObserveOnSignature } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { Scheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\r\nimport { FromObservable } from '../observable/FromObservable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { isArray } from '../util/isArray';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext, OnErrorResumeNextSignature } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise, PairwiseSignature } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition, PartitionSignature } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck, PluckSignature } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publish, PublishSignature } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}","import { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior, PublishBehaviorSignature } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}","import { ReplaySubject } from '../ReplaySubject';\nimport { Scheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay, PublishReplaySignature } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}","import { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast, PublishLastSignature } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race, RaceSignature } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  (accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\n  (accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce, ReduceSignature } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat, RepeatSignature } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nexport interface RepeatWhenSignature<T> {\n  (notifier: (notifications: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen, RepeatWhenSignature } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: RepeatWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry, RetrySignature } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen, RetryWhenSignature } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample, SampleSignature } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime, SampleTimeSignature } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T | R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ReduceSignature } from '../../operator/reduce';\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nexport interface SequenceEqualSignature<T> {\n  (compareTo: Observable<T>, comparor?: (a: T, b: T) => boolean): Observable<boolean>;\n}\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, T> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual, SequenceEqualSignature } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: SequenceEqualSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { MulticastObservable } from '../observable/MulticastObservable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { share, ShareSignature } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single, SingleSignature } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip, SkipSignature } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil, SkipUntilSignature } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile, SkipWhileSignature } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith, StartWithSignature } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { subscribeOn, SubscribeOnSignature } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch, SwitchSignature } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n    _switch: SwitchSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap, SwitchMapSignature } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo, SwitchMapToSignature } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take, TakeSignature } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast, TakeLastSignature } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil, TakeUntilSignature } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile, TakeWhileSignature } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle, ThrottleSignature } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime, ThrottleTimeSignature } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval, TimeIntervalSignature } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout, TimeoutSignature } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith, TimeoutWithSignature } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp, TimestampSignature } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray, ToArraySignature } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}","import { root } from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise, ToPromiseSignature } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window, WindowSignature } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount, WindowCountSignature } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime, WindowTimeSignature } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle, WindowToggleSignature } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen, WindowWhenSignature } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom, WithLatestFromSignature } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto, ZipSignature } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new Error('invalid observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll, ZipAllSignature } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Scheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Scheduler } from '../Scheduler';\r\nimport { async } from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T, R>(url: string, headers?: Object): Observable<R>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, enqueue as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\nlet freeGlobal = objectTypes[typeof global] && global;\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}