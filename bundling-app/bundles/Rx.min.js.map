{"version":3,"sources":["../../../node_modules/rxjs/src/observable/BoundCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindCallback.ts","../../../node_modules/rxjs/src/add/observable/bindCallback.ts","../../../node_modules/rxjs/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/add/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/observable/combineLatest.ts","../../../node_modules/rxjs/src/add/observable/combineLatest.ts","../../../node_modules/rxjs/src/observable/concat.ts","../../../node_modules/rxjs/src/add/observable/concat.ts","../../../node_modules/rxjs/src/observable/DeferObservable.ts","../../../node_modules/rxjs/src/observable/defer.ts","../../../node_modules/rxjs/src/add/observable/defer.ts","../../../node_modules/rxjs/src/observable/empty.ts","../../../node_modules/rxjs/src/add/observable/empty.ts","../../../node_modules/rxjs/src/observable/ForkJoinObservable.ts","../../../node_modules/rxjs/src/observable/forkJoin.ts","../../../node_modules/rxjs/src/add/observable/forkJoin.ts","../../../node_modules/rxjs/src/observable/from.ts","../../../node_modules/rxjs/src/add/observable/from.ts","../../../node_modules/rxjs/src/observable/FromEventObservable.ts","../../../node_modules/rxjs/src/observable/fromEvent.ts","../../../node_modules/rxjs/src/add/observable/fromEvent.ts","../../../node_modules/rxjs/src/observable/FromEventPatternObservable.ts","../../../node_modules/rxjs/src/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/add/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/observable/fromPromise.ts","../../../node_modules/rxjs/src/add/observable/fromPromise.ts","../../../node_modules/rxjs/src/observable/GenerateObservable.ts","../../../node_modules/rxjs/src/add/observable/generate.ts","../../../node_modules/rxjs/src/observable/IfObservable.ts","../../../node_modules/rxjs/src/observable/if.ts","../../../node_modules/rxjs/src/add/observable/if.ts","../../../node_modules/rxjs/src/observable/IntervalObservable.ts","../../../node_modules/rxjs/src/observable/interval.ts","../../../node_modules/rxjs/src/add/observable/interval.ts","../../../node_modules/rxjs/src/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/race.ts","../../../node_modules/rxjs/src/observable/NeverObservable.ts","../../../node_modules/rxjs/src/observable/never.ts","../../../node_modules/rxjs/src/add/observable/never.ts","../../../node_modules/rxjs/src/observable/of.ts","../../../node_modules/rxjs/src/add/observable/of.ts","../../../node_modules/rxjs/src/add/observable/onErrorResumeNext.ts","../../../node_modules/rxjs/src/observable/PairsObservable.ts","../../../node_modules/rxjs/src/observable/pairs.ts","../../../node_modules/rxjs/src/add/observable/pairs.ts","../../../node_modules/rxjs/src/observable/RangeObservable.ts","../../../node_modules/rxjs/src/observable/range.ts","../../../node_modules/rxjs/src/add/observable/range.ts","../../../node_modules/rxjs/src/observable/UsingObservable.ts","../../../node_modules/rxjs/src/observable/using.ts","../../../node_modules/rxjs/src/add/observable/using.ts","../../../node_modules/rxjs/src/observable/ErrorObservable.ts","../../../node_modules/rxjs/src/observable/throw.ts","../../../node_modules/rxjs/src/add/observable/throw.ts","../../../node_modules/rxjs/src/observable/TimerObservable.ts","../../../node_modules/rxjs/src/observable/timer.ts","../../../node_modules/rxjs/src/add/observable/timer.ts","../../../node_modules/rxjs/src/observable/zip.ts","../../../node_modules/rxjs/src/add/observable/zip.ts","../../../node_modules/rxjs/src/observable/dom/ajax.ts","../../../node_modules/rxjs/src/add/observable/dom/ajax.ts","../../../node_modules/rxjs/src/util/assign.ts","../../../node_modules/rxjs/src/observable/dom/WebSocketSubject.ts","../../../node_modules/rxjs/src/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/add/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/operator/buffer.ts","../../../node_modules/rxjs/src/add/operator/buffer.ts","../../../node_modules/rxjs/src/operator/bufferCount.ts","../../../node_modules/rxjs/src/add/operator/bufferCount.ts","../../../node_modules/rxjs/src/operator/bufferTime.ts","../../../node_modules/rxjs/src/add/operator/bufferTime.ts","../../../node_modules/rxjs/src/operator/bufferToggle.ts","../../../node_modules/rxjs/src/add/operator/bufferToggle.ts","../../../node_modules/rxjs/src/operator/bufferWhen.ts","../../../node_modules/rxjs/src/add/operator/bufferWhen.ts","../../../node_modules/rxjs/src/operator/cache.ts","../../../node_modules/rxjs/src/add/operator/cache.ts","../../../node_modules/rxjs/src/operator/catch.ts","../../../node_modules/rxjs/src/add/operator/catch.ts","../../../node_modules/rxjs/src/operator/combineAll.ts","../../../node_modules/rxjs/src/add/operator/combineAll.ts","../../../node_modules/rxjs/src/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/concat.ts","../../../node_modules/rxjs/src/operator/concatAll.ts","../../../node_modules/rxjs/src/add/operator/concatAll.ts","../../../node_modules/rxjs/src/operator/concatMap.ts","../../../node_modules/rxjs/src/add/operator/concatMap.ts","../../../node_modules/rxjs/src/operator/concatMapTo.ts","../../../node_modules/rxjs/src/add/operator/concatMapTo.ts","../../../node_modules/rxjs/src/operator/count.ts","../../../node_modules/rxjs/src/add/operator/count.ts","../../../node_modules/rxjs/src/operator/dematerialize.ts","../../../node_modules/rxjs/src/add/operator/dematerialize.ts","../../../node_modules/rxjs/src/operator/debounce.ts","../../../node_modules/rxjs/src/add/operator/debounce.ts","../../../node_modules/rxjs/src/operator/debounceTime.ts","../../../node_modules/rxjs/src/add/operator/debounceTime.ts","../../../node_modules/rxjs/src/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/add/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/operator/delay.ts","../../../node_modules/rxjs/src/add/operator/delay.ts","../../../node_modules/rxjs/src/operator/delayWhen.ts","../../../node_modules/rxjs/src/add/operator/delayWhen.ts","../../../node_modules/rxjs/src/add/operator/distinct.ts","../../../node_modules/rxjs/src/operator/distinct.ts","../../../node_modules/rxjs/src/operator/distinctKey.ts","../../../node_modules/rxjs/src/add/operator/distinctKey.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/operator/do.ts","../../../node_modules/rxjs/src/add/operator/do.ts","../../../node_modules/rxjs/src/operator/exhaust.ts","../../../node_modules/rxjs/src/add/operator/exhaust.ts","../../../node_modules/rxjs/src/operator/exhaustMap.ts","../../../node_modules/rxjs/src/add/operator/exhaustMap.ts","../../../node_modules/rxjs/src/operator/expand.ts","../../../node_modules/rxjs/src/add/operator/expand.ts","../../../node_modules/rxjs/src/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/filter.ts","../../../node_modules/rxjs/src/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/find.ts","../../../node_modules/rxjs/src/operator/find.ts","../../../node_modules/rxjs/src/operator/findIndex.ts","../../../node_modules/rxjs/src/add/operator/findIndex.ts","../../../node_modules/rxjs/src/operator/first.ts","../../../node_modules/rxjs/src/add/operator/first.ts","../../../node_modules/rxjs/src/util/MapPolyfill.ts","../../../node_modules/rxjs/src/util/Map.ts","../../../node_modules/rxjs/src/util/FastMap.ts","../../../node_modules/rxjs/src/operator/groupBy.ts","../../../node_modules/rxjs/src/add/operator/groupBy.ts","../../../node_modules/rxjs/src/util/noop.ts","../../../node_modules/rxjs/src/operator/ignoreElements.ts","../../../node_modules/rxjs/src/add/operator/ignoreElements.ts","../../../node_modules/rxjs/src/operator/isEmpty.ts","../../../node_modules/rxjs/src/add/operator/isEmpty.ts","../../../node_modules/rxjs/src/operator/audit.ts","../../../node_modules/rxjs/src/add/operator/audit.ts","../../../node_modules/rxjs/src/operator/auditTime.ts","../../../node_modules/rxjs/src/add/operator/auditTime.ts","../../../node_modules/rxjs/src/operator/last.ts","../../../node_modules/rxjs/src/add/operator/last.ts","../../../node_modules/rxjs/src/operator/let.ts","../../../node_modules/rxjs/src/add/operator/let.ts","../../../node_modules/rxjs/src/operator/every.ts","../../../node_modules/rxjs/src/add/operator/every.ts","../../../node_modules/rxjs/src/add/operator/map.ts","../../../node_modules/rxjs/src/operator/mapTo.ts","../../../node_modules/rxjs/src/add/operator/mapTo.ts","../../../node_modules/rxjs/src/operator/materialize.ts","../../../node_modules/rxjs/src/add/operator/materialize.ts","../../../node_modules/rxjs/src/operator/max.ts","../../../node_modules/rxjs/src/add/operator/max.ts","../../../node_modules/rxjs/src/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/mergeMap.ts","../../../node_modules/rxjs/src/add/operator/mergeMap.ts","../../../node_modules/rxjs/src/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/add/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/operator/mergeScan.ts","../../../node_modules/rxjs/src/add/operator/mergeScan.ts","../../../node_modules/rxjs/src/operator/min.ts","../../../node_modules/rxjs/src/add/operator/min.ts","../../../node_modules/rxjs/src/add/operator/multicast.ts","../../../node_modules/rxjs/src/add/operator/observeOn.ts","../../../node_modules/rxjs/src/observable/PromiseObservable.ts","../../../node_modules/rxjs/src/observable/IteratorObservable.ts","../../../node_modules/rxjs/src/observable/ArrayLikeObservable.ts","../../../node_modules/rxjs/src/observable/FromObservable.ts","../../../node_modules/rxjs/src/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/add/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/operator/pairwise.ts","../../../node_modules/rxjs/src/add/operator/pairwise.ts","../../../node_modules/rxjs/src/util/not.ts","../../../node_modules/rxjs/src/operator/filter.ts","../../../node_modules/rxjs/src/operator/partition.ts","../../../node_modules/rxjs/src/add/operator/partition.ts","../../../node_modules/rxjs/src/operator/pluck.ts","../../../node_modules/rxjs/src/add/operator/pluck.ts","../../../node_modules/rxjs/src/operator/publish.ts","../../../node_modules/rxjs/src/add/operator/publish.ts","../../../node_modules/rxjs/src/operator/publishBehavior.ts","../../../node_modules/rxjs/src/add/operator/publishBehavior.ts","../../../node_modules/rxjs/src/operator/publishReplay.ts","../../../node_modules/rxjs/src/add/operator/publishReplay.ts","../../../node_modules/rxjs/src/operator/publishLast.ts","../../../node_modules/rxjs/src/add/operator/publishLast.ts","../../../node_modules/rxjs/src/operator/race.ts","../../../node_modules/rxjs/src/add/operator/race.ts","../../../node_modules/rxjs/src/operator/reduce.ts","../../../node_modules/rxjs/src/add/operator/reduce.ts","../../../node_modules/rxjs/src/operator/repeat.ts","../../../node_modules/rxjs/src/add/operator/repeat.ts","../../../node_modules/rxjs/src/operator/repeatWhen.ts","../../../node_modules/rxjs/src/add/operator/repeatWhen.ts","../../../node_modules/rxjs/src/operator/retry.ts","../../../node_modules/rxjs/src/add/operator/retry.ts","../../../node_modules/rxjs/src/operator/retryWhen.ts","../../../node_modules/rxjs/src/add/operator/retryWhen.ts","../../../node_modules/rxjs/src/operator/sample.ts","../../../node_modules/rxjs/src/add/operator/sample.ts","../../../node_modules/rxjs/src/operator/sampleTime.ts","../../../node_modules/rxjs/src/add/operator/sampleTime.ts","../../../node_modules/rxjs/src/operator/scan.ts","../../../node_modules/rxjs/src/add/operator/scan.ts","../../../node_modules/rxjs/src/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/add/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/operator/multicast.ts","../../../node_modules/rxjs/src/operator/share.ts","../../../node_modules/rxjs/src/add/operator/share.ts","../../../node_modules/rxjs/src/operator/single.ts","../../../node_modules/rxjs/src/add/operator/single.ts","../../../node_modules/rxjs/src/operator/skip.ts","../../../node_modules/rxjs/src/add/operator/skip.ts","../../../node_modules/rxjs/src/operator/skipUntil.ts","../../../node_modules/rxjs/src/add/operator/skipUntil.ts","../../../node_modules/rxjs/src/operator/skipWhile.ts","../../../node_modules/rxjs/src/add/operator/skipWhile.ts","../../../node_modules/rxjs/src/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/concat.ts","../../../node_modules/rxjs/src/operator/startWith.ts","../../../node_modules/rxjs/src/add/operator/startWith.ts","../../../node_modules/rxjs/src/util/isNumeric.ts","../../../node_modules/rxjs/src/observable/SubscribeOnObservable.ts","../../../node_modules/rxjs/src/operator/subscribeOn.ts","../../../node_modules/rxjs/src/add/operator/subscribeOn.ts","../../../node_modules/rxjs/src/operator/switch.ts","../../../node_modules/rxjs/src/add/operator/switch.ts","../../../node_modules/rxjs/src/operator/switchMap.ts","../../../node_modules/rxjs/src/add/operator/switchMap.ts","../../../node_modules/rxjs/src/operator/switchMapTo.ts","../../../node_modules/rxjs/src/add/operator/switchMapTo.ts","../../../node_modules/rxjs/src/operator/take.ts","../../../node_modules/rxjs/src/add/operator/take.ts","../../../node_modules/rxjs/src/operator/takeLast.ts","../../../node_modules/rxjs/src/add/operator/takeLast.ts","../../../node_modules/rxjs/src/operator/takeUntil.ts","../../../node_modules/rxjs/src/add/operator/takeUntil.ts","../../../node_modules/rxjs/src/operator/takeWhile.ts","../../../node_modules/rxjs/src/add/operator/takeWhile.ts","../../../node_modules/rxjs/src/operator/throttle.ts","../../../node_modules/rxjs/src/add/operator/throttle.ts","../../../node_modules/rxjs/src/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timeout.ts","../../../node_modules/rxjs/src/add/operator/timeout.ts","../../../node_modules/rxjs/src/util/isDate.ts","../../../node_modules/rxjs/src/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timestamp.ts","../../../node_modules/rxjs/src/operator/toArray.ts","../../../node_modules/rxjs/src/add/operator/toArray.ts","../../../node_modules/rxjs/src/operator/toPromise.ts","../../../node_modules/rxjs/src/add/operator/toPromise.ts","../../../node_modules/rxjs/src/operator/window.ts","../../../node_modules/rxjs/src/add/operator/window.ts","../../../node_modules/rxjs/src/operator/windowCount.ts","../../../node_modules/rxjs/src/add/operator/windowCount.ts","../../../node_modules/rxjs/src/operator/windowTime.ts","../../../node_modules/rxjs/src/add/operator/windowTime.ts","../../../node_modules/rxjs/src/operator/windowToggle.ts","../../../node_modules/rxjs/src/add/operator/windowToggle.ts","../../../node_modules/rxjs/src/operator/windowWhen.ts","../../../node_modules/rxjs/src/add/operator/windowWhen.ts","../../../node_modules/rxjs/src/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/zip.ts","../../../node_modules/rxjs/src/observable/ScalarObservable.ts","../../../node_modules/rxjs/src/observable/EmptyObservable.ts","../../../node_modules/rxjs/src/util/isScheduler.ts","../../../node_modules/rxjs/src/observable/ArrayObservable.ts","../../../node_modules/rxjs/src/OuterSubscriber.ts","../../../node_modules/rxjs/src/util/isPromise.ts","../../../node_modules/rxjs/src/InnerSubscriber.ts","../../../node_modules/rxjs/src/util/subscribeToResult.ts","../../../node_modules/rxjs/src/operator/zip.ts","../../../node_modules/rxjs/src/operator/zipAll.ts","../../../node_modules/rxjs/src/add/operator/zipAll.ts","../../../node_modules/rxjs/src/AsyncSubject.ts","../../../node_modules/rxjs/src/operator/observeOn.ts","../../../node_modules/rxjs/src/ReplaySubject.ts","../../../node_modules/rxjs/src/BehaviorSubject.ts","../../../node_modules/rxjs/src/observable/MulticastObservable.ts","../../../node_modules/rxjs/src/observable/ConnectableObservable.ts","../../../node_modules/rxjs/src/util/EmptyError.ts","../../../node_modules/rxjs/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/rxjs/src/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timestamp.ts","../../../node_modules/rxjs/src/Notification.ts","../../../node_modules/rxjs/src/testing/ColdObservable.ts","../../../node_modules/rxjs/src/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/SubjectSubscription.ts","../../../node_modules/rxjs/src/Subject.ts","../../../node_modules/rxjs/src/testing/SubscriptionLoggable.ts","../../../node_modules/rxjs/src/util/applyMixins.ts","../../../node_modules/rxjs/src/testing/HotObservable.ts","../../../node_modules/rxjs/src/testing/SubscriptionLog.ts","../../../node_modules/rxjs/src/testing/TestScheduler.ts","../../../node_modules/rxjs/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/rxjs/src/util/toSubscriber.ts","../../../node_modules/rxjs/src/Observable.ts","../../../node_modules/rxjs/src/Observer.ts","../../../node_modules/rxjs/src/Subscriber.ts","../../../node_modules/rxjs/src/operator/map.ts","../../../node_modules/rxjs/src/observable/dom/AjaxObservable.ts","../../../node_modules/rxjs/src/util/Immediate.ts","../../../node_modules/rxjs/src/scheduler/AsapAction.ts","../../../node_modules/rxjs/src/scheduler/AsapScheduler.ts","../../../node_modules/rxjs/src/scheduler/asap.ts","../../../node_modules/rxjs/src/scheduler/async.ts","../../../node_modules/rxjs/src/scheduler/QueueAction.ts","../../../node_modules/rxjs/src/scheduler/QueueScheduler.ts","../../../node_modules/rxjs/src/scheduler/queue.ts","../../../node_modules/rxjs/src/util/isArray.ts","../../../node_modules/rxjs/src/util/isObject.ts","../../../node_modules/rxjs/src/util/isFunction.ts","../../../node_modules/rxjs/src/util/tryCatch.ts","../../../node_modules/rxjs/src/util/errorObject.ts","../../../node_modules/rxjs/src/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/Subscription.ts","../../../node_modules/rxjs/src/scheduler/Action.ts","../../../node_modules/rxjs/src/scheduler/AsyncAction.ts","../../../node_modules/rxjs/src/util/AnimationFrame.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameAction.ts","../../../node_modules/rxjs/src/Scheduler.ts","../../../node_modules/rxjs/src/scheduler/AsyncScheduler.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/rxjs/src/scheduler/animationFrame.ts","../../../node_modules/rxjs/src/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/symbol/iterator.ts","../../../node_modules/rxjs/src/util/root.ts","../../../node_modules/rxjs/src/symbol/observable.ts","../../../node_modules/rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","Object","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","root_1","root","assign","TypeError","output","hasOwnProperty","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","socket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","remove","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","context","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","cache","windowTime","outerSub","refs","getSubject","s","cache_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","catch_1","combineAll","combineAll_1","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","slice","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","distinct_1","distinct","compare","flushes","DistinctOperator","DistinctSubscriber","found","y","distinctKey","distinctKey_1","distinctUntilChanged_1","distinctUntilChanged","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_values","_keys","get","set","clear","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","accumulator","ReduceSubscriber","hasSeed","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","notifications","retries","retriesSubscription","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","accumulatorSet","defineProperty","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastObservable_1","MulticastObservable","ConnectableObservable_1","ConnectableObservable","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","errorToSend","absoluteTimeout","waitFor","TimeoutOperator","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","dispatchWindowCreation","timeSpanState","dispatchWindowClose","closeWindow","WindowTimeSubscriber","window_2","window_3","window_4","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","EMPTY","thrownError","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","ObjectUnsubscribedError_1","_value","getValue","ObjectUnsubscribedError","connectable","connect","_refCount","_subject","connection","_connection","ConnectableSubscriber","RefCountOperator","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","exception","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","SubjectSubscription","subscriberIndex","SubjectSubscription_1","rxSubscriber_1","$$rxSubscriber","copy","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","toSubscriber_1","observerOrNext","sink","Observer_1","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","open","setHeaders","setupEvents","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","progressSubscriber","ontimeout","xhrTimeout","AjaxTimeoutError","upload","onprogress","xhrProgress","xhrError","AjaxError","onreadystatechange","xhrReadyStateChange","status_1","status","responseText","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","isObject","tryCatcher","tryCatchTarget","UnsubscriptionError","isObject_1","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","Set","objectTypes","boolean","function","object","number","string","freeGlobal","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: Scheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: Scheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} selector A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: Scheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\nfunction dispatch<T>(state: { source: BoundNodeCallbackObservable<T>, subscriber: Subscriber<T> }) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  Scheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: Scheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: Scheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: Scheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | Scheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | Scheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | Scheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    Scheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: Scheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <Scheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport type NodeStyleEventEmmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmmitter(sourceObj: any): sourceObj is NodeStyleEventEmmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && sourceObj.toString() === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T, R> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @parm {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T, R> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function): void} removeHandler A function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler: (handler: Function) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler: (handler: Function) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    this._callAddHandler(handler, subscriber);\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler);\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): void {\n    try {\n      this.addHandler(handler);\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Inital state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * Scheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: Scheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: Scheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: Scheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: Scheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain inital state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | Scheduler,\n                      scheduler?: Scheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <Scheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <Scheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified Scheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` Scheduler to provide a notion of time, but you may pass any\n   * Scheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: Scheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: Scheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  (<any> this).schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional Scheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional Scheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: Scheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: Scheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * Scheduler and just delivers the notifications synchronously, but may use\n   * an optional Scheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: Scheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: Scheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: Scheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: any, scheduler?: Scheduler) {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` Scheduler to provide a notion of time, but you\n   * may pass any Scheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The Scheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | Scheduler,\n                scheduler?: Scheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: Scheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | Scheduler,\n              scheduler?: Scheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <Scheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nconst Object = root.Object;\n\nif (typeof (<any>Object).assign != 'function') {\n  (function () {\n    (<any>Object).assign = function assignPolyfill(target: Object, ...sources: Array<Object>): Object {\n      if (target === undefined || target === null) {\n        throw new TypeError('cannot convert undefined or null to object');\n      }\n\n      const output = Object(target);\n      const len = sources.length;\n      for (let index = 0; index < len; index++) {\n        let source = sources[index];\n        if (source !== undefined && source !== null) {\n          for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n              output[key] = source[key];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  })();\n}\n\nexport const assign: (target: Object, ...sources: Array<Object>) => Object = Object.assign;","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * @param urlConfigOrSource\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this.destination = new ReplaySubject();\n          this.socket = null;\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => observer.error(e);\n\n    socket.onclose = (e: CloseEvent) => {\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0 && socket && socket.readyState === 1) {\n        socket.close();\n        this.socket = null;\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this.socket = null;\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nexport interface BufferSignature<T> {\n  (closingNotifier: Observable<any>): Observable<T[]>;\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer, BufferSignature } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: BufferSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nexport interface BufferCountSignature<T> {\n  (bufferSize: number, startBufferEvery?: number): Observable<T[]>;\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [[]];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = (this.count += 1);\n    const destination = this.destination;\n    const bufferSize = this.bufferSize;\n    const startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;\n    const buffers = this.buffers;\n    const len = buffers.length;\n    let remove = -1;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        remove = i;\n        destination.next(buffer);\n      }\n    }\n\n    if (remove !== -1) {\n      buffers.splice(remove, 1);\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount, BufferCountSignature } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: BufferCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: Scheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nexport interface BufferTimeSignature<T> {\n  (bufferTimeSpan: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: Scheduler): Observable<T[]>;\n  (bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: Scheduler): Observable<T[]>;\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: Scheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = (<any>this).schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime, BufferTimeSignature } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: BufferTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface BufferToggleSignature<T> {\n  <O>(openings: SubscribableOrPromise<O>, closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]>;\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { bufferToggle, BufferToggleSignature } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: BufferToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nexport interface BufferWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<T[]>;\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen, BufferWhenSignature } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: BufferWhenSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {Observable<any>}\n * @method cache\n * @owner Observable\n */\nexport function cache<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                         windowTime: number = Number.POSITIVE_INFINITY,\n                         scheduler?: Scheduler): Observable<T> {\n  let subject: ReplaySubject<T>;\n  let source = this;\n  let refs = 0;\n  let outerSub: Subscription;\n\n  const getSubject = () => {\n    subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n    return subject;\n  };\n\n  return new Observable<T>((observer: Observer<T>) => {\n    if (!subject) {\n      subject = getSubject();\n      outerSub = source.subscribe(\n        (value: T) => subject.next(value),\n        (err: any) => {\n          let s = subject;\n          subject = null;\n          s.error(err);\n        },\n        () => subject.complete()\n      );\n    }\n\n    refs++;\n\n    if (!subject) {\n      subject = getSubject();\n    }\n    let innerSub = subject.subscribe(observer);\n\n    return () => {\n      refs--;\n      if (innerSub) {\n        innerSub.unsubscribe();\n      }\n      if (refs === 0) {\n        outerSub.unsubscribe();\n      }\n    };\n  });\n}\n\nexport interface CacheSignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { cache, CacheSignature } from '../../operator/cache';\n\nObservable.prototype.cache = cache;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    cache: CacheSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @owner Observable\n */\nexport function _catch<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nexport interface CatchSignature<T> {\n  <R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R>;\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.unsubscribe();\n      (<any>this.destination).remove(this);\n      subscribeToResult(this, result);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch, CatchSignature } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: CatchSignature<T>;\n    _catch: CatchSignature<T>;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n\nexport interface CombineAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll, CombineAllSignature } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: CombineAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <any>observables[0];\n  }\n\n  observables.unshift(this);\n\n  return new ArrayObservable(observables).lift(new CombineLatestOperator(project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface CombineLatestSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<T>[]): Observable<Array<T>>;\n  <TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest, CombineLatestSignature } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: CombineLatestSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat, ConcatSignature } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: ConcatSignature<T>;\n  }\n}","import { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): T {\n  return this.lift(new MergeAllOperator<T>(1));\n}\n\nexport interface ConcatAllSignature<T> {\n  (): T;\n  <R>(): Subscribable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll, ConcatAllSignature } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: ConcatAllSignature<T>;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n\nexport interface ConcatMapSignature<T> {\n  <R>(project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap, ConcatMapSignature } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: ConcatMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n\nexport interface ConcatMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo, ConcatMapToSignature } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: ConcatMapToSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting an value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nexport interface CountSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number>;\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source._subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count, CountSignature } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: CountSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nexport interface DematerializeSignature<T> {\n  <R>(): Observable<R>;\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source._subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize, DematerializeSignature } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: DematerializeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nexport interface DebounceSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce, DebounceSignature } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: DebounceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link Scheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nexport interface DebounceTimeSignature<T> {\n  (dueTime: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime, DebounceTimeSignature } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: DebounceTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nexport interface DefaultIfEmptySignature<T> {\n  (defaultValue?: T): Observable<T>;\n  <R>(defaultValue?: R): Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source._subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty, DefaultIfEmptySignature } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: DefaultIfEmptySignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The Scheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: Scheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nexport interface DelaySignature<T> {\n  (delay: number | Date, scheduler?: Scheduler): Observable<T>;\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: Scheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay, DelaySignature } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: DelaySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nexport interface DelayWhenSignature<T> {\n  (delayDurationSelector: (value: T) => Observable<any>, subscriptionDelay?: Observable<any>): Observable<T>;\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen, DelayWhenSignature } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: DelayWhenSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\nimport { distinct, DistinctSignature } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: DistinctSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T>(compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(compare, flushes));\n}\n\nexport interface DistinctSignature<T> {\n  (compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n\nclass DistinctOperator<T> implements Operator<T, T> {\n  constructor(private compare: (x: T, y: T) => boolean, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctSubscriber(subscriber, this.compare, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T> extends OuterSubscriber<T, T> {\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>, compare: (x: T, y: T) => boolean, flushes: Observable<any>) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.length = 0;\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    let found = false;\n    const values = this.values;\n    const len = values.length;\n    try {\n      for (let i = 0; i < len; i++) {\n        if (this.compare(values[i], value)) {\n          found = true;\n          return;\n        }\n      }\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.values.push(value);\n    this.destination.next(value);\n  }\n\n  private compare(x: T, y: T): boolean {\n    return x === y;\n  }\n}\n","import { distinct } from './distinct';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * As the internal HashSet of this operator grows larger and larger, care should be taken in the domain of inputs this operator may see.\n * An optional parameter is also provided such that an Observable can be provided to queue the internal HashSet to flush the values it holds.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from previous items in the source.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctKey\n * @owner Observable\n */\nexport function distinctKey<T>(key: string, compare?: (x: T, y: T) => boolean, flushes?: Observable<any>): Observable<T> {\n  return distinct.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  }, flushes);\n}\n\nexport interface DistinctKeySignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean, flushes?: Observable<any>): Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { distinctKey, DistinctKeySignature } from '../../operator/distinctKey';\n\nObservable.prototype.distinctKey = distinctKey;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctKey: DistinctKeySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged, DistinctUntilChangedSignature } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: DistinctUntilChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nexport interface DistinctUntilChangedSignature<T> {\n (compare?: (x: T, y: T) => boolean): Observable<T>;\n <K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * If a comparator function is not provided, an equality check is used by default.\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n\nexport interface DistinctUntilKeyChangedSignature<T> {\n  (key: string): Observable<T>;\n  <K>(key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged, DistinctUntilKeyChangedSignature } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: DistinctUntilKeyChangedSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nexport interface DoSignature<T> {\n  (next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\n  (observer: PartialObserver<T>): Observable<T>;\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do, DoSignature } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: DoSignature<T>;\n    _do: DoSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nexport interface SwitchFirstSignature<T> {\n  (): T;\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust, SwitchFirstSignature } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: SwitchFirstSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nexport interface SwitchFirstMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap, SwitchFirstMapSignature } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: SwitchFirstMapSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: Scheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport interface ExpandSignature<T> {\n  (project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: Scheduler): Observable<R>;\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand, ExpandSignature } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: ExpandSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nexport interface ElementAtSignature<T> {\n  (index: number, defaultValue?: T): Observable<T>;\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt, ElementAtSignature } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: ElementAtSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter, FilterSignature } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: FilterSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nexport interface FinallySignature<T> {\n  (callback: () => void): Observable<T>;\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally, FinallySignature } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: FinallySignature<T>;\n    _finally: FinallySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find, FindSignature } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: FindSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return this.lift(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport interface FindSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<T>;\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source._subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return this.lift(new FindValueOperator(predicate, this, true, thisArg));\n}\n\nexport interface FindIndexSignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<number>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex, FindIndexSignature } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: FindIndexSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface FirstSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first, FirstSignature } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: FirstSignature<T>;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: (value: T) => R,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(this, keySelector, elementSelector, durationSelector));\n}\n\n/* tslint:disable:max-line-length */\nexport interface GroupBySignature<T> {\n  <K>(keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\n  <K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\n  <K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\n}\n/* tslint:enable:max-line-length */\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(public source: Observable<T>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source._subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: (value: T) => R,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      groups.set(key, group = new Subject<R>());\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed && !this.attemptedToUnsubscribe) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy, GroupBySignature } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: GroupBySignature<T>;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nexport interface IgnoreElementsSignature<T> {\n  (): Observable<T>;\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements, IgnoreElementsSignature } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: IgnoreElementsSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty(): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nexport interface IsEmptySignature<T> {\n  (): Observable<boolean>;\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty, IsEmptySignature } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: IsEmptySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nexport interface AuditSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T>;\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit, AuditSignature } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: AuditSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nexport interface AuditTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime, AuditTimeSignature } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: AuditTimeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nexport interface LastSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, resultSelector: void, defaultValue?: T): Observable<T>;\n  <R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean, resultSelector?: (value: T, index: number) => R,\n      defaultValue?: R): Observable<R>;\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: (value: T, index: number) => R,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last, LastSignature } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: LastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n\nexport interface LetSignature<T> {\n  <R>(func: (selector: Observable<T>) => Observable<R>): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto, LetSignature } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: LetSignature<T>;\n    letBind: LetSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nexport interface EverySignature<T> {\n  (predicate: (value: T, index: number, source: Observable<T>) => boolean, thisArg?: any): Observable<boolean>;\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every, EverySignature } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: EverySignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map, MapSignature } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: MapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nexport interface MapToSignature<T> {\n  <R>(value: R): Observable<R>;\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo, MapToSignature } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: MapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nexport interface MaterializeSignature<T> {\n  (): Observable<Notification<T>>;\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source._subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize, MaterializeSignature } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: MaterializeSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the largest number.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest number.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n\nexport interface MaxSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { max, MaxSignature } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: MaxSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n  observables.unshift(this);\n  return mergeStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface MergeSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  (concurrent?: number, scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler | number>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: Scheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | Scheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | Scheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} input1 An input Observable to merge with others.\n * @param {Observable} input2 An input Observable to merge with others.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The Scheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: Scheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <Scheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge, MergeSignature } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: MergeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll, MergeAllSignature } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: MergeAllSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source._subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap, MergeMapSignature } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: MergeMapSignature<T>;\n    mergeMap: MergeMapSignature<T>;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\nexport interface MergeMapToSignature<T> {\n  <R>(observable: ObservableInput<R>, concurrent?: number): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n         concurrent?: number): Observable<R>;\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo, MergeMapToSignature } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: MergeMapToSignature<T>;\n    mergeMapTo: MergeMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * @param project\n * @param seed\n * @param concurrent\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(project: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(project, seed, concurrent));\n}\n\nexport interface MergeScanSignature<T> {\n  <R>(project: (acc: R, value: T) => Observable<R>, seed: R, concurrent?: number): Observable<R>;\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MergeScanSubscriber(\n      subscriber, this.project, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.project)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan, MergeScanSignature } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: MergeScanSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be evaluated as numbers),\n * and when source Observable completes it emits a single item: the item with the smallest number.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest number.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n\nexport interface MinSignature<T> {\n  (comparer?: (x: T, y: T) => number): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { min, MinSignature } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: MinSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast, MulticastSignature } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: MulticastSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn, ObserveOnSignature } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: ObserveOnSignature<T>;\n  }\n}","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: Scheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: Scheduler) {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: Scheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: Scheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { Scheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: Scheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: Scheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: Scheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\r\nimport { FromObservable } from '../observable/FromObservable';\r\nimport { Operator } from '../Operator';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { isArray } from '../util/isArray';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n\r\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                       Array<ObservableInput<any>> |\r\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<Observable<any>>>nextSources[0];\r\n  }\r\n\r\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\n/* tslint:disable:max-line-length */\r\nexport interface OnErrorResumeNextSignature<T> {\r\n  <R>(v: ObservableInput<R>): Observable<R>;\r\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\n  <R>(array: ObservableInput<any>[]): Observable<R>;\r\n}\r\n/* tslint:enable:max-line-length */\r\n\r\n/* tslint:disable:max-line-length */\r\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\r\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\r\n\r\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\r\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\r\n/* tslint:enable:max-line-length */\r\n\r\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\r\n                                                              Array<ObservableInput<any>> |\r\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\r\n  let source: ObservableInput<any> = null;\r\n\r\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\r\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\r\n  }\r\n  source = nextSources.shift();\r\n\r\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\r\n}\r\n\r\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\r\n  constructor(private nextSources: Array<ObservableInput<any>>) {\r\n  }\r\n\r\n  call(subscriber: Subscriber<R>, source: any): any {\r\n    return source._subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\r\n  }\r\n}\r\n\r\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\r\n  constructor(protected destination: Subscriber<T>,\r\n              private nextSources: Array<ObservableInput<any>>) {\r\n    super(destination);\r\n  }\r\n\r\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _error(err: any): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  protected _complete(): void {\r\n    this.subscribeToNextSource();\r\n  }\r\n\r\n  private subscribeToNextSource(): void {\r\n    const next = this.nextSources.shift();\r\n    if (next) {\r\n      this.add(subscribeToResult(this, next));\r\n    } else {\r\n      this.destination.complete();\r\n    }\r\n  }\r\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext, OnErrorResumeNextSignature } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: OnErrorResumeNextSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nexport interface PairwiseSignature<T> {\n  (): Observable<[T, T]>;\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source._subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise, PairwiseSignature } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: PairwiseSignature<T>;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctKey}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nexport interface FilterSignature<T> {\n  (predicate: (value: T, index: number) => boolean, thisArg?: any): Observable<T>;\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n\nexport interface PartitionSignature<T> {\n  (predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition, PartitionSignature } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: PartitionSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<R>(...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nexport interface PluckSignature<T> {\n  <R>(...properties: string[]): Observable<R>;\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck, PluckSignature } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: PluckSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface PublishSignature<T> {\n  (): ConnectableObservable<T>;\n  (selector: selector<T>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publish, PublishSignature } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: PublishSignature<T>;\n  }\n}","import { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n\nexport interface PublishBehaviorSignature<T> {\n  (value: T): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior, PublishBehaviorSignature } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: PublishBehaviorSignature<T>;\n  }\n}","import { ReplaySubject } from '../ReplaySubject';\nimport { Scheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: Scheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n\nexport interface PublishReplaySignature<T> {\n  (bufferSize?: number, windowTime?: number, scheduler?: Scheduler): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay, PublishReplaySignature } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: PublishReplaySignature<T>;\n  }\n}","import { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n\nexport interface PublishLastSignature<T> {\n  (): ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast, PublishLastSignature } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: PublishLastSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  observables.unshift(this);\n  return raceStatic.apply(this, observables);\n}\n\nexport interface RaceSignature<T> {\n  (...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\n  <R>(...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n          this.add(subscription);\n        }\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race, RaceSignature } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: RaceSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T) => R, seed?: R): Observable<R> {\n  return this.lift(new ReduceOperator(accumulator, seed));\n}\n\nexport interface ReduceSignature<T> {\n  (accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\n  (accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\n  <R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n\n  constructor(private accumulator: (acc: R, value: T) => R, private seed?: R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n\n  acc: T | R;\n  hasSeed: boolean;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => R,\n              seed?: R) {\n    super(destination);\n    this.acc = seed;\n    this.accumulator = accumulator;\n    this.hasSeed = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce, ReduceSignature } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular Scheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the Scheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nexport interface RepeatSignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat, RepeatSignature } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: RepeatSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier, this));\n}\n\nexport interface RepeatWhenSignature<T> {\n  (notifier: (notifications: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  complete() {\n    if (!this.isStopped) {\n\n      let notifications = this.notifications;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        notifications = new Subject();\n        retries = tryCatch(this.notifier)(notifications);\n        if (retries === errorObject) {\n          return super.complete();\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.notifications = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.notifications = notifications;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen, RepeatWhenSignature } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: RepeatWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nexport interface RetrySignature<T> {\n  (count?: number): Observable<T>;\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry, RetrySignature } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: RetrySignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * Scheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the Scheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nexport interface RetryWhenSignature<T> {\n  (notifier: (errors: Observable<any>) => Observable<any>): Observable<T>;\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen, RetryWhenSignature } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: RetryWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nexport interface SampleSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<any>, notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample, SampleSignature } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: SampleSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nexport interface SampleTimeSignature<T> {\n  (period: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  (<any>this).schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime, SampleTimeSignature } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: SampleTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  return this.lift(new ScanOperator(accumulator, seed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private accumulatorSet: boolean = false;\n  private _seed: T | R;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.accumulatorSet = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, seed?: T | R) {\n    super(destination);\n    this.seed = seed;\n    this.accumulatorSet = typeof seed !== 'undefined';\n  }\n\n  protected _next(value: T): void {\n    if (!this.accumulatorSet) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ReduceSignature } from '../../operator/reduce';\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: ReduceSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nexport interface SequenceEqualSignature<T> {\n  (compareTo: Observable<T>, comparor?: (a: T, b: T) => boolean): Observable<boolean>;\n}\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, T> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): any {\n    return source._subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual, SequenceEqualSignature } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: SequenceEqualSignature<T>;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { MulticastObservable } from '../observable/MulticastObservable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  return !selector ?\n    new ConnectableObservable(this, subjectFactory) :\n    new MulticastObservable(this, subjectFactory, selector);\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport interface MulticastSignature<T> {\n  (subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\n  (SubjectFactory: () => Subject<T>, selector?: selector<T>): Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n\nexport interface ShareSignature<T> {\n  (): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { share, ShareSignature } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: ShareSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nexport interface SingleSignature<T> {\n  (predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single, SingleSignature } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: SingleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nexport interface SkipSignature<T> {\n  (total: number): Observable<T>;\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip, SkipSignature } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: SkipSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nexport interface SkipUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil, SkipUntilSignature } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: SkipUntilSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nexport interface SkipWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile, SkipWhileSignature } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: SkipWhileSignature<T>;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): T {\n  return this.lift(new MergeAllOperator<T>(concurrent));\n}\n\nexport interface MergeAllSignature<T> {\n  (concurrent?: number): T;\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  return concatStatic<T, R>(this, ...observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ConcatSignature<T> {\n  (scheduler?: Scheduler): Observable<T>;\n  <T2>(v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\n  (...observables: Array<ObservableInput<T> | Scheduler>): Observable<T>;\n  <R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: Scheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: Scheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: Scheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | Scheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | Scheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional Scheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | Scheduler>): Observable<R> {\n  let scheduler: Scheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | Scheduler>): Observable<T> {\n  let scheduler = <Scheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n\nexport interface StartWithSignature<T> {\n  (v1: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: Scheduler): Observable<T>;\n  (v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: Scheduler): Observable<T>;\n  (...array: Array<T | Scheduler>): Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith, StartWithSignature } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: StartWithSignature<T>;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: Scheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return source.subscribe(subscriber);\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: Scheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified Scheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the Scheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified Scheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return new SubscribeOnObservable<T>(this, delay, scheduler);\n}\n\nexport interface SubscribeOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}","\nimport { Observable } from '../../Observable';\nimport { subscribeOn, SubscribeOnSignature } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: SubscribeOnSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(): T {\n  return this.lift(new SwitchOperator());\n}\n\nexport interface SwitchSignature<T> {\n  (): T;\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch, SwitchSignature } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: SwitchSignature<T>;\n    _switch: SwitchSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nexport interface SwitchMapSignature<T> {\n  <R>(project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\n  <I, R>(project: (value: T, index: number) => ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap, SwitchMapSignature } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: SwitchMapSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nexport interface SwitchMapToSignature<T> {\n  <R>(observable: ObservableInput<R>): Observable<R>;\n  <I, R>(observable: ObservableInput<I>,\n         resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source._subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo, SwitchMapToSignature } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: SwitchMapToSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nexport interface TakeSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    if (++this.count <= total) {\n      this.destination.next(value);\n      if (this.count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take, TakeSignature } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: TakeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nexport interface TakeLastSignature<T> {\n  (count: number): Observable<T>;\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast, TakeLastSignature } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: TakeLastSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nexport interface TakeUntilSignature<T> {\n  (notifier: Observable<any>): Observable<T>;\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil, TakeUntilSignature } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: TakeUntilSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nexport interface TakeWhileSignature<T> {\n  (predicate: (value: T, index: number) => boolean): Observable<T>;\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile, TakeWhileSignature } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: TakeWhileSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nexport interface ThrottleSignature<T> {\n  (durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T>;\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle, ThrottleSignature } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: ThrottleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link Scheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link Scheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number, scheduler: Scheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nexport interface ThrottleTimeSignature<T> {\n  (duration: number, scheduler?: Scheduler): Observable<T>;\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: Scheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime, ThrottleTimeSignature } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: ThrottleTimeSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval, TimeIntervalSignature } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: TimeIntervalSignature<T>;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @param due\n * @param errorToSend\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           errorToSend: any = null,\n                           scheduler: Scheduler = async): Observable<T> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));\n}\n\nexport interface TimeoutSignature<T> {\n  (due: number | Date, errorToSend?: any, scheduler?: Scheduler): Observable<T>;\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private errorToSend: any,\n              private scheduler: Scheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout() {\n    this.error(this.errorToSend || new Error('timeout'));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout, TimeoutSignature } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: TimeoutSignature<T>;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: Scheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nexport interface TimeoutWithSignature<T> {\n  (due: number | Date, withObservable: ObservableInput<T>, scheduler?: Scheduler): Observable<T>;\n  <R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: Scheduler): Observable<T | R>;\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: Scheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith, TimeoutWithSignature } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: TimeoutWithSignature<T>;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp, TimestampSignature } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: TimestampSignature<T>;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nexport interface ToArraySignature<T> {\n  (): Observable<T[]>;\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source._subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray, ToArraySignature } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: ToArraySignature<T>;\n  }\n}","import { root } from '../util/root';\n\n/**\n * @param PromiseCtor\n * @return {Promise<T>}\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n\nexport interface ToPromiseSignature<T> {\n  (): Promise<T>;\n  (PromiseCtor: typeof Promise): Promise<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise, ToPromiseSignature } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: ToPromiseSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nexport interface WindowSignature<T> {\n  (windowBoundaries: Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source._subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window, WindowSignature } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: WindowSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nexport interface WindowCountSignature<T> {\n  (windowSize: number, startWindowEvery?: number): Observable<Observable<T>>;\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount, WindowCountSignature } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: WindowCountSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: Scheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nexport interface WindowTimeSignature<T> {\n  (windowTimeSpan: number, windowCreationInterval?: number, scheduler?: Scheduler): Observable<Observable<T>>;\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: Scheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: Scheduler) {\n    super(destination);\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      let window = this.openWindow();\n      const closeState = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      let window = this.openWindow();\n      const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T) {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  closeWindow(window: Subject<T>) {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\ninterface TimeSpanOnlyState<T> {\n  window: Subject<any>;\n  windowTimeSpan: number;\n  subscriber: WindowTimeSubscriber<T>;\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(state: TimeSpanOnlyState<T>) {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    window.complete();\n  }\n  state.window = subscriber.openWindow();\n  (<any>this).schedule(state, windowTimeSpan);\n}\n\ninterface Context<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface DispatchArg<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: Context<T>;\n}\n\nfunction dispatchWindowCreation<T>(state: CreationState<T>) {\n  let { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  let window = subscriber.openWindow();\n  let action = <Action<CreationState<T>>>this;\n  let context: Context<T> = { action, subscription: <any>null };\n  const timeSpanState: DispatchArg<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, window, context } = arg;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime, WindowTimeSignature } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: WindowTimeSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nexport interface WindowToggleSignature<T> {\n  <O>(openings: Observable<O>, closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle, WindowToggleSignature } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: WindowToggleSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nexport interface WindowWhenSignature<T> {\n  (closingSelector: () => Observable<any>): Observable<Observable<T>>;\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source._subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen, WindowWhenSignature } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: WindowWhenSignature<T>;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\n/* tslint:disable:max-line-length */\nexport interface WithLatestFromSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n  <R>(array: ObservableInput<any>[]): Observable<R>;\n  <R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom, WithLatestFromSignature } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: WithLatestFromSignature<T>;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto, ZipSignature } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: ZipSignature<T>;\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: Scheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: Scheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: Scheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: Scheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler<T>(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Scheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: Scheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: Scheduler): Observable<T>;\n  static of<T>(...array: Array<T | Scheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` Scheduler, which means the `next`\n   * notifications are sent synchronously, although with a different Scheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | Scheduler>): Observable<T> {\n    let scheduler = <Scheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: Scheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  }\n\n  if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new Error('invalid observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    destination.error(new TypeError('unknown type returned'));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  observables.unshift(this);\n  return zipStatic.apply(this, observables);\n}\n\n/* tslint:disable:max-line-length */\nexport interface ZipSignature<T> {\n  <R>(project: (v1: T) => R): Observable<R>;\n  <T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  <T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  <T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  <T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  <T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\n  <T2>(v2: ObservableInput<T2>): Observable<[T, T2]>;\n  <T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n  <T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n  <T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n  <T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n  <R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\n  <R>(array: Array<ObservableInput<T>>): Observable<R>;\n  <TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n}\n/* tslint:enable:max-line-length */\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private index = 0;\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    const index = this.index++;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value, index));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>,\n              private index: number) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n\nexport interface ZipAllSignature<T> {\n  <R>(project?: (...values: Array<T>) => R): Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll, ZipAllSignature } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: ZipAllSignature<T>;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Scheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: Scheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport interface ObserveOnSignature<T> {\n  (scheduler: Scheduler, delay?: number): Observable<T>;\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: Scheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: Scheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n     this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch,\n                                      this.delay,\n                                      new ObserveOnMessage(notification, this.destination)));\n   }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Scheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\n\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: Scheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    return super._subscribe(subscriber);\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\nexport class MulticastObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>,\n              private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { selector, source } = this;\n    const connectable = new ConnectableObservable(source, this.subjectFactory);\n    const subscription = selector(connectable).subscribe(subscriber);\n    subscription.add(connectable.connect());\n    return subscription;\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source._subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Scheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(scheduler: Scheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport interface TimeIntervalSignature<T> {\n  (scheduler?: Scheduler): Observable<TimeInterval<T>>;\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: Scheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source._subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: Scheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Scheduler } from '../Scheduler';\r\nimport { async } from '../scheduler/async';\r\n\r\n/**\r\n * @param scheduler\r\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\r\n * @method timestamp\r\n * @owner Observable\r\n */\r\nexport function timestamp<T>(scheduler: Scheduler = async): Observable<Timestamp<T>> {\r\n  return this.lift(new TimestampOperator(scheduler));\r\n}\r\n\r\nexport interface TimestampSignature<T> {\r\n  (scheduler?: Scheduler): Observable<Timestamp<T>>;\r\n}\r\n\r\nexport class Timestamp<T> {\r\n  constructor(public value: T, public timestamp: number) {\r\n  }\r\n};\r\n\r\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\r\n  constructor(private scheduler: Scheduler) {\r\n  }\r\n\r\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\r\n    return source._subscribe(new TimestampSubscriber(observer, this.scheduler));\r\n  }\r\n}\r\n\r\nclass TimestampSubscriber<T> extends Subscriber<T> {\r\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: Scheduler) {\r\n    super(destination);\r\n  }\r\n\r\n  protected _next(value: T): void {\r\n    const now = this.scheduler.now();\r\n\r\n    this.destination.next(new Timestamp(value, now));\r\n  }\r\n}\r\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public exception?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.exception);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.exception);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.exception);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` exception.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  lift<T, R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { Subject } from '../Subject';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): Observable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): Subject<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return !this.id ?\n      super.schedule(state, delay) : (\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      <VirtualAction<T>> this.add(\n        new VirtualAction<T>(this.scheduler, this.work))\n      ).schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber();\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | Promise<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: <R>(subscriber: Subscriber<R>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this);\n    } else {\n      sink.add(this._subscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport interface MapSignature<T> {\n  <R>(project: (value: T, index: number) => R, thisArg?: any): Observable<R>;\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T, R>(url: string, headers?: Object): Observable<R>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function() {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // open XHR first\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // now set up the events\n      this.setupEvents(xhr, request);\n\n      // finally send the request\n      if (body) {\n        xhr.send(body);\n      } else {\n        xhr.send();\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    xhr.ontimeout = function xhrTimeout(e) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    (<any>xhr.ontimeout).request = request;\n    (<any>xhr.ontimeout).subscriber = this;\n    (<any>xhr.ontimeout).progressSubscriber = progressSubscriber;\n\n    if (xhr.upload && 'withCredentials' in xhr && root.XDomainRequest) {\n      if (progressSubscriber) {\n        xhr.onprogress = function xhrProgress(e) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        (<any>xhr.onprogress).progressSubscriber = progressSubscriber;\n      }\n\n      xhr.onerror = function xhrError(e) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      (<any>xhr.onerror).request = request;\n      (<any>xhr.onerror).subscriber = this;\n      (<any>xhr.onerror).progressSubscriber = progressSubscriber;\n    }\n\n    xhr.onreadystatechange = function xhrReadyStateChange(e) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    (<any>xhr.onreadystatechange).subscriber = this;\n    (<any>xhr.onreadystatechange).progressSubscriber = progressSubscriber;\n    (<any>xhr.onreadystatechange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4) {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, enqueue as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        (errors = errors || []).push(errorObject.e);\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(err.errors);\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          break;\n        } else if (this.closed) {\n          sub.unsubscribe();\n        } else {\n          ((<any> this)._subscriptions || ((<any> this)._subscriptions = [])).push(sub);\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    return sub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, recycle as an async action.\n    if (delay !== null && delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    let action: AsyncAction<any> = actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport let $$iterator: any;\n\nconst Symbol: any = root.Symbol;\n\nif (typeof Symbol === 'function') {\n  if (Symbol.iterator) {\n    $$iterator = Symbol.iterator;\n  } else if (typeof Symbol.for === 'function') {\n    $$iterator = Symbol.for('iterator');\n  }\n} else {\n    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {\n      // Bug for mozilla version\n      $$iterator = '@@iterator';\n    } else if (root.Map) {\n      // es6-shim specific logic\n      let keys = Object.getOwnPropertyNames(root.Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {\n          $$iterator = key;\n          break;\n        }\n      }\n    } else {\n      $$iterator = '@@iterator';\n    }\n}","let objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\n\ndeclare let global: NodeJS.Global;\ndeclare let module: any;\ndeclare let exports: any;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\nexport let root: any = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);\n\nlet freeGlobal = objectTypes[typeof global] && global;\nif (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {\n  root = freeGlobal;\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/cache';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctKey';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {MulticastObservable} from './observable/MulticastObservable';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}